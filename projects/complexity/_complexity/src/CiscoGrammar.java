// Generated from CiscoGrammar.g4 by ANTLR 4.4

package batfish.grammar.cisco;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CiscoGrammar extends org.antlr.v4.runtime.Parser {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		DNS_SERVER=190, SNMPTRAP=651, QOS=552, SESSION_DISCONNECT_WARNING=635, 
		DHCPD=179, ENABLE=216, PARTICIPATE=500, UNNUMBERED=742, M_SHA1_WS=848, 
		RC4_SHA1=564, DF=177, NEXT_HOP=469, ECHO_REPLY=211, L2TP_CLASS=355, THREE_DES=713, 
		ACL_NUM=791, DIAL_PEER=181, ARP=54, NO_EXPORT=474, SNMP=649, HELLO_MULTIPLIER=292, 
		EQ=225, EVALUATE=230, EXPANDED=242, PREFIX_LIST=541, GE=278, DONT_CAPABILITY_NEGOTIATE=195, 
		SERIAL_NUMBER=627, FRAGMENTS=268, NONEGOTIATE=479, STATIC=672, EIGRP=214, 
		ACCESS_LOG=19, OSPF=489, ASA=56, FILE=253, TRANSLATE=725, LOCAL_AS=372, 
		DIAGNOSTIC=180, SERVER=628, EMPTY=215, FILE_BROWSING=254, GROUP=282, GRACEFUL_RESTART=279, 
		TIMERS=719, IPC=331, AREA=53, FTP_DATA=273, BRACE_LEFT=798, ATM=62, ALIAS=42, 
		GT=288, SHUTDOWN=644, HOST_UNREACHABLE=303, SUNRPC=686, GROUP_RANGE=286, 
		POP3=524, DEFAULT_INFORMATION_ORIGINATE=160, RADIUS=557, RETRANSMIT=585, 
		BOOTP=88, FLOW_TOP_TALKERS=263, RADIUS_SERVER=559, NETWORK_OBJECT=467, 
		DEFAULT_GATEWAY=157, MAXIMUM_ROUTES=404, BOOT_END_MARKER=86, RSAKEYPAIR=604, 
		MULTIPOINT=442, FLOAT=813, ROUTER_SOLICITATION=602, PROTOCOL=548, AT=796, 
		MFIB_MODE=415, SINGLE_QUOTE=828, STACK_MIB=669, DEFINITION=165, EBGP_MULTIHOP=209, 
		MODE=426, PAREN_RIGHT=822, AP=50, TFTP=710, ACCOUNTING_LIST=21, UPGRADE=747, 
		LOAD_SHARING=370, CA=94, LINECODE=366, SUBNETS=680, AMPERSAND=792, PORT=525, 
		EXEC=235, VIRTUAL_REASSEMBLY=756, FIREWALL=257, LINE=365, COLON=803, PACKET_TOO_BIG=494, 
		CABLELENGTH=96, MEMORY_SIZE=409, RMON=591, PREEMPT=533, EXIT_ADDRESS_FAMILY=238, 
		SYSLOG=694, INTERFACE=325, RANDOM_DETECT=560, MGCP=416, SPLIT_TUNNEL_POLICY=665, 
		SUBSCRIBER=684, HOST_ROUTING=301, ENVIRONMENT=223, LT=385, SUBSCRIBE_TO=682, 
		NETBIOS_SS=462, IP_ADDRESS_LITERAL=330, SOURCE_INTERFACE=657, CHAT_SCRIPT=116, 
		ICMP=308, REVOCATION_CHECK=588, DEFAULT_METRIC=161, MAXIMUM_PATHS=401, 
		NAME_SERVER=445, WLAN=779, HISTORY=298, LDAP_BASE_DN=356, MICROCODE=417, 
		MULTICAST_ROUTING=440, MAC_ADDRESS_TABLE=388, FACILITY_ALARM=247, AUTOSELECT=73, 
		DEFAULT_ACTION=155, VPN_TUNNEL_PROTOCOL=771, ND=452, EXCEPTION=234, DETERMINISTIC_MED=174, 
		UDP=739, ROLE=592, RULE=607, CHANNEL_PROTOCOL=114, PERIOD=824, BRACKET_LEFT=800, 
		PEER_CONFIG_CHECK_BYPASS=509, VALIDATION_USAGE=751, COMMUNITY_LIST_NUM_STANDARD=10, 
		ENCR=218, NO=472, AS_PATH=55, SECONDARY=618, MATCH=399, MOBILITY=425, 
		TUNNEL_GROUP=735, WEIGHT=776, EGP=213, DES_SHA1=170, RCV_QUEUE=566, ACL_NUM_APPLETALK=1, 
		KEEPALIVE=343, STATISTICS=673, GATEWAY=277, ECHO_REQUEST=212, IGP=315, 
		COLLECT=129, PARSER=499, NETWORK_UNKNOWN=468, PICKUP=515, SOURCE_IP_ADDRESS=658, 
		MEMBER=408, AQM_REGISTER_FNF=51, CLASS_MAP=120, FULL_DUPLEX=275, ENROLLMENT=222, 
		COMMUNITY_LIST=133, REMOTE_PORT=579, RECORD_ENTRY=569, RESOURCE=583, LENGTH=361, 
		CONTEXT=140, EVENT_HANDLER=232, DVMRP=205, IN=318, IP=329, AUTHORIZATION_SERVER_GROUP=70, 
		NON500_ISAKMP=477, SPEED=663, PERMIT=512, VPN_FILTER=769, ACL_NUM_IPX=4, 
		M_DES_DEC_PART=834, PLATFORM=519, LISTEN=367, USERNAME=750, FILE_ENTRY=255, 
		CONFIG_REGISTER=134, MAP_LIST=397, CCM=104, NO_SUMMARY=475, SERVER_PRIVATE=629, 
		SINGLE_ROUTER_MODE=645, SPANNING_TREE=661, DEFAULT=154, NETWORK=464, EVENT=231, 
		INBOUND=320, DOMAIN=191, NAT_CONTROL=450, ASSOCIATE=58, ADDRESS_POOL=32, 
		SHELL=643, RCMD=565, ESCAPE_CHARACTER=227, ADDRESS=30, TEMPLATE=708, LOG_NEIGHBOR_CHANGES=380, 
		MAP=394, FORWARD_PROTOCOL=266, M_REMARK_REMARK=845, IGMP=314, SEND_COMMUNITY=621, 
		LE=353, MAC=386, FORWARD_SLASH=814, SORT_BY=652, MPLS_LABEL=433, MOP=430, 
		ENCAPSULATION=217, WINS_SERVER=777, VIOLATE_ACTION=755, DS0_GROUP=199, 
		SPLIT_TUNNEL_NETWORK_LIST=664, DESIRABLE=172, DEFAULT_GROUP_POLICY=158, 
		FLUSH_AT_ACTIVATION=265, FINGER=258, AAA=11, NETWORK_CLOCK_PARTICIPATE=465, 
		FQDN=267, TYPE=737, CPTONE=145, ACL_NUM_EXTENDED=2, REDIRECT=570, POWEROFF=531, 
		BIND=84, ACCOUNTING=20, CHANNEL=112, TRANSPORT=726, SRR_QUEUE=666, NAME_LOOKUP=444, 
		VPDN=764, DUPLEX=204, SUPPLEMENTARY_SERVICES=687, FRAME_RELAY=269, LOCAL_PORT=374, 
		HIGH_AVAILABILITY=297, RATE_LIMIT=562, KEY=346, NETBIOS_NS=461, PRIVATE_VLAN=539, 
		TACACS_PLUS=699, LOG_INPUT=379, M_NAME_NAME=843, PEER_GATEWAY=510, MULTILINK=441, 
		SCCP=610, WS=830, FTP=272, OUI=491, CODEC=128, OUT=492, ESCAPE_C=812, 
		MLD=420, ACTIVATION_CHARACTER=26, TIMEOUTS=717, MROUTE_CACHE=435, ANGLE_BRACKET_LEFT=793, 
		ABSOLUTE_TIMEOUT=13, AES256_SHA1=36, CALL=99, AES128_SHA1=35, LAST_AS=352, 
		MLS=424, DYNAMIC=206, CALLER_ID=101, HSRP=305, FREQUENCY=271, PRE_SHARED_KEY=535, 
		HARDWARE=290, FILTER_LIST=256, RD=567, IDENTITY=312, VPC=763, EXECUTE=237, 
		OWNER=493, HOST=300, RING=589, GROUP_OBJECT=284, POLICY_LIST=522, VPN=766, 
		CABLE_RANGE=95, BFD=81, ROUTE_REFLECTOR_CLIENT=597, SUBJECT_NAME=678, 
		WSMA=781, ACCESS_LIST=18, TIMING=720, KEYPAIR=347, VRRP=773, DYNAMIC_MAP=208, 
		FABRIC=246, BGP_COMMUNITY=83, MOTD=431, BGP=82, CARAT=802, MAXIMUM_PREFIX=403, 
		ROTARY=593, STANDARD=670, LDAP_LOGIN=357, ADD=28, ACTIVATE=25, PROTOCOL_OBJECT=549, 
		DEFAULT_DOMAIN=156, CTL_FILE=148, TUNNEL=734, NETWORK_CLOCK_SELECT=466, 
		EOF_LITERAL=224, DIALER_LIST=182, NETBIOS_DGM=460, INTERNET=327, SEND_LABEL=622, 
		EXCEED_ACTION=233, STANDBY=671, HELPER_ADDRESS=293, ICMP_ECHO=309, MESSAGE_DIGEST_KEY=410, 
		AGGREGATE=38, COMM_LIST=130, INTERNAL=326, HIDDEN_SHARES=295, VTP=774, 
		DEFAULT_NETWORK=162, SHAPE=642, DOUBLE_QUOTE=810, PRIORITY_=542, SCTP=616, 
		TRIGGER=727, TTL=732, IRDP=339, USER_IDENTITY=749, COST=143, ENGINEID=221, 
		ORIGINATE=488, CERTIFICATE=109, NET_UNREACHABLE=459, CALL_HOME=100, GROUP_POLICY=285, 
		FLOWCONTROL=264, AHP=40, CARD=102, MVR=443, MFIB=414, IPV6_ADDRESS=818, 
		TELNET=707, DSP=200, M_CERTIFICATE_TEXT=832, DSS=202, LDAP_NAMING_ATTRIBUTE=359, 
		DSU=203, CONSOLE=138, PHONE_PROXY=513, M_MOTD_EOF_MOTD=840, LOCAL_IP=373, 
		SWITCHPORT=691, UNABLE=740, SAME_SECURITY_TRAFFIC=608, VRF=772, INCOMPLETE=321, 
		REDUNDANCY=574, SWITCHBACK=689, PASSWORD=502, NAMES=448, M_MOTD_HASH_MOTD=841, 
		SEQUENCE=625, COMMUNITY=132, PRIORITY=537, AUTO_COST=72, ANYCONNECT_ESSENTIALS=49, 
		MTU=438, COMMANDER_ADDRESS=131, MEDIA_TERMINATION=406, PEER_KEEPALIVE=511, 
		REDIRECTS=572, BACKSLASH=797, UDLD=738, AUTHENTICATION_SERVER_GROUP=67, 
		CLASS=118, MLD_REPORT=423, MTA=437, SWITCHING_MODE=690, LICENSE=362, THREE_DES_SHA1=714, 
		CONFIGURATION=135, UNREACHABLES=744, DNS=188, EXTCOMMUNITY_LIST=244, CLUSTER_ID=125, 
		IPV6_ADDRESS_POOL=337, ISAKMP=340, OBJECT=484, INACTIVITY_TIMER=319, CONTROLLER=142, 
		XLATE=786, ACL_NUM_STANDARD=8, ACCESS_GROUP=17, SENDER=623, WRR_QUEUE=780, 
		WEBVPN=775, ILMI_KEEPALIVE=317, HASH=291, KEEPOUT=345, LOCAL_PREFERENCE=375, 
		PORT_SECURITY=528, TTL_EXCEEDED=733, CONTACT_EMAIL_ADDR=139, SHA1=641, 
		ERRDISABLE=226, M_SHA1_HEX_PART=847, IPINIP=332, HW_MODULE=307, QUEUE_SET=555, 
		TACACS_SERVER=700, ANY=47, ROUTER=599, MDIX=405, L2TP=354, SFLOW=640, 
		COMMUNITY_NUMBER=789, TERMINAL_TYPE=709, TOP=722, TIMER=718, VERIFY=753, 
		ADMISSION=34, EXPORT_PROTOCOL=240, REMARK=576, REMOTE_IP=578, PRIVILEGE=544, 
		MAC_ADDRESS=387, ROUTE_TARGET=598, AESA=37, DISTANCE=186, MAP_CLASS=395, 
		PORT_OBJECT=527, PARAMETER_PROBLEM=496, METRIC=412, HIDEKEYS=296, MANAGEMENT_ONLY=393, 
		TFTP_SERVER=711, IPSEC_UDP=334, TIMEOUT=716, ALWAYS_COMPARE_MED=46, DESTINATION=173, 
		DOMAIN_LOOKUP=193, POWER=530, UNDERSCORE=829, NAMEIF=446, GROUP_ALIAS=283, 
		LLDP=368, CCM_MANAGER=106, REVISION=587, FAIR_QUEUE=249, SCHEDULER=612, 
		PIM=516, REDISTRIBUTE=573, SERVICE_TYPE=634, AUTHORIZATION_REQUIRED=69, 
		PATH_JITTER=504, VLAN=758, USE_VRF=748, ASYNC_BOOTP=61, MINIMAL=418, NO_ADVERTISE=473, 
		RESOURCE_POOL=584, VOICE=760, XML=787, BROADCAST=93, OTHER_ACCESS=490, 
		SERIAL=626, LANE=350, CTS=149, SERVICE_MODULE=632, CLNS=122, SOURCE_ROUTE=659, 
		TABLE_MAP=697, SYSOPT=695, PARAMETERS=497, ALLOWED=43, FRAMING=270, PKI=518, 
		SECURITY_LEVEL=620, HOSTNAME=304, ASDM=57, SOURCE=656, BANNER=79, SONET=655, 
		VERSION=754, ACCESS_CLASS=16, XCONNECT=785, PRI_GROUP=536, REVERSE_ROUTE=586, 
		PEER_GROUP=506, CONNECTED=137, ASYNC=60, WITHOUT_CSD=778, AUTO=71, IDENT=311, 
		PLUS=825, PORT_UNREACHABLE=529, SCRIPTING=615, CLOCK=123, STP=677, HALF_DUPLEX=289, 
		UNICAST_ROUTING=741, REMOVED=582, TUNNEL_GROUP_LIST=736, INHERIT=322, 
		ALLOWAS_IN=44, AUTO_SYNC=75, M_COMMENT_NON_NEWLINE=833, DEFAULT_ROUTER=164, 
		ACL_NUM_EXTENDED_IPX=3, MODULE=428, DOT11=196, MANAGEMENT=392, MASK=398, 
		PSEUDOWIRE_CLASS=551, INSTANCE=324, HIDDEN=294, MULTICAST=439, ROUTING=603, 
		AUTH_PROXY=64, VMPS=759, IPV6_PREFIX=819, IDLE_TIMEOUT=313, DOT1Q=197, 
		VPN_IDLE_TIMEOUT=770, BOOTPC=89, PREFIX=540, TRACK=723, REFLECT=575, CCM_GROUP=105, 
		BOOTPS=90, REMOTE_AS=577, EQUALS=811, DOMAIN_LIST=192, PAREN_LEFT=821, 
		ESTABLISHED=229, PEER_SESSION=507, EXTENDED=245, LACP=349, ADDITIVE=29, 
		SYSTEM=696, ALWAYS=45, ORIGIN=487, SUBNET=679, TRUNK=728, M_NAME_WS=842, 
		GATEKEEPER=276, REMOVE_PRIVATE_AS=580, NEGOTIATION=456, BRIDGE=92, AAA_SERVER=12, 
		M_KEY_NON_NEWLINE=838, GRATUITOUS_ARPS=280, PERMANENT=508, SWITCH=688, 
		TB_VLAN1=703, DELETE=167, TB_VLAN2=704, POLICE=520, SESSION_LIMIT=636, 
		FALLBACK_DN=251, RIP=590, IP_ADDRESS=816, NNTP=471, DOMAIN_NAME=194, KEYRING=348, 
		VDC=752, FLOW=260, ROUTER_ID=601, DEFAULT_INFORMATION=159, TCP=706, BACKGROUND_ROUTES_ENABLE=76, 
		ACCOUNTING_SERVER_GROUP=23, POLICY=521, DEC=809, M_DES_HEX_PART=835, DIRECT=183, 
		IKEV1=316, AUTHENTICATION_PORT=66, MEDIA_TYPE=407, BACKUPCRF=77, NEXT_HOP_SELF=470, 
		VPNV4=767, DES=169, ACCEPT_DIALIN=14, OPENFLOW=486, VPNV6=768, CLASSLESS=119, 
		NAT=449, M_DES_WS=836, QUIT=556, TIME_EXCEEDED=715, HEX=815, COMMA=804, 
		SERVER_TYPE=630, NEGOTIATE=455, MAP_GROUP=396, CHANNEL_GROUP=113, MODEM=427, 
		SOURCE_QUENCH=660, EXTCOMM_LIST=243, SETUP=639, OBJECT_GROUP=485, DEFAULT_ORIGINATE=163, 
		TCAM=705, UNREACHABLE=743, STOPBITS=675, SOFT_RECONFIGURATION=654, ND_NA=453, 
		NEIGHBOR=457, NETCONF=463, COMMENT_LINE=806, FEATURE=252, TAG=701, FAILOVER=248, 
		COUNTER=144, NEQ=458, SUBSCRIBE_TO_ALERT_GROUP=683, MAXIMUM_PEERS=402, 
		DBL=152, SERVICE_POLICY=633, MROUTE=434, SUBNET_ZERO=681, CLUSTER=124, 
		MAXIMUM=400, DEAD_INTERVAL=153, AUTHENTICATION=65, ASSOCIATION=59, ROUTE_CACHE=595, 
		ND_NS=454, LIMIT_RESOURCE=364, METRIC_TYPE=413, ROUTE=594, ACL_NUM_OTHER=6, 
		CFS=110, VPDN_GROUP=765, FTP_SERVER=274, DHCP=178, FLOW_EXPORT=262, CACHE=97, 
		ACTION=24, ANYCONNECT=48, MLD_REDUCTION=422, PROXY_ARP=550, ICMP_OBJECT=310, 
		VOICE_CARD=761, VOICE_PORT=762, EXPORT=239, DISABLE=185, BESTPATH=80, 
		DIRECTED_BROADCAST=184, TRUSTPOINT=730, MLAG=419, M_NEIGHBOR_WS=844, NATIVE=451, 
		SAP=609, SEMICOLON=827, BOOT=85, CDP=107, M_MOTD_C_MOTD=839, CACHE_TIMEOUT=98, 
		MSDP=436, IPSEC=333, BOOT_START_MARKER=87, RATE_MODE=563, AUTO_SUMMARY=74, 
		SERVICE=631, INSPECT=323, NONE=478, TACACS=698, LOCATION=376, LOGIN=382, 
		END=220, CEF=108, DELAY=166, M_DESCRIPTION_NON_NEWLINE=837, HTTP=306, 
		SDM=617, AUDIT=63, SCHEDULE=611, QUEUE_BUFFERS=553, SCP=614, ASTERISK=795, 
		ANGLE_BRACKET_RIGHT=794, PARENT=498, TRUSTPOOL=731, ACL_NUM_PROTOCOL_TYPE_CODE=7, 
		TRUST=729, FLOW_CACHE=261, COMMUNITY_LIST_NUM_EXPANDED=9, IPV6=336, SEQ=624, 
		IPV4=335, HOST_UNKNOWN=302, ACCOUNTING_PORT=22, ACCESS=15, DEVICE=175, 
		PRIORITY_QUEUE=538, NSSA=482, CHANNELIZED=115, KEEPALIVE_ENABLE=344, PASSWORD_STORAGE=503, 
		CONFORM_ACTION=136, SMTP_SERVER=648, SET=638, WWW=782, LOGGING=381, ROUTER_ADVERTISEMENT=600, 
		DYNAMIC_ACCESS_POLICY_RECORD=207, SCHEME=613, ECHO=210, XX_HIDE=788, DROP=198, 
		REMOTE_SPAN=581, POLICY_MAP=523, RADIUS_COMMON_PW=558, PROCESS=545, DEVICE_SENSOR=176, 
		HOLD_QUEUE=299, UNICAST=745, MPLS=432, MAIN_CPU=391, FALL_OVER=250, SPE=653, 
		ARCHIVE=52, CNS=127, SNMP_SERVER=650, SPD=662, LOG=377, DISTRIBUTE_LIST=187, 
		PORT_CHANNEL=526, PASSIVE_INTERFACE=501, BRACE_RIGHT=799, PREPEND=534, 
		CIPC=117, REDIRECT_FQDN=571, ISDN=341, QUEUE_LIMIT=554, BRACKET_RIGHT=801, 
		ADMINISTRATIVE_WEIGHT=33, X29=784, NAME=447, CAS_CUSTOM=103, DESCRIPTION=171, 
		X25=783, M_BANNER_WS=831, PROMPT=547, MLD_QUERY=421, BOTH=91, PAGER=495, 
		MONITOR=429, INVALID_SPI_RECOVERY=328, TRACKED=724, LOAD_INTERVAL=369, 
		BANDWIDTH=78, ACTIVE=27, VIRTUAL_TEMPLATE=757, RECORD=568, NODE=476, POUND=826, 
		CLI=121, PPP=532, CMD=126, GROUP_URL=287, PEER=505, IP_PREFIX=817, LRE=384, 
		LOCAL=371, FIRMWARE=259, MESSAGE_LENGTH=411, SUMMARY_ONLY=685, M_SHA1_DEC_PART=846, 
		CGMP=111, SSH=667, DENY=168, ACL_NUM_IPX_SAP=5, SSL=668, VARIABLE=790, 
		LPD=383, DNS_GUARD=189, MAIL_SERVER=390, SYNCHRONIZATION=693, SESSION_TIMEOUT=637, 
		DOLLAR=808, AUTHORIZATION=68, LAPB=351, ISL=342, EXPORTER=241, SLA=646, 
		PROFILE=546, ADDRESS_FAMILY=31, TAG_SWITCHING=702, LDAP_LOGIN_DN=358, 
		NSF=481, ALERT_GROUP=41, STCAPP=674, UPDATE_SOURCE=746, COMMUNITY_LIST_NUM=805, 
		LIFETIME=363, ENCRYPTION=219, SMTP=647, CRYPTO=146, THREAT_DETECTION=712, 
		LOG_ADJACENCY_CHANGES=378, LDAP_SCOPE=360, SECURITY=619, RST=606, ESP=228, 
		PERCENT=823, STORM_CONTROL=676, DASH=807, SYNC=692, GRE=281, PRIORITY_QUEUE_=543, 
		PIM_AUTO_RP=517, CONTROL_PLANE=141, TLS_PROXY=721, RANGE=561, PHYSICAL_LAYER=514, 
		RTR=605, DSPFARM=201, DAMPENING=150, NEWLINE=820, NOTIFY=480, NTP=483, 
		EXEC_TIMEOUT=236, IPX=338, MACRO=389, CRL=147, AGGREGATE_ADDRESS=39, DATABITS=151, 
		ROUTE_MAP=596;
	public static final String[] tokenNames = {
		"<INVALID>", "ACL_NUM_APPLETALK", "ACL_NUM_EXTENDED", "ACL_NUM_EXTENDED_IPX", 
		"ACL_NUM_IPX", "ACL_NUM_IPX_SAP", "ACL_NUM_OTHER", "ACL_NUM_PROTOCOL_TYPE_CODE", 
		"ACL_NUM_STANDARD", "COMMUNITY_LIST_NUM_EXPANDED", "COMMUNITY_LIST_NUM_STANDARD", 
		"'aaa'", "'aaa-server'", "'absolute-timeout'", "'accept-dialin'", "'access'", 
		"'access-class'", "'access-group'", "'access-list'", "'access-log'", "'accounting'", 
		"'accounting-list'", "'accounting-port'", "'accounting-server-group'", 
		"'action'", "'activate'", "'activation-character'", "'active'", "'add'", 
		"'additive'", "'address'", "'address-family'", "'address-pool'", "'administrative-weight'", 
		"'admission'", "'aes128-sha1'", "'aes256-sha1'", "'aesa'", "'aggregate'", 
		"'aggregate-address'", "'ahp'", "'alert-group'", "'alias'", "'allowed'", 
		"'allowas-in'", "'always'", "'always-compare-med'", "'any'", "'anyconnect'", 
		"'anyconnect-essentials'", "'ap'", "'aqm-register-fnf'", "'archive'", 
		"'area'", "'arp'", "'as-path'", "'ASA'", "'asdm'", "'associate'", "'association'", 
		"'async'", "'async-bootp'", "'atm'", "'audit'", "'auth-proxy'", "'authentication'", 
		"'authentication-port'", "'authentication-server-group'", "'authorization'", 
		"'authorization-required'", "'authorization-server-group'", "'auto'", 
		"'auto-cost'", "'autoselect'", "'auto-summary'", "'auto-sync'", "'background-routes-enable'", 
		"'backupcrf'", "'bandwidth'", "BANNER", "'bestpath'", "'bfd'", "'bgp'", 
		"'bgp-community'", "'bind'", "'boot'", "'boot-end-marker'", "'boot-start-marker'", 
		"'bootp'", "'bootpc'", "'bootps'", "'both'", "'bridge'", "'broadcast'", 
		"'ca'", "'cable-range'", "'cablelength'", "'cache'", "'cache-timeout'", 
		"'call'", "'call-home'", "'caller-id'", "'card'", "'cas-custom'", "'ccm'", 
		"'ccm-group'", "'ccm-manager'", "'cdp'", "'cef'", "'certificate'", "'cfs'", 
		"'cgmp'", "'channel'", "'channel-group'", "'channel-protocol'", "'channelized'", 
		"'chat-script'", "'cipc'", "'class'", "'classless'", "'class-map'", "'cli'", 
		"'clns'", "'clock'", "'cluster'", "'cluster-id'", "'cmd'", "'cns'", "'codec'", 
		"'collect'", "'comm-list'", "'commander-address'", "'community'", "'community-list'", 
		"'config-register'", "'configuration'", "'conform-action'", "'connected'", 
		"'console'", "'contact-email-addr'", "'context'", "'control-plane'", "'controller'", 
		"'cost'", "'counter'", "'cptone'", "'crypto'", "'crl'", "'ctl-file'", 
		"'cts'", "'dampening'", "'databits'", "'dbl'", "'dead-interval'", "'default'", 
		"'default-action'", "'default-domain'", "'default-gateway'", "'default-group-policy'", 
		"'default-information'", "'default-information-originate'", "'default-metric'", 
		"'default-network'", "'default-originate'", "'default-router'", "'definition'", 
		"'delay'", "'delete'", "'deny'", "'des'", "'des-sha1'", "'description'", 
		"'desirable'", "'destination'", "'deterministic-med'", "'device'", "'device-sensor'", 
		"'df'", "'dhcp'", "'dhcpd'", "'diagnostic'", "'dial-peer'", "'dialer-list'", 
		"'direct'", "'directed-broadcast'", "'disable'", "'distance'", "'distribute-list'", 
		"'dns'", "'dns-guard'", "'dns-server'", "'domain'", "'domain-list'", "'domain-lookup'", 
		"'domain-name'", "'dont-capability-negotiate'", "'dot11'", "'dot1q'", 
		"'drop'", "'ds0-group'", "'dsp'", "'dspfarm'", "'dss'", "'dsu'", "'duplex'", 
		"'dvmrp'", "'dynamic'", "'dynamic-access-policy-record'", "'dynamic-map'", 
		"'ebgp-multihop'", "'echo'", "'echo-reply'", "'echo-request'", "'egp'", 
		"'eigrp'", "'empty'", "'enable'", "'encapsulation'", "'encr'", "'encryption'", 
		"'end'", "'engineid'", "'enrollment'", "'environment'", "'EOF'", "'eq'", 
		"'errdisable'", "'escape-character'", "'esp'", "'established'", "'evaluate'", 
		"'event'", "'event-handler'", "'exceed-action'", "'exception'", "'exec'", 
		"'exec-timeout'", "'execute'", "'exit-address-family'", "'export'", "'export-protocol'", 
		"'exporter'", "'expanded'", "'extcomm-list'", "'extcommunity-list'", "'extended'", 
		"'fabric'", "'facility-alarm'", "'failover'", "'fair-queue'", "'fall-over'", 
		"'fallback-dn'", "'feature'", "'file'", "'file-browsing'", "'file-entry'", 
		"'filter-list'", "'firewall'", "'finger'", "'firmware'", "'flow'", "'flow-cache'", 
		"'flow-export'", "'flow-top-talkers'", "'flowcontrol'", "'flush-at-activation'", 
		"'forward-protocol'", "'fqdn'", "'fragments'", "'frame-relay'", "'framing'", 
		"'frequency'", "'ftp'", "'ftp-data'", "'ftp-server'", "'full-duplex'", 
		"'gatekeeper'", "'gateway'", "'ge'", "'graceful-restart'", "'gratuitous-arps'", 
		"'gre'", "'group'", "'group-alias'", "'group-object'", "'group-policy'", 
		"'group-range'", "'group-url'", "'gt'", "'half-duplex'", "'hardware'", 
		"'hash'", "'hello-multiplier'", "'helper-address'", "'hidden'", "'hidden-shares'", 
		"'hidekeys'", "'high-availability'", "'history'", "'hold-queue'", "'host'", 
		"'host-routing'", "'host-unknown'", "'host-unreachable'", "'hostname'", 
		"'hsrp'", "'http'", "'hw-module'", "'icmp'", "'icmp-echo'", "'icmp-object'", 
		"'ident'", "'identity'", "'idle-timeout'", "'igmp'", "'igp'", "'ikev1'", 
		"'ilmi-keepalive'", "'in'", "'inactivity-timer'", "'inbound'", "'incomplete'", 
		"'inherit'", "'inspect'", "'instance'", "'interface'", "'internal'", "'internet'", 
		"'invalid-spi-recovery'", "'ip'", "'ip-address'", "'ipc'", "'ipinip'", 
		"'ipsec'", "'ipsec-udp'", "'ipv4'", "'ipv6'", "'ipv6-address-pool'", "'ipx'", 
		"'irdp'", "'isakmp'", "'isdn'", "'isl'", "'keepalive'", "'keepalive-enable'", 
		"'keepout'", "'key'", "'keypair'", "'keyring'", "'lacp'", "'lane'", "'lapb'", 
		"'last-as'", "'le'", "'l2tp'", "'l2tp-class'", "'ldap-base-dn'", "'ldap-login'", 
		"'ldap-login-dn'", "'ldap-naming-attribute'", "'ldap-scope'", "'length'", 
		"'license'", "'lifetime'", "'limit-resource'", "'line'", "'linecode'", 
		"'listen'", "'lldp'", "'load-interval'", "'load-sharing'", "'local'", 
		"'local-as'", "'local-ip'", "'local-port'", "'local-preference'", "'location'", 
		"'log'", "'log-adjacency-changes'", "'log-input'", "'log-neighbor-changes'", 
		"'logging'", "'login'", "'lpd'", "'lre'", "'lt'", "'mac'", "'mac-address'", 
		"'mac-address-table'", "'macro'", "'mail-server'", "'main-cpu'", "'management'", 
		"'management-only'", "'map'", "'map-class'", "'map-group'", "'map-list'", 
		"'mask'", "'match'", "'maximum'", "'maximum-paths'", "'maximum-peers'", 
		"'maximum-prefix'", "'maximum-routes'", "'mdix'", "'media-termination'", 
		"'media-type'", "'member'", "'memory-size'", "'message-digest-key'", "'message-length'", 
		"'metric'", "'metric-type'", "'mfib'", "'mfib-mode'", "'mgcp'", "'microcode'", 
		"'minimal'", "'mlag'", "'mld'", "'mld-query'", "'mld-reduction'", "'mld-report'", 
		"'mls'", "'mobility'", "'mode'", "'modem'", "'module'", "'monitor'", "'mop'", 
		"'motd'", "'mpls'", "'mpls-label'", "'mroute'", "'mroute-cache'", "'msdp'", 
		"'mta'", "'mtu'", "'multicast'", "'multicast-routing'", "'multilink'", 
		"'multipoint'", "'mvr'", "'name-lookup'", "'name-server'", "'nameif'", 
		"'name'", "'names'", "'nat'", "'nat-control'", "'native'", "'nd'", "'nd-na'", 
		"'nd-ns'", "'negotiate'", "'negotiation'", "'neighbor'", "'neq'", "'net-unreachable'", 
		"'netbios-dgm'", "'netbios-ns'", "'netbios-ss'", "'netconf'", "'network'", 
		"'network-clock-participate'", "'network-clock-select'", "'network-object'", 
		"'network-unknown'", "'next-hop'", "'next-hop-self'", "'nntp'", "'no'", 
		"'no-advertise'", "'no-export'", "'no-summary'", "'node'", "'non500-isakmp'", 
		"'none'", "'nonegotiate'", "'notify'", "'nsf'", "'nssa'", "'ntp'", "'object'", 
		"'object-group'", "'openflow'", "'origin'", "'originate'", "'ospf'", "'other-access'", 
		"'oui'", "'out'", "'owner'", "'packet-too-big'", "'pager'", "'parameter-problem'", 
		"'parameters'", "'parent'", "'parser'", "'participate'", "'passive-interface'", 
		"'password'", "'password-storage'", "'path-jitter'", "'peer'", "'peer-group'", 
		"'peer-session'", "'permanent'", "'peer-config-check-bypass'", "'peer-gateway'", 
		"'peer-keepalive'", "'permit'", "'phone-proxy'", "'physical-layer'", "'pickup'", 
		"'pim'", "'pim-auto-rp'", "'pki'", "'platform'", "'police'", "'policy'", 
		"'policy-list'", "'policy-map'", "'pop3'", "'port'", "'port-channel'", 
		"'port-object'", "'port-security'", "'port-unreachable'", "'power'", "'poweroff'", 
		"'ppp'", "'preempt'", "'prepend'", "'pre-shared-key'", "'pri-group'", 
		"PRIORITY", "PRIORITY_QUEUE", "'private-vlan'", "'prefix'", "'prefix-list'", 
		"PRIORITY_", "PRIORITY_QUEUE_", "'privilege'", "'process'", "'profile'", 
		"'prompt'", "'protocol'", "'protocol-object'", "'proxy-arp'", "'pseudowire-class'", 
		"'qos'", "'queue-buffers'", "'queue-limit'", "'queue-set'", "QUIT", "'radius'", 
		"'radius-common-pw'", "'radius-server'", "'random-detect'", "'range'", 
		"'rate-limit'", "'rate-mode'", "'rc4-sha1'", "'rcmd'", "'rcv-queue'", 
		"'rd'", "'record'", "'record-entry'", "'redirect'", "'redirect-fqdn'", 
		"'redirects'", "'redistribute'", "'redundancy'", "'reflect'", "'remark'", 
		"'remote-as'", "'remote-ip'", "'remote-port'", "'remove-private-as'", 
		"'remote-span'", "'<removed>'", "'resource'", "'resource-pool'", "'retransmit'", 
		"'reverse-route'", "'revision'", "'revocation-check'", "'ring'", "'rip'", 
		"'rmon'", "'role'", "'rotary'", "'route'", "'route-cache'", "'route-map'", 
		"'route-reflector-client'", "'route-target'", "'router'", "'router-advertisement'", 
		"'router-id'", "'router-solicitation'", "'routing'", "'rsakeypair'", "'rtr'", 
		"'rst'", "'rule'", "'same-security-traffic'", "'sap'", "'sccp'", "'schedule'", 
		"'scheduler'", "'scheme'", "'scp'", "'scripting'", "'sctp'", "'sdm'", 
		"'secondary'", "'security'", "'security-level'", "'send-community'", "'send-label'", 
		"'sender'", "'seq'", "'sequence'", "'serial'", "'serial-number'", "'server'", 
		"'server-private'", "'server-type'", "'service'", "'service-module'", 
		"'service-policy'", "'service-type'", "'session-disconnect-warning'", 
		"'session-limit'", "'session-timeout'", "'set'", "'setup'", "'sflow'", 
		"'sha1'", "'shape'", "'shell'", "'shutdown'", "'single-router-mode'", 
		"'sla'", "'smtp'", "'smtp-server'", "'snmp'", "'snmp-server'", "'snmptrap'", 
		"'sort-by'", "'spe'", "'soft-reconfiguration'", "'sonet'", "'source'", 
		"'source-interface'", "'source-ip-address'", "'source-route'", "'source-quench'", 
		"'spanning-tree'", "'spd'", "'speed'", "'split-tunnel-network-list'", 
		"'split-tunnel-policy'", "'srr-queue'", "'ssh'", "'ssl'", "'stack-mib'", 
		"'standard'", "'standby'", "'static'", "'statistics'", "'stcapp'", "'stopbits'", 
		"'storm-control'", "'stp'", "'subject-name'", "'subnet'", "'subnets'", 
		"'subnet-zero'", "'subscribe-to'", "'subscribe-to-alert-group'", "'subscriber'", 
		"'summary-only'", "'sunrpc'", "'supplementary-services'", "'switch'", 
		"'switchback'", "'switching-mode'", "'switchport'", "'sync'", "'synchronization'", 
		"'syslog'", "'sysopt'", "'system'", "'table-map'", "'tacacs'", "'tacacs+'", 
		"'tacacs-server'", "'tag'", "'tag-switching'", "'tb-vlan1'", "'tb-vlan2'", 
		"'tcam'", "'tcp'", "'telnet'", "'template'", "'terminal-type'", "'tftp'", 
		"'tftp-server'", "'threat-detection'", "'3des'", "'3des-sha1'", "'time-exceeded'", 
		"'timeout'", "'timeouts'", "'timer'", "'timers'", "'timing'", "'tls-proxy'", 
		"'top'", "'track'", "'tracked'", "'translate'", "'transport'", "'trigger'", 
		"'trunk'", "'trust'", "'trustpoint'", "'trustpool'", "'ttl'", "'ttl-exceeded'", 
		"'tunnel'", "'tunnel-group'", "'tunnel-group-list'", "'type'", "'udld'", 
		"'udp'", "'Unable'", "'unicast-routing'", "'unnumbered'", "'unreachable'", 
		"'unreachables'", "'unicast'", "'update-source'", "'upgrade'", "'use-vrf'", 
		"'user-identity'", "'username'", "'validation-usage'", "'vdc'", "'verify'", 
		"'version'", "'violate-action'", "'virtual-reassembly'", "'virtual-template'", 
		"'vlan'", "'vmps'", "'voice'", "'voice-card'", "'voice-port'", "'vpc'", 
		"'vpdn'", "'vpdn-group'", "'vpn'", "'vpnv4'", "'vpnv6'", "'vpn-filter'", 
		"'vpn-idle-timeout'", "'vpn-tunnel-protocol'", "'vrf'", "'vrrp'", "'vtp'", 
		"'webvpn'", "'weight'", "'wins-server'", "'without-csd'", "'wlan'", "'wrr-queue'", 
		"'wsma'", "'www'", "'x25'", "'x29'", "'xconnect'", "'xlate'", "'xml'", 
		"XX_HIDE", "COMMUNITY_NUMBER", "VARIABLE", "ACL_NUM", "'&'", "'<'", "'>'", 
		"'*'", "'@'", "'\\'", "'{'", "'}'", "'['", "']'", "'^'", "':'", "','", 
		"COMMUNITY_LIST_NUM", "COMMENT_LINE", "'-'", "'$'", "DEC", "'\"'", "'='", 
		"ESCAPE_C", "FLOAT", "'/'", "HEX", "IP_ADDRESS", "IP_PREFIX", "IPV6_ADDRESS", 
		"IPV6_PREFIX", "NEWLINE", "'('", "')'", "'%'", "'.'", "'+'", "'#'", "';'", 
		"'''", "'_'", "WS", "M_BANNER_WS", "M_CERTIFICATE_TEXT", "M_COMMENT_NON_NEWLINE", 
		"M_DES_DEC_PART", "M_DES_HEX_PART", "M_DES_WS", "M_DESCRIPTION_NON_NEWLINE", 
		"M_KEY_NON_NEWLINE", "M_MOTD_C_MOTD", "M_MOTD_EOF_MOTD", "M_MOTD_HASH_MOTD", 
		"M_NAME_WS", "M_NAME_NAME", "M_NEIGHBOR_WS", "M_REMARK_REMARK", "M_SHA1_DEC_PART", 
		"M_SHA1_HEX_PART", "M_SHA1_WS"
	};
	public static final int
		RULE_address_family_vrf_stanza = 0, RULE_banner_stanza = 1, RULE_certificate_stanza = 2, 
		RULE_cisco_configuration = 3, RULE_hostname_stanza = 4, RULE_ip_default_gateway_stanza = 5, 
		RULE_ip_route_stanza = 6, RULE_macro_stanza = 7, RULE_null_block_stanza = 8, 
		RULE_null_block_substanza = 9, RULE_null_standalone_stanza = 10, RULE_null_stanza = 11, 
		RULE_stanza = 12, RULE_switching_mode_stanza = 13, RULE_vrf_context_stanza = 14, 
		RULE_vrf_stanza = 15, RULE_access_list_action = 16, RULE_community = 17, 
		RULE_description_line = 18, RULE_exact_match = 19, RULE_interface_name = 20, 
		RULE_port_specifier = 21, RULE_port = 22, RULE_protocol = 23, RULE_range = 24, 
		RULE_subrange = 25, RULE_switchport_trunk_encapsulation = 26, RULE_access_list_ip_range = 27, 
		RULE_appletalk_access_list_numbered_stanza = 28, RULE_appletalk_access_list_null_tail = 29, 
		RULE_appletalk_access_list_stanza = 30, RULE_arp_access_list_stanza = 31, 
		RULE_arp_al_substanza = 32, RULE_extended_access_list_additional_feature = 33, 
		RULE_extended_access_list_named_stanza = 34, RULE_extended_access_list_null_tail = 35, 
		RULE_extended_access_list_numbered_stanza = 36, RULE_extended_access_list_stanza = 37, 
		RULE_extended_access_list_tail = 38, RULE_ip_as_path_access_list_stanza = 39, 
		RULE_ip_as_path_numbered_stanza = 40, RULE_ip_as_path_access_list_tail = 41, 
		RULE_ip_community_list_expanded_stanza = 42, RULE_ip_community_list_expanded_named_stanza = 43, 
		RULE_ip_community_list_expanded_numbered_stanza = 44, RULE_ip_community_list_expanded_tail = 45, 
		RULE_ip_community_list_standard_stanza = 46, RULE_ip_community_list_standard_named_stanza = 47, 
		RULE_ip_community_list_standard_numbered_stanza = 48, RULE_ip_community_list_standard_tail = 49, 
		RULE_ip_prefix_list_stanza = 50, RULE_ip_prefix_list_named_stanza = 51, 
		RULE_ip_prefix_list_null_tail = 52, RULE_ip_prefix_list_tail = 53, RULE_ipx_sap_access_list_numbered_stanza = 54, 
		RULE_ipx_sap_access_list_null_tail = 55, RULE_ipx_sap_access_list_stanza = 56, 
		RULE_mac_access_list_stanza = 57, RULE_mac_al_substanza = 58, RULE_nexus_access_list_null_tail = 59, 
		RULE_nexus_access_list_stanza = 60, RULE_nexus_access_list_statistics = 61, 
		RULE_nexus_access_list_tail = 62, RULE_protocol_type_code_access_list_numbered_stanza = 63, 
		RULE_protocol_type_code_access_list_null_tail = 64, RULE_protocol_type_code_access_list_stanza = 65, 
		RULE_standard_access_list_null_tail = 66, RULE_standard_access_list_named_stanza = 67, 
		RULE_standard_access_list_numbered_stanza = 68, RULE_standard_access_list_stanza = 69, 
		RULE_standard_access_list_tail = 70, RULE_address_family_rb_stanza = 71, 
		RULE_address_family_rb_stanza_tail = 72, RULE_af_vrf_rb_substanza = 73, 
		RULE_af_stanza = 74, RULE_aggregate_address_af_stanza = 75, RULE_aggregate_address_rb_stanza = 76, 
		RULE_aggregate_address_tail_bgp = 77, RULE_auto_summary_af_stanza = 78, 
		RULE_cluster_id_bgp_rb_stanza = 79, RULE_default_metric_af_stanza = 80, 
		RULE_default_metric_rb_stanza = 81, RULE_default_metric_tail_bgp = 82, 
		RULE_neighbor_activate_af_stanza = 83, RULE_neighbor_default_originate_af_stanza = 84, 
		RULE_neighbor_default_originate_rb_stanza = 85, RULE_neighbor_default_originate_tail_bgp = 86, 
		RULE_neighbor_description_af_stanza = 87, RULE_neighbor_description_rb_stanza = 88, 
		RULE_neighbor_description_tail_bgp = 89, RULE_neighbor_distribute_list_af_stanza = 90, 
		RULE_neighbor_distribute_list_rb_stanza = 91, RULE_neighbor_distribute_list_tail_bgp = 92, 
		RULE_neighbor_ebgp_multihop_af_stanza = 93, RULE_neighbor_ebgp_multihop_rb_stanza = 94, 
		RULE_neighbor_ebgp_multihop_tail_bgp = 95, RULE_neighbor_filter_list_af_stanza = 96, 
		RULE_neighbor_filter_list_rb_stanza = 97, RULE_neighbor_filter_list_tail_bgp = 98, 
		RULE_neighbor_nexus_stanza = 99, RULE_neighbor_nexus_inherit_stanza = 100, 
		RULE_neighbor_nexus_null_tail = 101, RULE_neighbor_nexus_shutdown_stanza = 102, 
		RULE_neighbor_nexus_remote_as_stanza = 103, RULE_neighbor_nexus_update_source_stanza = 104, 
		RULE_neighbor_nexus_vrf_rb_substanza = 105, RULE_neighbor_next_hop_self_af_stanza = 106, 
		RULE_neighbor_nexus_tail = 107, RULE_neighbor_nexus_af_stanza = 108, RULE_neighbor_nexus_af_stanza_tail = 109, 
		RULE_neighbor_next_hop_self_rb_stanza = 110, RULE_neighbor_next_hop_self_tail_bgp = 111, 
		RULE_neighbor_peer_group_assignment_af_stanza = 112, RULE_neighbor_peer_group_assignment_rb_stanza = 113, 
		RULE_neighbor_peer_group_assignment_tail_bgp = 114, RULE_neighbor_peer_group_creation_af_stanza = 115, 
		RULE_neighbor_peer_group_creation_rb_stanza = 116, RULE_neighbor_peer_group_creation_tail_bgp = 117, 
		RULE_neighbor_prefix_list_af_stanza = 118, RULE_neighbor_prefix_list_rb_stanza = 119, 
		RULE_neighbor_prefix_list_tail_bgp = 120, RULE_neighbor_remote_as_af_stanza = 121, 
		RULE_neighbor_remote_as_rb_stanza = 122, RULE_neighbor_remote_as_tail_bgp = 123, 
		RULE_neighbor_route_map_af_stanza = 124, RULE_neighbor_route_map_rb_stanza = 125, 
		RULE_neighbor_route_map_tail_bgp = 126, RULE_neighbor_remove_private_as_af_stanza = 127, 
		RULE_neighbor_route_reflector_client_af_stanza = 128, RULE_neighbor_send_community_af_stanza = 129, 
		RULE_neighbor_send_community_rb_stanza = 130, RULE_neighbor_send_community_tail_bgp = 131, 
		RULE_neighbor_shutdown_af_stanza = 132, RULE_neighbor_shutdown_rb_stanza = 133, 
		RULE_neighbor_shutdown_tail_bgp = 134, RULE_neighbor_update_source_rb_stanza = 135, 
		RULE_network_af_stanza = 136, RULE_network_rb_stanza = 137, RULE_network_tail_bgp = 138, 
		RULE_network6_af_stanza = 139, RULE_network6_rb_stanza = 140, RULE_network6_tail_bgp = 141, 
		RULE_no_neighbor_activate_af_stanza = 142, RULE_null_af_stanza = 143, 
		RULE_null_rb_stanza = 144, RULE_null_standalone_af_stanza = 145, RULE_null_standalone_rb_stanza = 146, 
		RULE_null_template_peer_stanza = 147, RULE_null_template_peer_standalone_stanza = 148, 
		RULE_rb_stanza = 149, RULE_redistribute_aggregate_af_stanza = 150, RULE_redistribute_aggregate_rb_stanza = 151, 
		RULE_redistribute_aggregate_tail_bgp = 152, RULE_redistribute_connected_af_stanza = 153, 
		RULE_redistribute_connected_rb_stanza = 154, RULE_redistribute_connected_tail_bgp = 155, 
		RULE_redistribute_ospf_rb_stanza = 156, RULE_redistribute_ospf_af_stanza = 157, 
		RULE_redistribute_ospf_tail_bgp = 158, RULE_redistribute_static_af_stanza = 159, 
		RULE_redistribute_static_rb_stanza = 160, RULE_redistribute_static_tail_bgp = 161, 
		RULE_router_bgp_stanza = 162, RULE_router_bgp_stanza_tail = 163, RULE_router_id_bgp_rb_stanza = 164, 
		RULE_template_peer_remote_as = 165, RULE_template_peer_inherit = 166, 
		RULE_template_peer_stanza = 167, RULE_template_peer_stanza_tail = 168, 
		RULE_template_peer_update_source = 169, RULE_vrf_rb_stanza = 170, RULE_vrf_rb_substanza = 171, 
		RULE_description_if_stanza = 172, RULE_hsrp_stanza = 173, RULE_hsrp_stanza_tail = 174, 
		RULE_hsrpc_stanza = 175, RULE_if_stanza = 176, RULE_interface_stanza = 177, 
		RULE_interface_stanza_tail = 178, RULE_ip_access_group_if_stanza = 179, 
		RULE_ip_address_stanza = 180, RULE_ip_address_if_stanza = 181, RULE_ip_address_secondary_if_stanza = 182, 
		RULE_ip_ospf_cost_if_stanza = 183, RULE_ip_ospf_dead_interval_if_stanza = 184, 
		RULE_ip_ospf_dead_interval_minimal_if_stanza = 185, RULE_ip_policy_if_stanza = 186, 
		RULE_no_ip_address_if_stanza = 187, RULE_null_if_stanza = 188, RULE_null_standalone_if_stanza = 189, 
		RULE_preempt_stanza = 190, RULE_priority_stanza = 191, RULE_shutdown_if_stanza = 192, 
		RULE_switchport_access_if_stanza = 193, RULE_switchport_mode_access_stanza = 194, 
		RULE_switchport_mode_dynamic_auto_stanza = 195, RULE_switchport_mode_dynamic_desirable_stanza = 196, 
		RULE_switchport_mode_trunk_stanza = 197, RULE_switchport_trunk_allowed_if_stanza = 198, 
		RULE_switchport_trunk_encapsulation_if_stanza = 199, RULE_switchport_trunk_native_if_stanza = 200, 
		RULE_area_ipv6_ro_stanza = 201, RULE_area_nssa_ro_stanza = 202, RULE_default_information_ipv6_ro_stanza = 203, 
		RULE_default_information_ro_stanza = 204, RULE_ipv6_ro_stanza = 205, RULE_ipv6_router_ospf_stanza = 206, 
		RULE_log_adjacency_changes_ipv6_ro_stanza = 207, RULE_maximum_paths_ro_stanza = 208, 
		RULE_network_ro_stanza = 209, RULE_null_ipv6_ro_stanza = 210, RULE_null_ro_stanza = 211, 
		RULE_null_standalone_ro_stanza = 212, RULE_passive_interface_ipv6_ro_stanza = 213, 
		RULE_passive_interface_default_ro_stanza = 214, RULE_passive_interface_ro_stanza = 215, 
		RULE_redistribute_bgp_ro_stanza = 216, RULE_redistribute_ipv6_ro_stanza = 217, 
		RULE_redistribute_connected_ro_stanza = 218, RULE_redistribute_rip_ro_stanza = 219, 
		RULE_redistribute_static_ro_stanza = 220, RULE_ro_stanza = 221, RULE_router_id_ipv6_ro_stanza = 222, 
		RULE_router_id_ro_stanza = 223, RULE_router_ospf_stanza = 224, RULE_router_ospf_stanza_tail = 225, 
		RULE_distance_rr_stanza = 226, RULE_distribute_list_rr_stanza = 227, RULE_network_rr_stanza = 228, 
		RULE_passive_interface_rr_stanza = 229, RULE_redistribute_rr_stanza = 230, 
		RULE_router_rip_stanza = 231, RULE_rr_stanza = 232, RULE_match_as_path_access_list_rm_stanza = 233, 
		RULE_match_community_list_rm_stanza = 234, RULE_match_ip_access_list_rm_stanza = 235, 
		RULE_match_ip_prefix_list_rm_stanza = 236, RULE_match_ipv6_rm_stanza = 237, 
		RULE_match_length_rm_stanza = 238, RULE_match_rm_stanza = 239, RULE_match_tag_rm_stanza = 240, 
		RULE_null_rm_stanza = 241, RULE_rm_stanza = 242, RULE_route_map_named_stanza = 243, 
		RULE_route_map_stanza = 244, RULE_route_map_tail = 245, RULE_route_map_tail_tail = 246, 
		RULE_set_as_path_prepend_rm_stanza = 247, RULE_set_comm_list_delete_rm_stanza = 248, 
		RULE_set_community_additive_rm_stanza = 249, RULE_set_community_none_rm_stanza = 250, 
		RULE_set_community_rm_stanza = 251, RULE_set_extcomm_list_rm_stanza = 252, 
		RULE_set_interface_rm_stanza = 253, RULE_set_ip_df_rm_stanza = 254, RULE_set_ipv6_rm_stanza = 255, 
		RULE_set_local_preference_rm_stanza = 256, RULE_set_metric_rm_stanza = 257, 
		RULE_set_metric_type_rm_stanza = 258, RULE_set_mpls_label_rm_stanza = 259, 
		RULE_set_next_hop_rm_stanza = 260, RULE_set_origin_rm_stanza = 261, RULE_set_weight_rm_stanza = 262, 
		RULE_set_rm_stanza = 263;
	public static final String[] ruleNames = {
		"address_family_vrf_stanza", "banner_stanza", "certificate_stanza", "cisco_configuration", 
		"hostname_stanza", "ip_default_gateway_stanza", "ip_route_stanza", "macro_stanza", 
		"null_block_stanza", "null_block_substanza", "null_standalone_stanza", 
		"null_stanza", "stanza", "switching_mode_stanza", "vrf_context_stanza", 
		"vrf_stanza", "access_list_action", "community", "description_line", "exact_match", 
		"interface_name", "port_specifier", "port", "protocol", "range", "subrange", 
		"switchport_trunk_encapsulation", "access_list_ip_range", "appletalk_access_list_numbered_stanza", 
		"appletalk_access_list_null_tail", "appletalk_access_list_stanza", "arp_access_list_stanza", 
		"arp_al_substanza", "extended_access_list_additional_feature", "extended_access_list_named_stanza", 
		"extended_access_list_null_tail", "extended_access_list_numbered_stanza", 
		"extended_access_list_stanza", "extended_access_list_tail", "ip_as_path_access_list_stanza", 
		"ip_as_path_numbered_stanza", "ip_as_path_access_list_tail", "ip_community_list_expanded_stanza", 
		"ip_community_list_expanded_named_stanza", "ip_community_list_expanded_numbered_stanza", 
		"ip_community_list_expanded_tail", "ip_community_list_standard_stanza", 
		"ip_community_list_standard_named_stanza", "ip_community_list_standard_numbered_stanza", 
		"ip_community_list_standard_tail", "ip_prefix_list_stanza", "ip_prefix_list_named_stanza", 
		"ip_prefix_list_null_tail", "ip_prefix_list_tail", "ipx_sap_access_list_numbered_stanza", 
		"ipx_sap_access_list_null_tail", "ipx_sap_access_list_stanza", "mac_access_list_stanza", 
		"mac_al_substanza", "nexus_access_list_null_tail", "nexus_access_list_stanza", 
		"nexus_access_list_statistics", "nexus_access_list_tail", "protocol_type_code_access_list_numbered_stanza", 
		"protocol_type_code_access_list_null_tail", "protocol_type_code_access_list_stanza", 
		"standard_access_list_null_tail", "standard_access_list_named_stanza", 
		"standard_access_list_numbered_stanza", "standard_access_list_stanza", 
		"standard_access_list_tail", "address_family_rb_stanza", "address_family_rb_stanza_tail", 
		"af_vrf_rb_substanza", "af_stanza", "aggregate_address_af_stanza", "aggregate_address_rb_stanza", 
		"aggregate_address_tail_bgp", "auto_summary_af_stanza", "cluster_id_bgp_rb_stanza", 
		"default_metric_af_stanza", "default_metric_rb_stanza", "default_metric_tail_bgp", 
		"neighbor_activate_af_stanza", "neighbor_default_originate_af_stanza", 
		"neighbor_default_originate_rb_stanza", "neighbor_default_originate_tail_bgp", 
		"neighbor_description_af_stanza", "neighbor_description_rb_stanza", "neighbor_description_tail_bgp", 
		"neighbor_distribute_list_af_stanza", "neighbor_distribute_list_rb_stanza", 
		"neighbor_distribute_list_tail_bgp", "neighbor_ebgp_multihop_af_stanza", 
		"neighbor_ebgp_multihop_rb_stanza", "neighbor_ebgp_multihop_tail_bgp", 
		"neighbor_filter_list_af_stanza", "neighbor_filter_list_rb_stanza", "neighbor_filter_list_tail_bgp", 
		"neighbor_nexus_stanza", "neighbor_nexus_inherit_stanza", "neighbor_nexus_null_tail", 
		"neighbor_nexus_shutdown_stanza", "neighbor_nexus_remote_as_stanza", "neighbor_nexus_update_source_stanza", 
		"neighbor_nexus_vrf_rb_substanza", "neighbor_next_hop_self_af_stanza", 
		"neighbor_nexus_tail", "neighbor_nexus_af_stanza", "neighbor_nexus_af_stanza_tail", 
		"neighbor_next_hop_self_rb_stanza", "neighbor_next_hop_self_tail_bgp", 
		"neighbor_peer_group_assignment_af_stanza", "neighbor_peer_group_assignment_rb_stanza", 
		"neighbor_peer_group_assignment_tail_bgp", "neighbor_peer_group_creation_af_stanza", 
		"neighbor_peer_group_creation_rb_stanza", "neighbor_peer_group_creation_tail_bgp", 
		"neighbor_prefix_list_af_stanza", "neighbor_prefix_list_rb_stanza", "neighbor_prefix_list_tail_bgp", 
		"neighbor_remote_as_af_stanza", "neighbor_remote_as_rb_stanza", "neighbor_remote_as_tail_bgp", 
		"neighbor_route_map_af_stanza", "neighbor_route_map_rb_stanza", "neighbor_route_map_tail_bgp", 
		"neighbor_remove_private_as_af_stanza", "neighbor_route_reflector_client_af_stanza", 
		"neighbor_send_community_af_stanza", "neighbor_send_community_rb_stanza", 
		"neighbor_send_community_tail_bgp", "neighbor_shutdown_af_stanza", "neighbor_shutdown_rb_stanza", 
		"neighbor_shutdown_tail_bgp", "neighbor_update_source_rb_stanza", "network_af_stanza", 
		"network_rb_stanza", "network_tail_bgp", "network6_af_stanza", "network6_rb_stanza", 
		"network6_tail_bgp", "no_neighbor_activate_af_stanza", "null_af_stanza", 
		"null_rb_stanza", "null_standalone_af_stanza", "null_standalone_rb_stanza", 
		"null_template_peer_stanza", "null_template_peer_standalone_stanza", "rb_stanza", 
		"redistribute_aggregate_af_stanza", "redistribute_aggregate_rb_stanza", 
		"redistribute_aggregate_tail_bgp", "redistribute_connected_af_stanza", 
		"redistribute_connected_rb_stanza", "redistribute_connected_tail_bgp", 
		"redistribute_ospf_rb_stanza", "redistribute_ospf_af_stanza", "redistribute_ospf_tail_bgp", 
		"redistribute_static_af_stanza", "redistribute_static_rb_stanza", "redistribute_static_tail_bgp", 
		"router_bgp_stanza", "router_bgp_stanza_tail", "router_id_bgp_rb_stanza", 
		"template_peer_remote_as", "template_peer_inherit", "template_peer_stanza", 
		"template_peer_stanza_tail", "template_peer_update_source", "vrf_rb_stanza", 
		"vrf_rb_substanza", "description_if_stanza", "hsrp_stanza", "hsrp_stanza_tail", 
		"hsrpc_stanza", "if_stanza", "interface_stanza", "interface_stanza_tail", 
		"ip_access_group_if_stanza", "ip_address_stanza", "ip_address_if_stanza", 
		"ip_address_secondary_if_stanza", "ip_ospf_cost_if_stanza", "ip_ospf_dead_interval_if_stanza", 
		"ip_ospf_dead_interval_minimal_if_stanza", "ip_policy_if_stanza", "no_ip_address_if_stanza", 
		"null_if_stanza", "null_standalone_if_stanza", "preempt_stanza", "priority_stanza", 
		"shutdown_if_stanza", "switchport_access_if_stanza", "switchport_mode_access_stanza", 
		"switchport_mode_dynamic_auto_stanza", "switchport_mode_dynamic_desirable_stanza", 
		"switchport_mode_trunk_stanza", "switchport_trunk_allowed_if_stanza", 
		"switchport_trunk_encapsulation_if_stanza", "switchport_trunk_native_if_stanza", 
		"area_ipv6_ro_stanza", "area_nssa_ro_stanza", "default_information_ipv6_ro_stanza", 
		"default_information_ro_stanza", "ipv6_ro_stanza", "ipv6_router_ospf_stanza", 
		"log_adjacency_changes_ipv6_ro_stanza", "maximum_paths_ro_stanza", "network_ro_stanza", 
		"null_ipv6_ro_stanza", "null_ro_stanza", "null_standalone_ro_stanza", 
		"passive_interface_ipv6_ro_stanza", "passive_interface_default_ro_stanza", 
		"passive_interface_ro_stanza", "redistribute_bgp_ro_stanza", "redistribute_ipv6_ro_stanza", 
		"redistribute_connected_ro_stanza", "redistribute_rip_ro_stanza", "redistribute_static_ro_stanza", 
		"ro_stanza", "router_id_ipv6_ro_stanza", "router_id_ro_stanza", "router_ospf_stanza", 
		"router_ospf_stanza_tail", "distance_rr_stanza", "distribute_list_rr_stanza", 
		"network_rr_stanza", "passive_interface_rr_stanza", "redistribute_rr_stanza", 
		"router_rip_stanza", "rr_stanza", "match_as_path_access_list_rm_stanza", 
		"match_community_list_rm_stanza", "match_ip_access_list_rm_stanza", "match_ip_prefix_list_rm_stanza", 
		"match_ipv6_rm_stanza", "match_length_rm_stanza", "match_rm_stanza", "match_tag_rm_stanza", 
		"null_rm_stanza", "rm_stanza", "route_map_named_stanza", "route_map_stanza", 
		"route_map_tail", "route_map_tail_tail", "set_as_path_prepend_rm_stanza", 
		"set_comm_list_delete_rm_stanza", "set_community_additive_rm_stanza", 
		"set_community_none_rm_stanza", "set_community_rm_stanza", "set_extcomm_list_rm_stanza", 
		"set_interface_rm_stanza", "set_ip_df_rm_stanza", "set_ipv6_rm_stanza", 
		"set_local_preference_rm_stanza", "set_metric_rm_stanza", "set_metric_type_rm_stanza", 
		"set_mpls_label_rm_stanza", "set_next_hop_rm_stanza", "set_origin_rm_stanza", 
		"set_weight_rm_stanza", "set_rm_stanza"
	};

	@Override
	public String getGrammarFileName() { return "CiscoGrammar.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public CiscoGrammar(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Address_family_vrf_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode EXIT_ADDRESS_FAMILY() { return getToken(CiscoGrammar.EXIT_ADDRESS_FAMILY, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Null_block_substanzaContext null_block_substanza(int i) {
			return getRuleContext(Null_block_substanzaContext.class,i);
		}
		public List<Null_block_substanzaContext> null_block_substanza() {
			return getRuleContexts(Null_block_substanzaContext.class);
		}
		public TerminalNode ADDRESS_FAMILY() { return getToken(CiscoGrammar.ADDRESS_FAMILY, 0); }
		public Address_family_vrf_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_address_family_vrf_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAddress_family_vrf_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAddress_family_vrf_stanza(this);
		}
	}

	public final Address_family_vrf_stanzaContext address_family_vrf_stanza() throws RecognitionException {
		Address_family_vrf_stanzaContext _localctx = new Address_family_vrf_stanzaContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_address_family_vrf_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(528); match(ADDRESS_FAMILY);
			setState(532);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(529);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(534);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(535); match(NEWLINE);
			setState(539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS_CLASS) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATION_CHARACTER) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << AESA) | (1L << ANYCONNECT) | (1L << ASSOCIATE) | (1L << ASSOCIATION))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (AUTHENTICATION - 65)) | (1L << (AUTHENTICATION_SERVER_GROUP - 65)) | (1L << (AUTHORIZATION - 65)) | (1L << (AUTHORIZATION_REQUIRED - 65)) | (1L << (AUTHORIZATION_SERVER_GROUP - 65)) | (1L << (AUTOSELECT - 65)) | (1L << (AUTO_SYNC - 65)) | (1L << (BACKGROUND_ROUTES_ENABLE - 65)) | (1L << (BACKUPCRF - 65)) | (1L << (BANDWIDTH - 65)) | (1L << (BANNER - 65)) | (1L << (BIND - 65)) | (1L << (BRIDGE - 65)) | (1L << (CABLELENGTH - 65)) | (1L << (CACHE - 65)) | (1L << (CACHE_TIMEOUT - 65)) | (1L << (CALL - 65)) | (1L << (CALLER_ID - 65)) | (1L << (CAS_CUSTOM - 65)) | (1L << (CERTIFICATE - 65)) | (1L << (CHANNEL_GROUP - 65)) | (1L << (CHANNELIZED - 65)) | (1L << (CLASS - 65)) | (1L << (CLOCK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (COLLECT - 129)) | (1L << (CONFORM_ACTION - 129)) | (1L << (CPTONE - 129)) | (1L << (CRYPTO - 129)) | (1L << (CRL - 129)) | (1L << (DATABITS - 129)) | (1L << (DBL - 129)) | (1L << (DEFAULT_ACTION - 129)) | (1L << (DEFAULT_DOMAIN - 129)) | (1L << (DEFAULT_GROUP_POLICY - 129)) | (1L << (DEFAULT_ROUTER - 129)) | (1L << (DELAY - 129)) | (1L << (DENY - 129)) | (1L << (DESCRIPTION - 129)) | (1L << (DESTINATION - 129)) | (1L << (DIAGNOSTIC - 129)) | (1L << (DNS_SERVER - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (DOMAIN_NAME - 194)) | (1L << (DROP - 194)) | (1L << (DS0_GROUP - 194)) | (1L << (ENCAPSULATION - 194)) | (1L << (ENROLLMENT - 194)) | (1L << (ESCAPE_CHARACTER - 194)) | (1L << (EXCEED_ACTION - 194)) | (1L << (EXEC - 194)) | (1L << (EXEC_TIMEOUT - 194)) | (1L << (EXPORT_PROTOCOL - 194)) | (1L << (EXPORTER - 194)) | (1L << (FABRIC - 194)) | (1L << (FAIR_QUEUE - 194)) | (1L << (FALLBACK_DN - 194)) | (1L << (FILE_BROWSING - 194)) | (1L << (FILE_ENTRY - 194)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (FLUSH_AT_ACTIVATION - 265)) | (1L << (FQDN - 265)) | (1L << (FRAMING - 265)) | (1L << (GROUP_ALIAS - 265)) | (1L << (GROUP_POLICY - 265)) | (1L << (GROUP_URL - 265)) | (1L << (HIDDEN - 265)) | (1L << (HIDDEN_SHARES - 265)) | (1L << (HIDEKEYS - 265)) | (1L << (HIGH_AVAILABILITY - 265)) | (1L << (HISTORY - 265)) | (1L << (IDLE_TIMEOUT - 265)) | (1L << (INSPECT - 265)) | (1L << (INSTANCE - 265)) | (1L << (INTERFACE - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (IP - 329)) | (1L << (IPSEC_UDP - 329)) | (1L << (IPV6 - 329)) | (1L << (IPV6_ADDRESS_POOL - 329)) | (1L << (IPX - 329)) | (1L << (ISAKMP - 329)) | (1L << (KEEPALIVE_ENABLE - 329)) | (1L << (KEYPAIR - 329)) | (1L << (KEYRING - 329)) | (1L << (L2TP - 329)) | (1L << (LENGTH - 329)) | (1L << (LINE - 329)) | (1L << (LINECODE - 329)) | (1L << (LLDP - 329)) | (1L << (LOCAL_IP - 329)) | (1L << (LOCAL_PORT - 329)) | (1L << (LOCATION - 329)) | (1L << (LOG - 329)) | (1L << (LOGGING - 329)) | (1L << (LOGIN - 329)) | (1L << (MAIN_CPU - 329)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MATCH - 399)) | (1L << (MAXIMUM - 399)) | (1L << (MESSAGE_LENGTH - 399)) | (1L << (MODE - 399)) | (1L << (MODEM - 399)) | (1L << (MTU - 399)) | (1L << (NAME - 399)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (NETWORK - 464)) | (1L << (NO - 464)) | (1L << (NODE - 464)) | (1L << (NOTIFY - 464)) | (1L << (PARAMETERS - 464)) | (1L << (PARENT - 464)) | (1L << (PASSWORD - 464)) | (1L << (PASSWORD_STORAGE - 464)) | (1L << (PATH_JITTER - 464)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 464)) | (1L << (PEER_GATEWAY - 464)) | (1L << (PEER_KEEPALIVE - 464)) | (1L << (PERMIT - 464)) | (1L << (PICKUP - 464)) | (1L << (POLICE - 464)) | (1L << (POLICY_MAP - 464)) | (1L << (PORT - 464)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (PRI_GROUP - 536)) | (1L << (PRIORITY - 536)) | (1L << (PREFIX - 536)) | (1L << (PRIVILEGE - 536)) | (1L << (PROTOCOL - 536)) | (1L << (QUEUE_BUFFERS - 536)) | (1L << (QUEUE_LIMIT - 536)) | (1L << (RANDOM_DETECT - 536)) | (1L << (RD - 536)) | (1L << (RECORD - 536)) | (1L << (RECORD_ENTRY - 536)) | (1L << (REDISTRIBUTE - 536)) | (1L << (REMARK - 536)) | (1L << (REMOTE_IP - 536)) | (1L << (REMOTE_PORT - 536)) | (1L << (REMOTE_SPAN - 536)) | (1L << (REMOVED - 536)) | (1L << (RETRANSMIT - 536)) | (1L << (REVERSE_ROUTE - 536)) | (1L << (REVISION - 536)) | (1L << (RING - 536)) | (1L << (ROLE - 536)) | (1L << (ROTARY - 536)) | (1L << (ROUTE_TARGET - 536)))) != 0) || ((((_la - 607)) & ~0x3f) == 0 && ((1L << (_la - 607)) & ((1L << (RULE - 607)) | (1L << (SCHEME - 607)) | (1L << (SEQUENCE - 607)) | (1L << (SERVER_PRIVATE - 607)) | (1L << (SERVICE - 607)) | (1L << (SERVICE_POLICY - 607)) | (1L << (SERVICE_TYPE - 607)) | (1L << (SESSION_DISCONNECT_WARNING - 607)) | (1L << (SESSION_LIMIT - 607)) | (1L << (SESSION_TIMEOUT - 607)) | (1L << (SET - 607)) | (1L << (SHAPE - 607)) | (1L << (SHUTDOWN - 607)) | (1L << (SINGLE_ROUTER_MODE - 607)) | (1L << (SORT_BY - 607)) | (1L << (SOURCE - 607)) | (1L << (SPANNING_TREE - 607)) | (1L << (SPEED - 607)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 607)) | (1L << (SPLIT_TUNNEL_POLICY - 607)))) != 0) || ((((_la - 675)) & ~0x3f) == 0 && ((1L << (_la - 675)) & ((1L << (STOPBITS - 675)) | (1L << (STP - 675)) | (1L << (SUBJECT_NAME - 675)) | (1L << (SWITCHBACK - 675)) | (1L << (SYNC - 675)) | (1L << (TB_VLAN1 - 675)) | (1L << (TB_VLAN2 - 675)) | (1L << (TERMINAL_TYPE - 675)) | (1L << (TIMEOUTS - 675)) | (1L << (TIMER - 675)) | (1L << (TIMING - 675)) | (1L << (TOP - 675)) | (1L << (TRANSPORT - 675)) | (1L << (TRIGGER - 675)) | (1L << (TUNNEL_GROUP - 675)))) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & ((1L << (USE_VRF - 748)) | (1L << (VIOLATE_ACTION - 748)) | (1L << (VIRTUAL_TEMPLATE - 748)) | (1L << (VPN_FILTER - 748)) | (1L << (VPN_IDLE_TIMEOUT - 748)) | (1L << (VPN_TUNNEL_PROTOCOL - 748)) | (1L << (WEBVPN - 748)) | (1L << (WINS_SERVER - 748)) | (1L << (WITHOUT_CSD - 748)))) != 0)) {
				{
				{
				setState(536); null_block_substanza();
				}
				}
				setState(541);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(542); match(EXIT_ADDRESS_FAMILY);
			setState(543); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Banner_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode ESCAPE_C(int i) {
			return getToken(CiscoGrammar.ESCAPE_C, i);
		}
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public List<TerminalNode> EOF_LITERAL() { return getTokens(CiscoGrammar.EOF_LITERAL); }
		public TerminalNode POUND(int i) {
			return getToken(CiscoGrammar.POUND, i);
		}
		public List<TerminalNode> POUND() { return getTokens(CiscoGrammar.POUND); }
		public List<TerminalNode> ESCAPE_C() { return getTokens(CiscoGrammar.ESCAPE_C); }
		public TerminalNode EOF_LITERAL(int i) {
			return getToken(CiscoGrammar.EOF_LITERAL, i);
		}
		public TerminalNode BANNER() { return getToken(CiscoGrammar.BANNER, 0); }
		public Banner_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_banner_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterBanner_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitBanner_stanza(this);
		}
	}

	public final Banner_stanzaContext banner_stanza() throws RecognitionException {
		Banner_stanzaContext _localctx = new Banner_stanzaContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_banner_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(545); match(BANNER);
			{
			setState(570);
			switch (_input.LA(1)) {
			case ESCAPE_C:
				{
				{
				setState(546); match(ESCAPE_C);
				setState(550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (NEWLINE - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
					{
					{
					setState(547);
					_la = _input.LA(1);
					if ( _la <= 0 || (_la==ESCAPE_C) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					}
					setState(552);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(553); match(ESCAPE_C);
				}
				}
				break;
			case POUND:
				{
				{
				setState(554); match(POUND);
				setState(558);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (NEWLINE - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
					{
					{
					setState(555);
					_la = _input.LA(1);
					if ( _la <= 0 || (_la==POUND) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					}
					setState(560);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(561); match(POUND);
				}
				}
				break;
			case NEWLINE:
				{
				{
				setState(562); match(NEWLINE);
				setState(566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (NEWLINE - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
					{
					{
					setState(563);
					_la = _input.LA(1);
					if ( _la <= 0 || (_la==EOF_LITERAL) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					}
					setState(568);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(569); match(EOF_LITERAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			setState(572); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Certificate_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode QUIT(int i) {
			return getToken(CiscoGrammar.QUIT, i);
		}
		public TerminalNode CERTIFICATE() { return getToken(CiscoGrammar.CERTIFICATE, 0); }
		public List<TerminalNode> QUIT() { return getTokens(CiscoGrammar.QUIT); }
		public Certificate_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_certificate_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterCertificate_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitCertificate_stanza(this);
		}
	}

	public final Certificate_stanzaContext certificate_stanza() throws RecognitionException {
		Certificate_stanzaContext _localctx = new Certificate_stanzaContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_certificate_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(574); match(CERTIFICATE);
			setState(578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (NEWLINE - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(575);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==QUIT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(580);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(581); match(QUIT);
			setState(582); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cisco_configurationContext extends ParserRuleContext {
		public StanzaContext stanza;
		public List<StanzaContext> sl = new ArrayList<StanzaContext>();
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public StanzaContext stanza(int i) {
			return getRuleContext(StanzaContext.class,i);
		}
		public TerminalNode EOF() { return getToken(CiscoGrammar.EOF, 0); }
		public List<StanzaContext> stanza() {
			return getRuleContexts(StanzaContext.class);
		}
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode COLON() { return getToken(CiscoGrammar.COLON, 0); }
		public TerminalNode END() { return getToken(CiscoGrammar.END, 0); }
		public Cisco_configurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cisco_configuration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterCisco_configuration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitCisco_configuration(this);
		}
	}

	public final Cisco_configurationContext cisco_configuration() throws RecognitionException {
		Cisco_configurationContext _localctx = new Cisco_configurationContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_cisco_configuration);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(585); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(584); ((Cisco_configurationContext)_localctx).stanza = stanza();
					((Cisco_configurationContext)_localctx).sl.add(((Cisco_configurationContext)_localctx).stanza);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(587); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(590);
			_la = _input.LA(1);
			if (_la==COLON) {
				{
				setState(589); match(COLON);
				}
			}

			setState(593);
			_la = _input.LA(1);
			if (_la==END) {
				{
				setState(592); match(END);
				}
			}

			setState(598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NEWLINE) {
				{
				{
				setState(595); match(NEWLINE);
				}
				}
				setState(600);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(601); match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hostname_stanzaContext extends ParserRuleContext {
		public Token name;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode HOSTNAME() { return getToken(CiscoGrammar.HOSTNAME, 0); }
		public Hostname_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostname_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterHostname_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitHostname_stanza(this);
		}
	}

	public final Hostname_stanzaContext hostname_stanza() throws RecognitionException {
		Hostname_stanzaContext _localctx = new Hostname_stanzaContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_hostname_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(603); match(HOSTNAME);
			setState(607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(604);
				((Hostname_stanzaContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
					((Hostname_stanzaContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(609);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(610); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_default_gateway_stanzaContext extends ParserRuleContext {
		public Token gateway;
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode DEFAULT_GATEWAY() { return getToken(CiscoGrammar.DEFAULT_GATEWAY, 0); }
		public Ip_default_gateway_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_default_gateway_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_default_gateway_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_default_gateway_stanza(this);
		}
	}

	public final Ip_default_gateway_stanzaContext ip_default_gateway_stanza() throws RecognitionException {
		Ip_default_gateway_stanzaContext _localctx = new Ip_default_gateway_stanzaContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_ip_default_gateway_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(612); match(IP);
			setState(613); match(DEFAULT_GATEWAY);
			setState(614); ((Ip_default_gateway_stanzaContext)_localctx).gateway = match(IP_ADDRESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_route_stanzaContext extends ParserRuleContext {
		public Token address;
		public Token mask;
		public Token prefix;
		public Token nexthopip;
		public Token nexthopprefix;
		public Interface_nameContext nexthopint;
		public Token distance;
		public Token tag;
		public Token perm;
		public Token track;
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public List<TerminalNode> IP_ADDRESS() { return getTokens(CiscoGrammar.IP_ADDRESS); }
		public List<TerminalNode> PERMANENT() { return getTokens(CiscoGrammar.PERMANENT); }
		public TerminalNode TAG(int i) {
			return getToken(CiscoGrammar.TAG, i);
		}
		public TerminalNode PERMANENT(int i) {
			return getToken(CiscoGrammar.PERMANENT, i);
		}
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode TRACK(int i) {
			return getToken(CiscoGrammar.TRACK, i);
		}
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<Interface_nameContext> interface_name() {
			return getRuleContexts(Interface_nameContext.class);
		}
		public TerminalNode ROUTE() { return getToken(CiscoGrammar.ROUTE, 0); }
		public TerminalNode IP_PREFIX(int i) {
			return getToken(CiscoGrammar.IP_PREFIX, i);
		}
		public List<TerminalNode> TRACK() { return getTokens(CiscoGrammar.TRACK); }
		public TerminalNode IP_ADDRESS(int i) {
			return getToken(CiscoGrammar.IP_ADDRESS, i);
		}
		public TerminalNode NAME() { return getToken(CiscoGrammar.NAME, 0); }
		public Interface_nameContext interface_name(int i) {
			return getRuleContext(Interface_nameContext.class,i);
		}
		public List<TerminalNode> TAG() { return getTokens(CiscoGrammar.TAG); }
		public List<TerminalNode> IP_PREFIX() { return getTokens(CiscoGrammar.IP_PREFIX); }
		public Ip_route_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_route_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_route_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_route_stanza(this);
		}
	}

	public final Ip_route_stanzaContext ip_route_stanza() throws RecognitionException {
		Ip_route_stanzaContext _localctx = new Ip_route_stanzaContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_ip_route_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(616); match(IP);
			setState(617); match(ROUTE);
			setState(621);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				{
				{
				setState(618); ((Ip_route_stanzaContext)_localctx).address = match(IP_ADDRESS);
				setState(619); ((Ip_route_stanzaContext)_localctx).mask = match(IP_ADDRESS);
				}
				}
				break;
			case IP_PREFIX:
				{
				setState(620); ((Ip_route_stanzaContext)_localctx).prefix = match(IP_PREFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERMANENT || _la==TAG || _la==TRACK || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (VARIABLE - 790)) | (1L << (DEC - 790)) | (1L << (IP_ADDRESS - 790)) | (1L << (IP_PREFIX - 790)))) != 0)) {
				{
				setState(632);
				switch (_input.LA(1)) {
				case IP_ADDRESS:
					{
					setState(623); ((Ip_route_stanzaContext)_localctx).nexthopip = match(IP_ADDRESS);
					}
					break;
				case IP_PREFIX:
					{
					setState(624); ((Ip_route_stanzaContext)_localctx).nexthopprefix = match(IP_PREFIX);
					}
					break;
				case VARIABLE:
					{
					setState(625); ((Ip_route_stanzaContext)_localctx).nexthopint = interface_name();
					}
					break;
				case DEC:
					{
					setState(626); ((Ip_route_stanzaContext)_localctx).distance = match(DEC);
					}
					break;
				case TAG:
					{
					{
					setState(627); match(TAG);
					setState(628); ((Ip_route_stanzaContext)_localctx).tag = match(DEC);
					}
					}
					break;
				case PERMANENT:
					{
					setState(629); ((Ip_route_stanzaContext)_localctx).perm = match(PERMANENT);
					}
					break;
				case TRACK:
					{
					{
					setState(630); match(TRACK);
					setState(631); ((Ip_route_stanzaContext)_localctx).track = match(DEC);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(636);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(644);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(637); match(NAME);
				setState(641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
					{
					{
					setState(638);
					_la = _input.LA(1);
					if ( _la <= 0 || (_la==NEWLINE) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					}
					setState(643);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(646); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Macro_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode MACRO() { return getToken(CiscoGrammar.MACRO, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Macro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_macro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMacro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMacro_stanza(this);
		}
	}

	public final Macro_stanzaContext macro_stanza() throws RecognitionException {
		Macro_stanzaContext _localctx = new Macro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_macro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(648); match(MACRO);
			setState(652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(649);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(654);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(655); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_block_stanzaContext extends ParserRuleContext {
		public Description_lineContext description_line(int i) {
			return getRuleContext(Description_lineContext.class,i);
		}
		public TerminalNode OPENFLOW() { return getToken(CiscoGrammar.OPENFLOW, 0); }
		public TerminalNode LOGGING() { return getToken(CiscoGrammar.LOGGING, 0); }
		public TerminalNode KEY() { return getToken(CiscoGrammar.KEY, 0); }
		public TerminalNode KEYRING() { return getToken(CiscoGrammar.KEYRING, 0); }
		public TerminalNode VOICE() { return getToken(CiscoGrammar.VOICE, 0); }
		public TerminalNode VPDN_GROUP() { return getToken(CiscoGrammar.VPDN_GROUP, 0); }
		public TerminalNode INSPECT() { return getToken(CiscoGrammar.INSPECT, 0); }
		public TerminalNode POLICY() { return getToken(CiscoGrammar.POLICY, 0); }
		public TerminalNode AAA() { return getToken(CiscoGrammar.AAA, 0); }
		public TerminalNode DHCP() { return getToken(CiscoGrammar.DHCP, 0); }
		public TerminalNode MAP_CLASS() { return getToken(CiscoGrammar.MAP_CLASS, 0); }
		public TerminalNode DIAL_PEER() { return getToken(CiscoGrammar.DIAL_PEER, 0); }
		public TerminalNode EXPORTER() { return getToken(CiscoGrammar.EXPORTER, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public TerminalNode SLA() { return getToken(CiscoGrammar.SLA, 0); }
		public List<Null_block_substanzaContext> null_block_substanza() {
			return getRuleContexts(Null_block_substanzaContext.class);
		}
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public TerminalNode ACCESS_LIST() { return getToken(CiscoGrammar.ACCESS_LIST, 0); }
		public TerminalNode CCM() { return getToken(CiscoGrammar.CCM, 0); }
		public TerminalNode L2TP_CLASS() { return getToken(CiscoGrammar.L2TP_CLASS, 0); }
		public TerminalNode STCAPP() { return getToken(CiscoGrammar.STCAPP, 0); }
		public TerminalNode MAP() { return getToken(CiscoGrammar.MAP, 0); }
		public TerminalNode IPC() { return getToken(CiscoGrammar.IPC, 0); }
		public TerminalNode MONITOR() { return getToken(CiscoGrammar.MONITOR, 0); }
		public TerminalNode ROLE() { return getToken(CiscoGrammar.ROLE, 0); }
		public TerminalNode SPANNING_TREE() { return getToken(CiscoGrammar.SPANNING_TREE, 0); }
		public TerminalNode GROUP_POLICY() { return getToken(CiscoGrammar.GROUP_POLICY, 0); }
		public TerminalNode ARCHIVE() { return getToken(CiscoGrammar.ARCHIVE, 0); }
		public TerminalNode SUPPLEMENTARY_SERVICES() { return getToken(CiscoGrammar.SUPPLEMENTARY_SERVICES, 0); }
		public TerminalNode CONTROLLER() { return getToken(CiscoGrammar.CONTROLLER, 0); }
		public TerminalNode ACCOUNTING_LIST() { return getToken(CiscoGrammar.ACCOUNTING_LIST, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode ATM() { return getToken(CiscoGrammar.ATM, 0); }
		public TerminalNode PROFILE() { return getToken(CiscoGrammar.PROFILE, 0); }
		public TerminalNode SCCP() { return getToken(CiscoGrammar.SCCP, 0); }
		public TerminalNode GATEWAY() { return getToken(CiscoGrammar.GATEWAY, 0); }
		public TerminalNode REDUNDANCY() { return getToken(CiscoGrammar.REDUNDANCY, 0); }
		public TerminalNode MANAGEMENT() { return getToken(CiscoGrammar.MANAGEMENT, 0); }
		public TerminalNode POLICY_MAP() { return getToken(CiscoGrammar.POLICY_MAP, 0); }
		public TerminalNode LINE() { return getToken(CiscoGrammar.LINE, 0); }
		public TerminalNode GROUP() { return getToken(CiscoGrammar.GROUP, 0); }
		public TerminalNode FEATURE() { return getToken(CiscoGrammar.FEATURE, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode VLAN() { return getToken(CiscoGrammar.VLAN, 0); }
		public TerminalNode PKI() { return getToken(CiscoGrammar.PKI, 0); }
		public TerminalNode VPC() { return getToken(CiscoGrammar.VPC, 0); }
		public TerminalNode CRYPTO() { return getToken(CiscoGrammar.CRYPTO, 0); }
		public TerminalNode VOICE_PORT() { return getToken(CiscoGrammar.VOICE_PORT, 0); }
		public List<Description_lineContext> description_line() {
			return getRuleContexts(Description_lineContext.class);
		}
		public Null_block_substanzaContext null_block_substanza(int i) {
			return getRuleContext(Null_block_substanzaContext.class,i);
		}
		public TerminalNode RECORD() { return getToken(CiscoGrammar.RECORD, 0); }
		public TerminalNode PSEUDOWIRE_CLASS() { return getToken(CiscoGrammar.PSEUDOWIRE_CLASS, 0); }
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode PEER() { return getToken(CiscoGrammar.PEER, 0); }
		public TerminalNode FLOW() { return getToken(CiscoGrammar.FLOW, 0); }
		public TerminalNode EVENT_HANDLER() { return getToken(CiscoGrammar.EVENT_HANDLER, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode FLOW_TOP_TALKERS() { return getToken(CiscoGrammar.FLOW_TOP_TALKERS, 0); }
		public TerminalNode CONTROL_PLANE() { return getToken(CiscoGrammar.CONTROL_PLANE, 0); }
		public TerminalNode POLICY_LIST() { return getToken(CiscoGrammar.POLICY_LIST, 0); }
		public TerminalNode MAP_LIST() { return getToken(CiscoGrammar.MAP_LIST, 0); }
		public TerminalNode ISAKMP() { return getToken(CiscoGrammar.ISAKMP, 0); }
		public Null_block_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_block_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_block_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_block_stanza(this);
		}
	}

	public final Null_block_stanzaContext null_block_stanza() throws RecognitionException {
		Null_block_stanzaContext _localctx = new Null_block_stanzaContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_null_block_stanza);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(658);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(657); match(NO);
				}
			}

			setState(715);
			switch (_input.LA(1)) {
			case AAA:
				{
				setState(660); match(AAA);
				}
				break;
			case ARCHIVE:
				{
				setState(661); match(ARCHIVE);
				}
				break;
			case ATM:
				{
				setState(662); match(ATM);
				}
				break;
			case CONTROL_PLANE:
				{
				setState(663); match(CONTROL_PLANE);
				}
				break;
			case CONTROLLER:
				{
				setState(664); match(CONTROLLER);
				}
				break;
			case CRYPTO:
				{
				{
				setState(665); match(CRYPTO);
				setState(671);
				switch (_input.LA(1)) {
				case ISAKMP:
					{
					{
					setState(666); match(ISAKMP);
					setState(667);
					_la = _input.LA(1);
					if ( !(_la==KEY || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & ((1L << (PEER - 505)) | (1L << (POLICY - 505)) | (1L << (PROFILE - 505)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					}
					break;
				case KEYRING:
					{
					setState(668); match(KEYRING);
					}
					break;
				case MAP:
					{
					setState(669); match(MAP);
					}
					break;
				case PKI:
					{
					setState(670); match(PKI);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case DIAL_PEER:
				{
				setState(673); match(DIAL_PEER);
				}
				break;
			case EVENT_HANDLER:
				{
				setState(674); match(EVENT_HANDLER);
				}
				break;
			case FLOW:
				{
				{
				setState(675); match(FLOW);
				setState(676);
				_la = _input.LA(1);
				if ( !(_la==EXPORTER || _la==MONITOR || _la==RECORD) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				break;
			case GATEWAY:
				{
				setState(677); match(GATEWAY);
				}
				break;
			case GROUP_POLICY:
				{
				setState(678); match(GROUP_POLICY);
				}
				break;
			case IP:
				{
				{
				setState(679); match(IP);
				setState(688);
				switch (_input.LA(1)) {
				case ACCESS_LIST:
					{
					{
					setState(680); match(ACCESS_LIST);
					setState(681); match(LOGGING);
					}
					}
					break;
				case ACCOUNTING_LIST:
					{
					setState(682); match(ACCOUNTING_LIST);
					}
					break;
				case DHCP:
					{
					setState(683); match(DHCP);
					}
					break;
				case FLOW_TOP_TALKERS:
					{
					setState(684); match(FLOW_TOP_TALKERS);
					}
					break;
				case INSPECT:
					{
					setState(685); match(INSPECT);
					}
					break;
				case POLICY_LIST:
					{
					setState(686); match(POLICY_LIST);
					}
					break;
				case SLA:
					{
					setState(687); match(SLA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case IPC:
				{
				setState(690); match(IPC);
				}
				break;
			case IPV6:
				{
				{
				setState(691); match(IPV6);
				setState(692); match(ACCESS_LIST);
				}
				}
				break;
			case L2TP_CLASS:
				{
				setState(693); match(L2TP_CLASS);
				}
				break;
			case LINE:
				{
				setState(694); match(LINE);
				}
				break;
			case MANAGEMENT:
				{
				setState(695); match(MANAGEMENT);
				}
				break;
			case MAP_CLASS:
				{
				setState(696); match(MAP_CLASS);
				}
				break;
			case MAP_LIST:
				{
				setState(697); match(MAP_LIST);
				}
				break;
			case OPENFLOW:
				{
				setState(698); match(OPENFLOW);
				}
				break;
			case POLICY_MAP:
				{
				setState(699); match(POLICY_MAP);
				}
				break;
			case PSEUDOWIRE_CLASS:
				{
				setState(700); match(PSEUDOWIRE_CLASS);
				}
				break;
			case REDUNDANCY:
				{
				setState(701); match(REDUNDANCY);
				}
				break;
			case ROLE:
				{
				setState(702); match(ROLE);
				}
				break;
			case SCCP:
				{
				{
				setState(703); match(SCCP);
				setState(704); match(CCM);
				setState(705); match(GROUP);
				}
				}
				break;
			case SPANNING_TREE:
				{
				setState(706); match(SPANNING_TREE);
				}
				break;
			case STCAPP:
				{
				{
				setState(707); match(STCAPP);
				setState(708);
				_la = _input.LA(1);
				if ( !(_la==FEATURE || _la==SUPPLEMENTARY_SERVICES) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				break;
			case VLAN:
				{
				{
				setState(709); match(VLAN);
				setState(710); match(DEC);
				}
				}
				break;
			case VOICE:
				{
				setState(711); match(VOICE);
				}
				break;
			case VOICE_PORT:
				{
				setState(712); match(VOICE_PORT);
				}
				break;
			case VPC:
				{
				setState(713); match(VPC);
				}
				break;
			case VPDN_GROUP:
				{
				setState(714); match(VPDN_GROUP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(717);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(722);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(723); match(NEWLINE);
			setState(728);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(726);
					switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
					case 1:
						{
						setState(724); null_block_substanza();
						}
						break;
					case 2:
						{
						setState(725); description_line();
						}
						break;
					}
					} 
				}
				setState(730);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_block_substanzaContext extends ParserRuleContext {
		public Token NEWLINE;
		public List<Token> remaining_tokens = new ArrayList<Token>();
		public Token _tset1462;
		public TerminalNode IPSEC_UDP() { return getToken(CiscoGrammar.IPSEC_UDP, 0); }
		public TerminalNode BANDWIDTH() { return getToken(CiscoGrammar.BANDWIDTH, 0); }
		public TerminalNode ACCOUNTING_SERVER_GROUP() { return getToken(CiscoGrammar.ACCOUNTING_SERVER_GROUP, 0); }
		public TerminalNode REVERSE_ROUTE() { return getToken(CiscoGrammar.REVERSE_ROUTE, 0); }
		public TerminalNode KEYRING() { return getToken(CiscoGrammar.KEYRING, 0); }
		public TerminalNode TOP() { return getToken(CiscoGrammar.TOP, 0); }
		public TerminalNode PERMIT() { return getToken(CiscoGrammar.PERMIT, 0); }
		public TerminalNode DELAY() { return getToken(CiscoGrammar.DELAY, 0); }
		public TerminalNode AESA() { return getToken(CiscoGrammar.AESA, 0); }
		public TerminalNode PRIORITY() { return getToken(CiscoGrammar.PRIORITY, 0); }
		public TerminalNode VIOLATE_ACTION() { return getToken(CiscoGrammar.VIOLATE_ACTION, 0); }
		public TerminalNode SCHEME() { return getToken(CiscoGrammar.SCHEME, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public TerminalNode DS0_GROUP() { return getToken(CiscoGrammar.DS0_GROUP, 0); }
		public TerminalNode REMOTE_IP() { return getToken(CiscoGrammar.REMOTE_IP, 0); }
		public TerminalNode DROP() { return getToken(CiscoGrammar.DROP, 0); }
		public TerminalNode BANNER() { return getToken(CiscoGrammar.BANNER, 0); }
		public TerminalNode PATH_JITTER() { return getToken(CiscoGrammar.PATH_JITTER, 0); }
		public TerminalNode STOPBITS() { return getToken(CiscoGrammar.STOPBITS, 0); }
		public TerminalNode RING() { return getToken(CiscoGrammar.RING, 0); }
		public TerminalNode LENGTH() { return getToken(CiscoGrammar.LENGTH, 0); }
		public TerminalNode CAS_CUSTOM() { return getToken(CiscoGrammar.CAS_CUSTOM, 0); }
		public TerminalNode DIAGNOSTIC() { return getToken(CiscoGrammar.DIAGNOSTIC, 0); }
		public TerminalNode NETWORK() { return getToken(CiscoGrammar.NETWORK, 0); }
		public TerminalNode PRI_GROUP() { return getToken(CiscoGrammar.PRI_GROUP, 0); }
		public TerminalNode GROUP_POLICY() { return getToken(CiscoGrammar.GROUP_POLICY, 0); }
		public TerminalNode SERVER_PRIVATE() { return getToken(CiscoGrammar.SERVER_PRIVATE, 0); }
		public TerminalNode DBL() { return getToken(CiscoGrammar.DBL, 0); }
		public TerminalNode ENROLLMENT() { return getToken(CiscoGrammar.ENROLLMENT, 0); }
		public TerminalNode PREFIX() { return getToken(CiscoGrammar.PREFIX, 0); }
		public TerminalNode EXPORT_PROTOCOL() { return getToken(CiscoGrammar.EXPORT_PROTOCOL, 0); }
		public TerminalNode NOTIFY() { return getToken(CiscoGrammar.NOTIFY, 0); }
		public TerminalNode SERVICE_POLICY() { return getToken(CiscoGrammar.SERVICE_POLICY, 0); }
		public TerminalNode FILE_ENTRY() { return getToken(CiscoGrammar.FILE_ENTRY, 0); }
		public TerminalNode POLICY_MAP() { return getToken(CiscoGrammar.POLICY_MAP, 0); }
		public TerminalNode WITHOUT_CSD() { return getToken(CiscoGrammar.WITHOUT_CSD, 0); }
		public TerminalNode MAIN_CPU() { return getToken(CiscoGrammar.MAIN_CPU, 0); }
		public TerminalNode ROTARY() { return getToken(CiscoGrammar.ROTARY, 0); }
		public TerminalNode PRIVILEGE() { return getToken(CiscoGrammar.PRIVILEGE, 0); }
		public TerminalNode EXEC() { return getToken(CiscoGrammar.EXEC, 0); }
		public TerminalNode PORT() { return getToken(CiscoGrammar.PORT, 0); }
		public TerminalNode PEER_KEEPALIVE() { return getToken(CiscoGrammar.PEER_KEEPALIVE, 0); }
		public TerminalNode CABLELENGTH() { return getToken(CiscoGrammar.CABLELENGTH, 0); }
		public TerminalNode TERMINAL_TYPE() { return getToken(CiscoGrammar.TERMINAL_TYPE, 0); }
		public TerminalNode LLDP() { return getToken(CiscoGrammar.LLDP, 0); }
		public TerminalNode CLOCK() { return getToken(CiscoGrammar.CLOCK, 0); }
		public TerminalNode PROTOCOL() { return getToken(CiscoGrammar.PROTOCOL, 0); }
		public TerminalNode ROUTE_TARGET() { return getToken(CiscoGrammar.ROUTE_TARGET, 0); }
		public TerminalNode FILE_BROWSING() { return getToken(CiscoGrammar.FILE_BROWSING, 0); }
		public TerminalNode ACTIVATION_CHARACTER() { return getToken(CiscoGrammar.ACTIVATION_CHARACTER, 0); }
		public TerminalNode SERVICE_TYPE() { return getToken(CiscoGrammar.SERVICE_TYPE, 0); }
		public TerminalNode HIDEKEYS() { return getToken(CiscoGrammar.HIDEKEYS, 0); }
		public TerminalNode CHANNELIZED() { return getToken(CiscoGrammar.CHANNELIZED, 0); }
		public TerminalNode SORT_BY() { return getToken(CiscoGrammar.SORT_BY, 0); }
		public TerminalNode FABRIC() { return getToken(CiscoGrammar.FABRIC, 0); }
		public TerminalNode EXEC_TIMEOUT() { return getToken(CiscoGrammar.EXEC_TIMEOUT, 0); }
		public TerminalNode PEER_GATEWAY() { return getToken(CiscoGrammar.PEER_GATEWAY, 0); }
		public TerminalNode DEFAULT_ACTION() { return getToken(CiscoGrammar.DEFAULT_ACTION, 0); }
		public TerminalNode CALL() { return getToken(CiscoGrammar.CALL, 0); }
		public TerminalNode LOGGING() { return getToken(CiscoGrammar.LOGGING, 0); }
		public TerminalNode REMOVED() { return getToken(CiscoGrammar.REMOVED, 0); }
		public TerminalNode PARAMETERS() { return getToken(CiscoGrammar.PARAMETERS, 0); }
		public TerminalNode LINECODE() { return getToken(CiscoGrammar.LINECODE, 0); }
		public TerminalNode PEER_CONFIG_CHECK_BYPASS() { return getToken(CiscoGrammar.PEER_CONFIG_CHECK_BYPASS, 0); }
		public TerminalNode PICKUP() { return getToken(CiscoGrammar.PICKUP, 0); }
		public TerminalNode HISTORY() { return getToken(CiscoGrammar.HISTORY, 0); }
		public TerminalNode WEBVPN() { return getToken(CiscoGrammar.WEBVPN, 0); }
		public TerminalNode NAME() { return getToken(CiscoGrammar.NAME, 0); }
		public TerminalNode DEFAULT_ROUTER() { return getToken(CiscoGrammar.DEFAULT_ROUTER, 0); }
		public TerminalNode DOMAIN_NAME() { return getToken(CiscoGrammar.DOMAIN_NAME, 0); }
		public TerminalNode REMOTE_PORT() { return getToken(CiscoGrammar.REMOTE_PORT, 0); }
		public TerminalNode MESSAGE_LENGTH() { return getToken(CiscoGrammar.MESSAGE_LENGTH, 0); }
		public TerminalNode VPN_IDLE_TIMEOUT() { return getToken(CiscoGrammar.VPN_IDLE_TIMEOUT, 0); }
		public TerminalNode MODE() { return getToken(CiscoGrammar.MODE, 0); }
		public TerminalNode L2TP() { return getToken(CiscoGrammar.L2TP, 0); }
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public TerminalNode IPV6_ADDRESS_POOL() { return getToken(CiscoGrammar.IPV6_ADDRESS_POOL, 0); }
		public TerminalNode ROLE() { return getToken(CiscoGrammar.ROLE, 0); }
		public TerminalNode MODEM() { return getToken(CiscoGrammar.MODEM, 0); }
		public TerminalNode PASSWORD_STORAGE() { return getToken(CiscoGrammar.PASSWORD_STORAGE, 0); }
		public TerminalNode RECORD_ENTRY() { return getToken(CiscoGrammar.RECORD_ENTRY, 0); }
		public TerminalNode CACHE_TIMEOUT() { return getToken(CiscoGrammar.CACHE_TIMEOUT, 0); }
		public TerminalNode QUEUE_LIMIT() { return getToken(CiscoGrammar.QUEUE_LIMIT, 0); }
		public TerminalNode CONFORM_ACTION() { return getToken(CiscoGrammar.CONFORM_ACTION, 0); }
		public TerminalNode SWITCHBACK() { return getToken(CiscoGrammar.SWITCHBACK, 0); }
		public TerminalNode DESTINATION() { return getToken(CiscoGrammar.DESTINATION, 0); }
		public TerminalNode COLLECT() { return getToken(CiscoGrammar.COLLECT, 0); }
		public TerminalNode BIND() { return getToken(CiscoGrammar.BIND, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode SYNC() { return getToken(CiscoGrammar.SYNC, 0); }
		public TerminalNode PASSWORD() { return getToken(CiscoGrammar.PASSWORD, 0); }
		public TerminalNode RECORD() { return getToken(CiscoGrammar.RECORD, 0); }
		public TerminalNode PARENT() { return getToken(CiscoGrammar.PARENT, 0); }
		public TerminalNode DNS_SERVER() { return getToken(CiscoGrammar.DNS_SERVER, 0); }
		public TerminalNode MATCH() { return getToken(CiscoGrammar.MATCH, 0); }
		public TerminalNode ABSOLUTE_TIMEOUT() { return getToken(CiscoGrammar.ABSOLUTE_TIMEOUT, 0); }
		public TerminalNode BACKUPCRF() { return getToken(CiscoGrammar.BACKUPCRF, 0); }
		public TerminalNode LOGIN() { return getToken(CiscoGrammar.LOGIN, 0); }
		public TerminalNode ISAKMP() { return getToken(CiscoGrammar.ISAKMP, 0); }
		public TerminalNode ASSOCIATION() { return getToken(CiscoGrammar.ASSOCIATION, 0); }
		public TerminalNode QUEUE_BUFFERS() { return getToken(CiscoGrammar.QUEUE_BUFFERS, 0); }
		public TerminalNode IPX() { return getToken(CiscoGrammar.IPX, 0); }
		public TerminalNode LOG() { return getToken(CiscoGrammar.LOG, 0); }
		public TerminalNode SPLIT_TUNNEL_POLICY() { return getToken(CiscoGrammar.SPLIT_TUNNEL_POLICY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(CiscoGrammar.ASSOCIATE, 0); }
		public TerminalNode BACKGROUND_ROUTES_ENABLE() { return getToken(CiscoGrammar.BACKGROUND_ROUTES_ENABLE, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(CiscoGrammar.AUTHENTICATION, 0); }
		public TerminalNode SOURCE() { return getToken(CiscoGrammar.SOURCE, 0); }
		public TerminalNode INSPECT() { return getToken(CiscoGrammar.INSPECT, 0); }
		public TerminalNode POLICY() { return getToken(CiscoGrammar.POLICY, 0); }
		public TerminalNode ENCAPSULATION() { return getToken(CiscoGrammar.ENCAPSULATION, 0); }
		public TerminalNode POLICE() { return getToken(CiscoGrammar.POLICE, 0); }
		public TerminalNode SPEED() { return getToken(CiscoGrammar.SPEED, 0); }
		public TerminalNode ANYCONNECT() { return getToken(CiscoGrammar.ANYCONNECT, 0); }
		public TerminalNode RANDOM_DETECT() { return getToken(CiscoGrammar.RANDOM_DETECT, 0); }
		public TerminalNode HIDDEN_SHARES() { return getToken(CiscoGrammar.HIDDEN_SHARES, 0); }
		public TerminalNode ADMINISTRATIVE_WEIGHT() { return getToken(CiscoGrammar.ADMINISTRATIVE_WEIGHT, 0); }
		public TerminalNode IDLE_TIMEOUT() { return getToken(CiscoGrammar.IDLE_TIMEOUT, 0); }
		public TerminalNode VPN_FILTER() { return getToken(CiscoGrammar.VPN_FILTER, 0); }
		public TerminalNode DEFAULT_DOMAIN() { return getToken(CiscoGrammar.DEFAULT_DOMAIN, 0); }
		public TerminalNode RULE() { return getToken(CiscoGrammar.RULE, 0); }
		public TerminalNode LOCAL_PORT() { return getToken(CiscoGrammar.LOCAL_PORT, 0); }
		public TerminalNode TRANSPORT() { return getToken(CiscoGrammar.TRANSPORT, 0); }
		public TerminalNode HIGH_AVAILABILITY() { return getToken(CiscoGrammar.HIGH_AVAILABILITY, 0); }
		public TerminalNode VIRTUAL_TEMPLATE() { return getToken(CiscoGrammar.VIRTUAL_TEMPLATE, 0); }
		public TerminalNode INTERFACE() { return getToken(CiscoGrammar.INTERFACE, 0); }
		public TerminalNode SESSION_LIMIT() { return getToken(CiscoGrammar.SESSION_LIMIT, 0); }
		public TerminalNode CACHE() { return getToken(CiscoGrammar.CACHE, 0); }
		public TerminalNode DENY() { return getToken(CiscoGrammar.DENY, 0); }
		public TerminalNode KEYPAIR() { return getToken(CiscoGrammar.KEYPAIR, 0); }
		public TerminalNode ACCEPT_DIALIN() { return getToken(CiscoGrammar.ACCEPT_DIALIN, 0); }
		public TerminalNode TUNNEL_GROUP() { return getToken(CiscoGrammar.TUNNEL_GROUP, 0); }
		public TerminalNode MAXIMUM() { return getToken(CiscoGrammar.MAXIMUM, 0); }
		public TerminalNode HIDDEN() { return getToken(CiscoGrammar.HIDDEN, 0); }
		public TerminalNode TIMING() { return getToken(CiscoGrammar.TIMING, 0); }
		public TerminalNode REMOTE_SPAN() { return getToken(CiscoGrammar.REMOTE_SPAN, 0); }
		public TerminalNode CLASS() { return getToken(CiscoGrammar.CLASS, 0); }
		public TerminalNode KEEPALIVE_ENABLE() { return getToken(CiscoGrammar.KEEPALIVE_ENABLE, 0); }
		public TerminalNode FAIR_QUEUE() { return getToken(CiscoGrammar.FAIR_QUEUE, 0); }
		public TerminalNode SHUTDOWN() { return getToken(CiscoGrammar.SHUTDOWN, 0); }
		public TerminalNode FALLBACK_DN() { return getToken(CiscoGrammar.FALLBACK_DN, 0); }
		public TerminalNode AUTO_SYNC() { return getToken(CiscoGrammar.AUTO_SYNC, 0); }
		public TerminalNode CRL() { return getToken(CiscoGrammar.CRL, 0); }
		public TerminalNode EXCEED_ACTION() { return getToken(CiscoGrammar.EXCEED_ACTION, 0); }
		public TerminalNode CPTONE() { return getToken(CiscoGrammar.CPTONE, 0); }
		public TerminalNode AUTHORIZATION_SERVER_GROUP() { return getToken(CiscoGrammar.AUTHORIZATION_SERVER_GROUP, 0); }
		public TerminalNode FLOW() { return getToken(CiscoGrammar.FLOW, 0); }
		public TerminalNode CHANNEL_GROUP() { return getToken(CiscoGrammar.CHANNEL_GROUP, 0); }
		public TerminalNode ESCAPE_CHARACTER() { return getToken(CiscoGrammar.ESCAPE_CHARACTER, 0); }
		public TerminalNode SPLIT_TUNNEL_NETWORK_LIST() { return getToken(CiscoGrammar.SPLIT_TUNNEL_NETWORK_LIST, 0); }
		public TerminalNode TIMER() { return getToken(CiscoGrammar.TIMER, 0); }
		public TerminalNode TIMEOUTS() { return getToken(CiscoGrammar.TIMEOUTS, 0); }
		public TerminalNode LOCAL_IP() { return getToken(CiscoGrammar.LOCAL_IP, 0); }
		public TerminalNode CALLER_ID() { return getToken(CiscoGrammar.CALLER_ID, 0); }
		public TerminalNode SUBJECT_NAME() { return getToken(CiscoGrammar.SUBJECT_NAME, 0); }
		public TerminalNode ADDRESS_POOL() { return getToken(CiscoGrammar.ADDRESS_POOL, 0); }
		public TerminalNode FLUSH_AT_ACTIVATION() { return getToken(CiscoGrammar.FLUSH_AT_ACTIVATION, 0); }
		public TerminalNode LOCATION() { return getToken(CiscoGrammar.LOCATION, 0); }
		public TerminalNode MTU() { return getToken(CiscoGrammar.MTU, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(CiscoGrammar.AUTHORIZATION, 0); }
		public TerminalNode VPN_TUNNEL_PROTOCOL() { return getToken(CiscoGrammar.VPN_TUNNEL_PROTOCOL, 0); }
		public TerminalNode WINS_SERVER() { return getToken(CiscoGrammar.WINS_SERVER, 0); }
		public TerminalNode AUTHORIZATION_REQUIRED() { return getToken(CiscoGrammar.AUTHORIZATION_REQUIRED, 0); }
		public TerminalNode ACCESS_CLASS() { return getToken(CiscoGrammar.ACCESS_CLASS, 0); }
		public TerminalNode DEFAULT_GROUP_POLICY() { return getToken(CiscoGrammar.DEFAULT_GROUP_POLICY, 0); }
		public TerminalNode DATABITS() { return getToken(CiscoGrammar.DATABITS, 0); }
		public TerminalNode REMARK() { return getToken(CiscoGrammar.REMARK, 0); }
		public TerminalNode NODE() { return getToken(CiscoGrammar.NODE, 0); }
		public TerminalNode INSTANCE() { return getToken(CiscoGrammar.INSTANCE, 0); }
		public TerminalNode EXPORTER() { return getToken(CiscoGrammar.EXPORTER, 0); }
		public TerminalNode SERVICE() { return getToken(CiscoGrammar.SERVICE, 0); }
		public TerminalNode TB_VLAN1() { return getToken(CiscoGrammar.TB_VLAN1, 0); }
		public TerminalNode GROUP_URL() { return getToken(CiscoGrammar.GROUP_URL, 0); }
		public TerminalNode GROUP_ALIAS() { return getToken(CiscoGrammar.GROUP_ALIAS, 0); }
		public TerminalNode TB_VLAN2() { return getToken(CiscoGrammar.TB_VLAN2, 0); }
		public TerminalNode RETRANSMIT() { return getToken(CiscoGrammar.RETRANSMIT, 0); }
		public TerminalNode TRIGGER() { return getToken(CiscoGrammar.TRIGGER, 0); }
		public TerminalNode REDISTRIBUTE() { return getToken(CiscoGrammar.REDISTRIBUTE, 0); }
		public TerminalNode AUTHENTICATION_SERVER_GROUP() { return getToken(CiscoGrammar.AUTHENTICATION_SERVER_GROUP, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode SPANNING_TREE() { return getToken(CiscoGrammar.SPANNING_TREE, 0); }
		public TerminalNode USE_VRF() { return getToken(CiscoGrammar.USE_VRF, 0); }
		public TerminalNode SHAPE() { return getToken(CiscoGrammar.SHAPE, 0); }
		public TerminalNode SINGLE_ROUTER_MODE() { return getToken(CiscoGrammar.SINGLE_ROUTER_MODE, 0); }
		public TerminalNode RD() { return getToken(CiscoGrammar.RD, 0); }
		public TerminalNode DESCRIPTION() { return getToken(CiscoGrammar.DESCRIPTION, 0); }
		public TerminalNode LINE() { return getToken(CiscoGrammar.LINE, 0); }
		public TerminalNode AUTOSELECT() { return getToken(CiscoGrammar.AUTOSELECT, 0); }
		public TerminalNode CRYPTO() { return getToken(CiscoGrammar.CRYPTO, 0); }
		public TerminalNode CERTIFICATE() { return getToken(CiscoGrammar.CERTIFICATE, 0); }
		public TerminalNode FRAMING() { return getToken(CiscoGrammar.FRAMING, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(CiscoGrammar.SESSION_TIMEOUT, 0); }
		public TerminalNode FQDN() { return getToken(CiscoGrammar.FQDN, 0); }
		public TerminalNode SESSION_DISCONNECT_WARNING() { return getToken(CiscoGrammar.SESSION_DISCONNECT_WARNING, 0); }
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode SEQUENCE() { return getToken(CiscoGrammar.SEQUENCE, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode ACTION() { return getToken(CiscoGrammar.ACTION, 0); }
		public TerminalNode ACCESS_GROUP() { return getToken(CiscoGrammar.ACCESS_GROUP, 0); }
		public TerminalNode REVISION() { return getToken(CiscoGrammar.REVISION, 0); }
		public TerminalNode STP() { return getToken(CiscoGrammar.STP, 0); }
		public TerminalNode BRIDGE() { return getToken(CiscoGrammar.BRIDGE, 0); }
		public Null_block_substanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_block_substanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_block_substanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_block_substanza(this);
		}
	}

	public final Null_block_substanzaContext null_block_substanza() throws RecognitionException {
		Null_block_substanzaContext _localctx = new Null_block_substanzaContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_null_block_substanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(732);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(731); match(NO);
				}
			}

			setState(931);
			switch (_input.LA(1)) {
			case ABSOLUTE_TIMEOUT:
				{
				setState(734); match(ABSOLUTE_TIMEOUT);
				}
				break;
			case ACCEPT_DIALIN:
				{
				setState(735); match(ACCEPT_DIALIN);
				}
				break;
			case ACCESS_CLASS:
				{
				setState(736); match(ACCESS_CLASS);
				}
				break;
			case ACCOUNTING_SERVER_GROUP:
				{
				setState(737); match(ACCOUNTING_SERVER_GROUP);
				}
				break;
			case ACTION:
				{
				setState(738); match(ACTION);
				}
				break;
			case ACTIVATION_CHARACTER:
				{
				setState(739); match(ACTIVATION_CHARACTER);
				}
				break;
			case ADDRESS_POOL:
				{
				setState(740); match(ADDRESS_POOL);
				}
				break;
			case ADMINISTRATIVE_WEIGHT:
				{
				setState(741); match(ADMINISTRATIVE_WEIGHT);
				}
				break;
			case AESA:
				{
				setState(742); match(AESA);
				}
				break;
			case ANYCONNECT:
				{
				setState(743); match(ANYCONNECT);
				}
				break;
			case ASSOCIATE:
				{
				setState(744); match(ASSOCIATE);
				}
				break;
			case ASSOCIATION:
				{
				setState(745); match(ASSOCIATION);
				}
				break;
			case AUTHENTICATION:
				{
				setState(746); match(AUTHENTICATION);
				}
				break;
			case AUTHENTICATION_SERVER_GROUP:
				{
				setState(747); match(AUTHENTICATION_SERVER_GROUP);
				}
				break;
			case AUTHORIZATION:
				{
				setState(748); match(AUTHORIZATION);
				}
				break;
			case AUTHORIZATION_REQUIRED:
				{
				setState(749); match(AUTHORIZATION_REQUIRED);
				}
				break;
			case AUTHORIZATION_SERVER_GROUP:
				{
				setState(750); match(AUTHORIZATION_SERVER_GROUP);
				}
				break;
			case AUTO_SYNC:
				{
				setState(751); match(AUTO_SYNC);
				}
				break;
			case AUTOSELECT:
				{
				setState(752); match(AUTOSELECT);
				}
				break;
			case BACKGROUND_ROUTES_ENABLE:
				{
				setState(753); match(BACKGROUND_ROUTES_ENABLE);
				}
				break;
			case BACKUPCRF:
				{
				setState(754); match(BACKUPCRF);
				}
				break;
			case BANDWIDTH:
				{
				setState(755); match(BANDWIDTH);
				}
				break;
			case BANNER:
				{
				setState(756); match(BANNER);
				}
				break;
			case BIND:
				{
				setState(757); match(BIND);
				}
				break;
			case BRIDGE:
				{
				setState(758); match(BRIDGE);
				}
				break;
			case CABLELENGTH:
				{
				setState(759); match(CABLELENGTH);
				}
				break;
			case CACHE:
				{
				setState(760); match(CACHE);
				}
				break;
			case CACHE_TIMEOUT:
				{
				setState(761); match(CACHE_TIMEOUT);
				}
				break;
			case CALL:
				{
				setState(762); match(CALL);
				}
				break;
			case CALLER_ID:
				{
				setState(763); match(CALLER_ID);
				}
				break;
			case CAS_CUSTOM:
				{
				setState(764); match(CAS_CUSTOM);
				}
				break;
			case CERTIFICATE:
				{
				setState(765); match(CERTIFICATE);
				}
				break;
			case CHANNEL_GROUP:
				{
				setState(766); match(CHANNEL_GROUP);
				}
				break;
			case CHANNELIZED:
				{
				setState(767); match(CHANNELIZED);
				}
				break;
			case CLASS:
				{
				setState(768); match(CLASS);
				}
				break;
			case CLOCK:
				{
				setState(769); match(CLOCK);
				}
				break;
			case COLLECT:
				{
				setState(770); match(COLLECT);
				}
				break;
			case CONFORM_ACTION:
				{
				setState(771); match(CONFORM_ACTION);
				}
				break;
			case CPTONE:
				{
				setState(772); match(CPTONE);
				}
				break;
			case CRL:
				{
				setState(773); match(CRL);
				}
				break;
			case CRYPTO:
				{
				setState(774); match(CRYPTO);
				}
				break;
			case DATABITS:
				{
				setState(775); match(DATABITS);
				}
				break;
			case DBL:
				{
				setState(776); match(DBL);
				}
				break;
			case DEFAULT_ACTION:
				{
				setState(777); match(DEFAULT_ACTION);
				}
				break;
			case DEFAULT_DOMAIN:
				{
				setState(778); match(DEFAULT_DOMAIN);
				}
				break;
			case DEFAULT_GROUP_POLICY:
				{
				setState(779); match(DEFAULT_GROUP_POLICY);
				}
				break;
			case DEFAULT_ROUTER:
				{
				setState(780); match(DEFAULT_ROUTER);
				}
				break;
			case DELAY:
				{
				setState(781); match(DELAY);
				}
				break;
			case DENY:
				{
				setState(782); match(DENY);
				}
				break;
			case DESCRIPTION:
				{
				setState(783); match(DESCRIPTION);
				}
				break;
			case DESTINATION:
				{
				setState(784); match(DESTINATION);
				}
				break;
			case DIAGNOSTIC:
				{
				setState(785); match(DIAGNOSTIC);
				}
				break;
			case DNS_SERVER:
				{
				setState(786); match(DNS_SERVER);
				}
				break;
			case DROP:
				{
				setState(787); match(DROP);
				}
				break;
			case DS0_GROUP:
				{
				setState(788); match(DS0_GROUP);
				}
				break;
			case DOMAIN_NAME:
				{
				setState(789); match(DOMAIN_NAME);
				}
				break;
			case ENCAPSULATION:
				{
				setState(790); match(ENCAPSULATION);
				}
				break;
			case ENROLLMENT:
				{
				setState(791); match(ENROLLMENT);
				}
				break;
			case ESCAPE_CHARACTER:
				{
				setState(792); match(ESCAPE_CHARACTER);
				}
				break;
			case EXCEED_ACTION:
				{
				setState(793); match(EXCEED_ACTION);
				}
				break;
			case EXEC:
				{
				setState(794); match(EXEC);
				}
				break;
			case EXEC_TIMEOUT:
				{
				setState(795); match(EXEC_TIMEOUT);
				}
				break;
			case EXPORT_PROTOCOL:
				{
				setState(796); match(EXPORT_PROTOCOL);
				}
				break;
			case EXPORTER:
				{
				setState(797); match(EXPORTER);
				}
				break;
			case FABRIC:
				{
				setState(798); match(FABRIC);
				}
				break;
			case FAIR_QUEUE:
				{
				setState(799); match(FAIR_QUEUE);
				}
				break;
			case FALLBACK_DN:
				{
				setState(800); match(FALLBACK_DN);
				}
				break;
			case FILE_BROWSING:
				{
				setState(801); match(FILE_BROWSING);
				}
				break;
			case FILE_ENTRY:
				{
				setState(802); match(FILE_ENTRY);
				}
				break;
			case FLUSH_AT_ACTIVATION:
				{
				setState(803); match(FLUSH_AT_ACTIVATION);
				}
				break;
			case FQDN:
				{
				setState(804); match(FQDN);
				}
				break;
			case FRAMING:
				{
				setState(805); match(FRAMING);
				}
				break;
			case GROUP_ALIAS:
				{
				setState(806); match(GROUP_ALIAS);
				}
				break;
			case GROUP_POLICY:
				{
				setState(807); match(GROUP_POLICY);
				}
				break;
			case GROUP_URL:
				{
				setState(808); match(GROUP_URL);
				}
				break;
			case HIDDEN:
				{
				setState(809); match(HIDDEN);
				}
				break;
			case HIDDEN_SHARES:
				{
				setState(810); match(HIDDEN_SHARES);
				}
				break;
			case HIDEKEYS:
				{
				setState(811); match(HIDEKEYS);
				}
				break;
			case HIGH_AVAILABILITY:
				{
				setState(812); match(HIGH_AVAILABILITY);
				}
				break;
			case HISTORY:
				{
				setState(813); match(HISTORY);
				}
				break;
			case IDLE_TIMEOUT:
				{
				setState(814); match(IDLE_TIMEOUT);
				}
				break;
			case INSPECT:
				{
				setState(815); match(INSPECT);
				}
				break;
			case INSTANCE:
				{
				setState(816); match(INSTANCE);
				}
				break;
			case INTERFACE:
				{
				setState(817); match(INTERFACE);
				setState(818); match(POLICY);
				}
				break;
			case IP:
			case IPV6:
				{
				{
				setState(819);
				_la = _input.LA(1);
				if ( !(_la==IP || _la==IPV6) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(820);
				_la = _input.LA(1);
				if ( !(_la==ACCESS_CLASS || _la==ACCESS_GROUP || _la==FLOW) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				break;
			case IPSEC_UDP:
				{
				setState(821); match(IPSEC_UDP);
				}
				break;
			case IPX:
				{
				setState(822); match(IPX);
				}
				break;
			case IPV6_ADDRESS_POOL:
				{
				setState(823); match(IPV6_ADDRESS_POOL);
				}
				break;
			case ISAKMP:
				{
				setState(824); match(ISAKMP);
				}
				break;
			case KEEPALIVE_ENABLE:
				{
				setState(825); match(KEEPALIVE_ENABLE);
				}
				break;
			case KEYPAIR:
				{
				setState(826); match(KEYPAIR);
				}
				break;
			case KEYRING:
				{
				setState(827); match(KEYRING);
				}
				break;
			case L2TP:
				{
				setState(828); match(L2TP);
				}
				break;
			case LENGTH:
				{
				setState(829); match(LENGTH);
				}
				break;
			case LINE:
				{
				setState(830); match(LINE);
				}
				break;
			case LINECODE:
				{
				setState(831); match(LINECODE);
				}
				break;
			case LLDP:
				{
				setState(832); match(LLDP);
				}
				break;
			case LOCAL_IP:
				{
				setState(833); match(LOCAL_IP);
				}
				break;
			case LOCAL_PORT:
				{
				setState(834); match(LOCAL_PORT);
				}
				break;
			case LOCATION:
				{
				setState(835); match(LOCATION);
				}
				break;
			case LOG:
				{
				setState(836); match(LOG);
				}
				break;
			case LOGGING:
				{
				setState(837); match(LOGGING);
				}
				break;
			case LOGIN:
				{
				setState(838); match(LOGIN);
				}
				break;
			case MAIN_CPU:
				{
				setState(839); match(MAIN_CPU);
				}
				break;
			case MATCH:
				{
				setState(840); match(MATCH);
				}
				break;
			case MAXIMUM:
				{
				setState(841); match(MAXIMUM);
				}
				break;
			case MESSAGE_LENGTH:
				{
				setState(842); match(MESSAGE_LENGTH);
				}
				break;
			case MODE:
				{
				setState(843); match(MODE);
				}
				break;
			case MODEM:
				{
				setState(844); match(MODEM);
				}
				break;
			case MTU:
				{
				setState(845); match(MTU);
				}
				break;
			case NAME:
				{
				setState(846); match(NAME);
				}
				break;
			case NETWORK:
				{
				setState(847); match(NETWORK);
				}
				break;
			case NODE:
				{
				setState(848); match(NODE);
				}
				break;
			case NOTIFY:
				{
				setState(849); match(NOTIFY);
				}
				break;
			case PARAMETERS:
				{
				setState(850); match(PARAMETERS);
				}
				break;
			case PARENT:
				{
				setState(851); match(PARENT);
				}
				break;
			case PASSWORD:
				{
				setState(852); match(PASSWORD);
				}
				break;
			case PASSWORD_STORAGE:
				{
				setState(853); match(PASSWORD_STORAGE);
				}
				break;
			case PATH_JITTER:
				{
				setState(854); match(PATH_JITTER);
				}
				break;
			case PEER_CONFIG_CHECK_BYPASS:
				{
				setState(855); match(PEER_CONFIG_CHECK_BYPASS);
				}
				break;
			case PEER_GATEWAY:
				{
				setState(856); match(PEER_GATEWAY);
				}
				break;
			case PEER_KEEPALIVE:
				{
				setState(857); match(PEER_KEEPALIVE);
				}
				break;
			case PERMIT:
				{
				setState(858); match(PERMIT);
				}
				break;
			case PICKUP:
				{
				setState(859); match(PICKUP);
				}
				break;
			case POLICE:
				{
				setState(860); match(POLICE);
				}
				break;
			case POLICY_MAP:
				{
				setState(861); match(POLICY_MAP);
				}
				break;
			case PORT:
				{
				setState(862); match(PORT);
				}
				break;
			case PREFIX:
				{
				setState(863); match(PREFIX);
				}
				break;
			case PRI_GROUP:
				{
				setState(864); match(PRI_GROUP);
				}
				break;
			case PRIORITY:
				{
				setState(865); match(PRIORITY);
				}
				break;
			case PRIVILEGE:
				{
				setState(866); match(PRIVILEGE);
				}
				break;
			case PROTOCOL:
				{
				setState(867); match(PROTOCOL);
				}
				break;
			case QUEUE_BUFFERS:
				{
				setState(868); match(QUEUE_BUFFERS);
				}
				break;
			case QUEUE_LIMIT:
				{
				setState(869); match(QUEUE_LIMIT);
				}
				break;
			case RANDOM_DETECT:
				{
				setState(870); match(RANDOM_DETECT);
				}
				break;
			case RD:
				{
				setState(871); match(RD);
				}
				break;
			case RECORD:
				{
				setState(872); match(RECORD);
				}
				break;
			case RECORD_ENTRY:
				{
				setState(873); match(RECORD_ENTRY);
				}
				break;
			case REDISTRIBUTE:
				{
				setState(874); match(REDISTRIBUTE);
				}
				break;
			case REMARK:
				{
				setState(875); match(REMARK);
				}
				break;
			case REMOTE_IP:
				{
				setState(876); match(REMOTE_IP);
				}
				break;
			case REMOTE_PORT:
				{
				setState(877); match(REMOTE_PORT);
				}
				break;
			case REMOTE_SPAN:
				{
				setState(878); match(REMOTE_SPAN);
				}
				break;
			case REMOVED:
				{
				setState(879); match(REMOVED);
				}
				break;
			case RETRANSMIT:
				{
				setState(880); match(RETRANSMIT);
				}
				break;
			case REVERSE_ROUTE:
				{
				setState(881); match(REVERSE_ROUTE);
				}
				break;
			case REVISION:
				{
				setState(882); match(REVISION);
				}
				break;
			case RING:
				{
				setState(883); match(RING);
				}
				break;
			case ROLE:
				{
				setState(884); match(ROLE);
				}
				break;
			case ROTARY:
				{
				setState(885); match(ROTARY);
				}
				break;
			case ROUTE_TARGET:
				{
				setState(886); match(ROUTE_TARGET);
				}
				break;
			case RULE:
				{
				setState(887); match(RULE);
				}
				break;
			case SCHEME:
				{
				setState(888); match(SCHEME);
				}
				break;
			case SEQUENCE:
				{
				setState(889); match(SEQUENCE);
				}
				break;
			case SERVER_PRIVATE:
				{
				setState(890); match(SERVER_PRIVATE);
				}
				break;
			case SERVICE:
				{
				setState(891); match(SERVICE);
				}
				break;
			case SERVICE_POLICY:
				{
				setState(892); match(SERVICE_POLICY);
				}
				break;
			case SERVICE_TYPE:
				{
				setState(893); match(SERVICE_TYPE);
				}
				break;
			case SESSION_DISCONNECT_WARNING:
				{
				setState(894); match(SESSION_DISCONNECT_WARNING);
				}
				break;
			case SESSION_LIMIT:
				{
				setState(895); match(SESSION_LIMIT);
				}
				break;
			case SESSION_TIMEOUT:
				{
				setState(896); match(SESSION_TIMEOUT);
				}
				break;
			case SET:
				{
				setState(897); match(SET);
				}
				break;
			case SHAPE:
				{
				setState(898); match(SHAPE);
				}
				break;
			case SHUTDOWN:
				{
				setState(899); match(SHUTDOWN);
				}
				break;
			case SINGLE_ROUTER_MODE:
				{
				setState(900); match(SINGLE_ROUTER_MODE);
				}
				break;
			case SORT_BY:
				{
				setState(901); match(SORT_BY);
				}
				break;
			case SOURCE:
				{
				setState(902); match(SOURCE);
				}
				break;
			case SPANNING_TREE:
				{
				setState(903); match(SPANNING_TREE);
				}
				break;
			case SPEED:
				{
				setState(904); match(SPEED);
				}
				break;
			case SPLIT_TUNNEL_NETWORK_LIST:
				{
				setState(905); match(SPLIT_TUNNEL_NETWORK_LIST);
				}
				break;
			case SPLIT_TUNNEL_POLICY:
				{
				setState(906); match(SPLIT_TUNNEL_POLICY);
				}
				break;
			case STOPBITS:
				{
				setState(907); match(STOPBITS);
				}
				break;
			case STP:
				{
				setState(908); match(STP);
				}
				break;
			case SUBJECT_NAME:
				{
				setState(909); match(SUBJECT_NAME);
				}
				break;
			case SWITCHBACK:
				{
				setState(910); match(SWITCHBACK);
				}
				break;
			case SYNC:
				{
				setState(911); match(SYNC);
				}
				break;
			case TB_VLAN1:
				{
				setState(912); match(TB_VLAN1);
				}
				break;
			case TB_VLAN2:
				{
				setState(913); match(TB_VLAN2);
				}
				break;
			case TERMINAL_TYPE:
				{
				setState(914); match(TERMINAL_TYPE);
				}
				break;
			case TIMEOUTS:
				{
				setState(915); match(TIMEOUTS);
				}
				break;
			case TIMER:
				{
				setState(916); match(TIMER);
				}
				break;
			case TIMING:
				{
				setState(917); match(TIMING);
				}
				break;
			case TOP:
				{
				setState(918); match(TOP);
				}
				break;
			case TRANSPORT:
				{
				setState(919); match(TRANSPORT);
				}
				break;
			case TRIGGER:
				{
				setState(920); match(TRIGGER);
				}
				break;
			case TUNNEL_GROUP:
				{
				setState(921); match(TUNNEL_GROUP);
				}
				break;
			case USE_VRF:
				{
				setState(922); match(USE_VRF);
				}
				break;
			case VIOLATE_ACTION:
				{
				setState(923); match(VIOLATE_ACTION);
				}
				break;
			case VIRTUAL_TEMPLATE:
				{
				setState(924); match(VIRTUAL_TEMPLATE);
				}
				break;
			case VPN_FILTER:
				{
				setState(925); match(VPN_FILTER);
				}
				break;
			case VPN_IDLE_TIMEOUT:
				{
				setState(926); match(VPN_IDLE_TIMEOUT);
				}
				break;
			case VPN_TUNNEL_PROTOCOL:
				{
				setState(927); match(VPN_TUNNEL_PROTOCOL);
				}
				break;
			case WEBVPN:
				{
				setState(928); match(WEBVPN);
				}
				break;
			case WINS_SERVER:
				{
				setState(929); match(WINS_SERVER);
				}
				break;
			case WITHOUT_CSD:
				{
				setState(930); match(WITHOUT_CSD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(933);
				((Null_block_substanzaContext)_localctx)._tset1462 = _input.LT(1);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
					((Null_block_substanzaContext)_localctx)._tset1462 = (Token)_errHandler.recoverInline(this);
				}
				consume();
				((Null_block_substanzaContext)_localctx).remaining_tokens.add(((Null_block_substanzaContext)_localctx)._tset1462);
				}
				}
				setState(938);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(939); match(NEWLINE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_standalone_stanzaContext extends ParserRuleContext {
		public Token NEWLINE;
		public List<Token> remaining_tokens = new ArrayList<Token>();
		public Token _tset2994;
		public TerminalNode MVR() { return getToken(CiscoGrammar.MVR, 0); }
		public TerminalNode KEEPOUT() { return getToken(CiscoGrammar.KEEPOUT, 0); }
		public TerminalNode SCP() { return getToken(CiscoGrammar.SCP, 0); }
		public TerminalNode VERSION() { return getToken(CiscoGrammar.VERSION, 0); }
		public TerminalNode ENCRYPTION() { return getToken(CiscoGrammar.ENCRYPTION, 0); }
		public TerminalNode REVERSE_ROUTE() { return getToken(CiscoGrammar.REVERSE_ROUTE, 0); }
		public TerminalNode KEYRING() { return getToken(CiscoGrammar.KEYRING, 0); }
		public TerminalNode DSPFARM() { return getToken(CiscoGrammar.DSPFARM, 0); }
		public TerminalNode NAMES() { return getToken(CiscoGrammar.NAMES, 0); }
		public TerminalNode DIALER_LIST() { return getToken(CiscoGrammar.DIALER_LIST, 0); }
		public TerminalNode PIM() { return getToken(CiscoGrammar.PIM, 0); }
		public TerminalNode PRIORITY() { return getToken(CiscoGrammar.PRIORITY, 0); }
		public TerminalNode SOURCE_IP_ADDRESS() { return getToken(CiscoGrammar.SOURCE_IP_ADDRESS, 0); }
		public TerminalNode ASDM() { return getToken(CiscoGrammar.ASDM, 0); }
		public TerminalNode CODEC() { return getToken(CiscoGrammar.CODEC, 0); }
		public TerminalNode SSL() { return getToken(CiscoGrammar.SSL, 0); }
		public TerminalNode ICMP_ECHO() { return getToken(CiscoGrammar.ICMP_ECHO, 0); }
		public TerminalNode TRANSLATE() { return getToken(CiscoGrammar.TRANSLATE, 0); }
		public TerminalNode FREQUENCY() { return getToken(CiscoGrammar.FREQUENCY, 0); }
		public TerminalNode ENVIRONMENT() { return getToken(CiscoGrammar.ENVIRONMENT, 0); }
		public TerminalNode X25() { return getToken(CiscoGrammar.X25, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public TerminalNode TACACS_SERVER() { return getToken(CiscoGrammar.TACACS_SERVER, 0); }
		public TerminalNode HOST() { return getToken(CiscoGrammar.HOST, 0); }
		public TerminalNode TABLE_MAP() { return getToken(CiscoGrammar.TABLE_MAP, 0); }
		public TerminalNode AP() { return getToken(CiscoGrammar.AP, 0); }
		public TerminalNode STOPBITS() { return getToken(CiscoGrammar.STOPBITS, 0); }
		public TerminalNode BOOTP() { return getToken(CiscoGrammar.BOOTP, 0); }
		public TerminalNode UPGRADE() { return getToken(CiscoGrammar.UPGRADE, 0); }
		public TerminalNode SOURCE_INTERFACE() { return getToken(CiscoGrammar.SOURCE_INTERFACE, 0); }
		public TerminalNode VRF() { return getToken(CiscoGrammar.VRF, 0); }
		public TerminalNode MGCP() { return getToken(CiscoGrammar.MGCP, 0); }
		public TerminalNode MAC_ADDRESS_TABLE() { return getToken(CiscoGrammar.MAC_ADDRESS_TABLE, 0); }
		public TerminalNode MONITOR() { return getToken(CiscoGrammar.MONITOR, 0); }
		public TerminalNode DIAGNOSTIC() { return getToken(CiscoGrammar.DIAGNOSTIC, 0); }
		public TerminalNode OBJECT() { return getToken(CiscoGrammar.OBJECT, 0); }
		public TerminalNode ROUTING() { return getToken(CiscoGrammar.ROUTING, 0); }
		public TerminalNode LIMIT_RESOURCE(int i) {
			return getToken(CiscoGrammar.LIMIT_RESOURCE, i);
		}
		public TerminalNode MSDP() { return getToken(CiscoGrammar.MSDP, 0); }
		public TerminalNode BOOT_END_MARKER() { return getToken(CiscoGrammar.BOOT_END_MARKER, 0); }
		public TerminalNode SAP() { return getToken(CiscoGrammar.SAP, 0); }
		public TerminalNode ENROLLMENT() { return getToken(CiscoGrammar.ENROLLMENT, 0); }
		public TerminalNode PROMPT() { return getToken(CiscoGrammar.PROMPT, 0); }
		public TerminalNode NETWORK_OBJECT() { return getToken(CiscoGrammar.NETWORK_OBJECT, 0); }
		public TerminalNode RADIUS() { return getToken(CiscoGrammar.RADIUS, 0); }
		public TerminalNode CCM_MANAGER() { return getToken(CiscoGrammar.CCM_MANAGER, 0); }
		public TerminalNode NAT() { return getToken(CiscoGrammar.NAT, 0); }
		public TerminalNode LDAP_SCOPE() { return getToken(CiscoGrammar.LDAP_SCOPE, 0); }
		public TerminalNode QOS() { return getToken(CiscoGrammar.QOS, 0); }
		public TerminalNode CNS() { return getToken(CiscoGrammar.CNS, 0); }
		public TerminalNode PROFILE() { return getToken(CiscoGrammar.PROFILE, 0); }
		public TerminalNode ASYNC_BOOTP() { return getToken(CiscoGrammar.ASYNC_BOOTP, 0); }
		public TerminalNode SERVICE_POLICY() { return getToken(CiscoGrammar.SERVICE_POLICY, 0); }
		public TerminalNode NETCONF() { return getToken(CiscoGrammar.NETCONF, 0); }
		public TerminalNode SERIAL_NUMBER() { return getToken(CiscoGrammar.SERIAL_NUMBER, 0); }
		public TerminalNode SUBNET() { return getToken(CiscoGrammar.SUBNET, 0); }
		public TerminalNode VERIFY() { return getToken(CiscoGrammar.VERIFY, 0); }
		public TerminalNode PRIVILEGE() { return getToken(CiscoGrammar.PRIVILEGE, 0); }
		public TerminalNode EXTCOMMUNITY_LIST() { return getToken(CiscoGrammar.EXTCOMMUNITY_LIST, 0); }
		public TerminalNode EXEC() { return getToken(CiscoGrammar.EXEC, 0); }
		public TerminalNode FILE() { return getToken(CiscoGrammar.FILE, 0); }
		public TerminalNode MAIL_SERVER() { return getToken(CiscoGrammar.MAIL_SERVER, 0); }
		public TerminalNode DSP() { return getToken(CiscoGrammar.DSP, 0); }
		public TerminalNode CTL_FILE() { return getToken(CiscoGrammar.CTL_FILE, 0); }
		public TerminalNode LLDP() { return getToken(CiscoGrammar.LLDP, 0); }
		public TerminalNode CLOCK() { return getToken(CiscoGrammar.CLOCK, 0); }
		public TerminalNode ROUTE_TARGET() { return getToken(CiscoGrammar.ROUTE_TARGET, 0); }
		public TerminalNode VTP() { return getToken(CiscoGrammar.VTP, 0); }
		public TerminalNode PARSER() { return getToken(CiscoGrammar.PARSER, 0); }
		public TerminalNode EXCEPTION() { return getToken(CiscoGrammar.EXCEPTION, 0); }
		public TerminalNode PRIORITY_QUEUE() { return getToken(CiscoGrammar.PRIORITY_QUEUE, 0); }
		public TerminalNode PRE_SHARED_KEY() { return getToken(CiscoGrammar.PRE_SHARED_KEY, 0); }
		public TerminalNode ACCESS_LOG() { return getToken(CiscoGrammar.ACCESS_LOG, 0); }
		public TerminalNode FABRIC() { return getToken(CiscoGrammar.FABRIC, 0); }
		public TerminalNode LOCAL() { return getToken(CiscoGrammar.LOCAL, 0); }
		public TerminalNode SWITCH() { return getToken(CiscoGrammar.SWITCH, 0); }
		public TerminalNode SSH() { return getToken(CiscoGrammar.SSH, 0); }
		public TerminalNode TAG() { return getToken(CiscoGrammar.TAG, 0); }
		public TerminalNode CARD() { return getToken(CiscoGrammar.CARD, 0); }
		public TerminalNode CDP() { return getToken(CiscoGrammar.CDP, 0); }
		public TerminalNode SETUP() { return getToken(CiscoGrammar.SETUP, 0); }
		public TerminalNode HARDWARE() { return getToken(CiscoGrammar.HARDWARE, 0); }
		public TerminalNode CALL() { return getToken(CiscoGrammar.CALL, 0); }
		public TerminalNode RSAKEYPAIR() { return getToken(CiscoGrammar.RSAKEYPAIR, 0); }
		public TerminalNode DNS_GUARD() { return getToken(CiscoGrammar.DNS_GUARD, 0); }
		public TerminalNode RESOURCE() { return getToken(CiscoGrammar.RESOURCE, 0); }
		public TerminalNode FRAME_RELAY() { return getToken(CiscoGrammar.FRAME_RELAY, 0); }
		public TerminalNode LOGGING() { return getToken(CiscoGrammar.LOGGING, 0); }
		public TerminalNode NAME_SERVER() { return getToken(CiscoGrammar.NAME_SERVER, 0); }
		public TerminalNode HTTP() { return getToken(CiscoGrammar.HTTP, 0); }
		public TerminalNode CIPC() { return getToken(CiscoGrammar.CIPC, 0); }
		public TerminalNode NETWORK_CLOCK_PARTICIPATE() { return getToken(CiscoGrammar.NETWORK_CLOCK_PARTICIPATE, 0); }
		public TerminalNode ASA() { return getToken(CiscoGrammar.ASA, 0); }
		public TerminalNode PARTICIPATE() { return getToken(CiscoGrammar.PARTICIPATE, 0); }
		public TerminalNode HISTORY() { return getToken(CiscoGrammar.HISTORY, 0); }
		public TerminalNode LDAP_NAMING_ATTRIBUTE() { return getToken(CiscoGrammar.LDAP_NAMING_ATTRIBUTE, 0); }
		public TerminalNode WEBVPN() { return getToken(CiscoGrammar.WEBVPN, 0); }
		public TerminalNode NAME() { return getToken(CiscoGrammar.NAME, 0); }
		public TerminalNode DOMAIN_NAME() { return getToken(CiscoGrammar.DOMAIN_NAME, 0); }
		public TerminalNode ERRDISABLE() { return getToken(CiscoGrammar.ERRDISABLE, 0); }
		public TerminalNode QUIT() { return getToken(CiscoGrammar.QUIT, 0); }
		public TerminalNode BOOT() { return getToken(CiscoGrammar.BOOT, 0); }
		public TerminalNode SPE() { return getToken(CiscoGrammar.SPE, 0); }
		public TerminalNode FLOWCONTROL() { return getToken(CiscoGrammar.FLOWCONTROL, 0); }
		public TerminalNode CCM_GROUP() { return getToken(CiscoGrammar.CCM_GROUP, 0); }
		public TerminalNode MODE() { return getToken(CiscoGrammar.MODE, 0); }
		public TerminalNode FORWARD_PROTOCOL() { return getToken(CiscoGrammar.FORWARD_PROTOCOL, 0); }
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public TerminalNode ACCESS_LIST() { return getToken(CiscoGrammar.ACCESS_LIST, 0); }
		public TerminalNode SUBSCRIBE_TO_ALERT_GROUP() { return getToken(CiscoGrammar.SUBSCRIBE_TO_ALERT_GROUP, 0); }
		public TerminalNode MODULE() { return getToken(CiscoGrammar.MODULE, 0); }
		public TerminalNode BOOT_START_MARKER() { return getToken(CiscoGrammar.BOOT_START_MARKER, 0); }
		public TerminalNode MFIB() { return getToken(CiscoGrammar.MFIB, 0); }
		public TerminalNode CTS() { return getToken(CiscoGrammar.CTS, 0); }
		public TerminalNode SCHEDULER() { return getToken(CiscoGrammar.SCHEDULER, 0); }
		public TerminalNode HASH() { return getToken(CiscoGrammar.HASH, 0); }
		public TerminalNode DISABLE() { return getToken(CiscoGrammar.DISABLE, 0); }
		public TerminalNode CLUSTER() { return getToken(CiscoGrammar.CLUSTER, 0); }
		public TerminalNode CONSOLE() { return getToken(CiscoGrammar.CONSOLE, 0); }
		public TerminalNode SPD() { return getToken(CiscoGrammar.SPD, 0); }
		public TerminalNode MODEM() { return getToken(CiscoGrammar.MODEM, 0); }
		public TerminalNode RECORD_ENTRY() { return getToken(CiscoGrammar.RECORD_ENTRY, 0); }
		public TerminalNode UNICAST_ROUTING() { return getToken(CiscoGrammar.UNICAST_ROUTING, 0); }
		public TerminalNode ENABLE() { return getToken(CiscoGrammar.ENABLE, 0); }
		public TerminalNode FIRMWARE() { return getToken(CiscoGrammar.FIRMWARE, 0); }
		public TerminalNode IGMP() { return getToken(CiscoGrammar.IGMP, 0); }
		public TerminalNode MTA() { return getToken(CiscoGrammar.MTA, 0); }
		public TerminalNode INVALID_SPI_RECOVERY() { return getToken(CiscoGrammar.INVALID_SPI_RECOVERY, 0); }
		public TerminalNode DOMAIN_LOOKUP() { return getToken(CiscoGrammar.DOMAIN_LOOKUP, 0); }
		public TerminalNode CEF() { return getToken(CiscoGrammar.CEF, 0); }
		public TerminalNode ALIAS() { return getToken(CiscoGrammar.ALIAS, 0); }
		public TerminalNode UDLD() { return getToken(CiscoGrammar.UDLD, 0); }
		public TerminalNode CLASSLESS() { return getToken(CiscoGrammar.CLASSLESS, 0); }
		public TerminalNode REVOCATION_CHECK() { return getToken(CiscoGrammar.REVOCATION_CHECK, 0); }
		public TerminalNode SOURCE_ROUTE() { return getToken(CiscoGrammar.SOURCE_ROUTE, 0); }
		public TerminalNode FACILITY_ALARM() { return getToken(CiscoGrammar.FACILITY_ALARM, 0); }
		public TerminalNode XLATE() { return getToken(CiscoGrammar.XLATE, 0); }
		public TerminalNode RESOURCE_POOL() { return getToken(CiscoGrammar.RESOURCE_POOL, 0); }
		public TerminalNode DESTINATION() { return getToken(CiscoGrammar.DESTINATION, 0); }
		public TerminalNode IPSEC() { return getToken(CiscoGrammar.IPSEC, 0); }
		public TerminalNode GROUP() { return getToken(CiscoGrammar.GROUP, 0); }
		public TerminalNode VMPS() { return getToken(CiscoGrammar.VMPS, 0); }
		public TerminalNode PROCESS() { return getToken(CiscoGrammar.PROCESS, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode PERCENT() { return getToken(CiscoGrammar.PERCENT, 0); }
		public TerminalNode GRATUITOUS_ARPS() { return getToken(CiscoGrammar.GRATUITOUS_ARPS, 0); }
		public TerminalNode WSMA() { return getToken(CiscoGrammar.WSMA, 0); }
		public TerminalNode ALERT_GROUP() { return getToken(CiscoGrammar.ALERT_GROUP, 0); }
		public TerminalNode PASSWORD() { return getToken(CiscoGrammar.PASSWORD, 0); }
		public TerminalNode SNMP_SERVER() { return getToken(CiscoGrammar.SNMP_SERVER, 0); }
		public TerminalNode MULTICAST_ROUTING() { return getToken(CiscoGrammar.MULTICAST_ROUTING, 0); }
		public TerminalNode SFLOW() { return getToken(CiscoGrammar.SFLOW, 0); }
		public TerminalNode MATCH() { return getToken(CiscoGrammar.MATCH, 0); }
		public TerminalNode ABSOLUTE_TIMEOUT() { return getToken(CiscoGrammar.ABSOLUTE_TIMEOUT, 0); }
		public TerminalNode TIMEOUT() { return getToken(CiscoGrammar.TIMEOUT, 0); }
		public TerminalNode VOICE_CARD() { return getToken(CiscoGrammar.VOICE_CARD, 0); }
		public TerminalNode TRACK() { return getToken(CiscoGrammar.TRACK, 0); }
		public TerminalNode PLATFORM() { return getToken(CiscoGrammar.PLATFORM, 0); }
		public TerminalNode ISAKMP() { return getToken(CiscoGrammar.ISAKMP, 0); }
		public TerminalNode DEFAULT_NETWORK() { return getToken(CiscoGrammar.DEFAULT_NETWORK, 0); }
		public TerminalNode RTR() { return getToken(CiscoGrammar.RTR, 0); }
		public TerminalNode SAME_SECURITY_TRAFFIC() { return getToken(CiscoGrammar.SAME_SECURITY_TRAFFIC, 0); }
		public TerminalNode ASSOCIATE() { return getToken(CiscoGrammar.ASSOCIATE, 0); }
		public TerminalNode CONFIG_REGISTER() { return getToken(CiscoGrammar.CONFIG_REGISTER, 0); }
		public List<TerminalNode> LIMIT_RESOURCE() { return getTokens(CiscoGrammar.LIMIT_RESOURCE); }
		public TerminalNode AUTHENTICATION() { return getToken(CiscoGrammar.AUTHENTICATION, 0); }
		public TerminalNode TUNNEL_GROUP_LIST() { return getToken(CiscoGrammar.TUNNEL_GROUP_LIST, 0); }
		public TerminalNode SOURCE() { return getToken(CiscoGrammar.SOURCE, 0); }
		public TerminalNode MULTICAST() { return getToken(CiscoGrammar.MULTICAST, 0); }
		public TerminalNode TFTP_SERVER() { return getToken(CiscoGrammar.TFTP_SERVER, 0); }
		public TerminalNode MULTILINK() { return getToken(CiscoGrammar.MULTILINK, 0); }
		public TerminalNode SENDER() { return getToken(CiscoGrammar.SENDER, 0); }
		public TerminalNode X29() { return getToken(CiscoGrammar.X29, 0); }
		public TerminalNode CHAT_SCRIPT() { return getToken(CiscoGrammar.CHAT_SCRIPT, 0); }
		public TerminalNode STATIC() { return getToken(CiscoGrammar.STATIC, 0); }
		public TerminalNode SPEED() { return getToken(CiscoGrammar.SPEED, 0); }
		public TerminalNode PORT_OBJECT() { return getToken(CiscoGrammar.PORT_OBJECT, 0); }
		public TerminalNode RADIUS_COMMON_PW() { return getToken(CiscoGrammar.RADIUS_COMMON_PW, 0); }
		public TerminalNode AUTO() { return getToken(CiscoGrammar.AUTO, 0); }
		public TerminalNode ANYCONNECT() { return getToken(CiscoGrammar.ANYCONNECT, 0); }
		public TerminalNode USER_IDENTITY() { return getToken(CiscoGrammar.USER_IDENTITY, 0); }
		public TerminalNode AAA() { return getToken(CiscoGrammar.AAA, 0); }
		public TerminalNode NAME_LOOKUP() { return getToken(CiscoGrammar.NAME_LOOKUP, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode UNABLE() { return getToken(CiscoGrammar.UNABLE, 0); }
		public TerminalNode BGP_COMMUNITY() { return getToken(CiscoGrammar.BGP_COMMUNITY, 0); }
		public TerminalNode SLA() { return getToken(CiscoGrammar.SLA, 0); }
		public TerminalNode MFIB_MODE() { return getToken(CiscoGrammar.MFIB_MODE, 0); }
		public TerminalNode ACTIVE() { return getToken(CiscoGrammar.ACTIVE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(CiscoGrammar.CONFIGURATION, 0); }
		public TerminalNode THREAT_DETECTION() { return getToken(CiscoGrammar.THREAT_DETECTION, 0); }
		public TerminalNode NETWORK_CLOCK_SELECT() { return getToken(CiscoGrammar.NETWORK_CLOCK_SELECT, 0); }
		public TerminalNode SUBNET_ZERO() { return getToken(CiscoGrammar.SUBNET_ZERO, 0); }
		public TerminalNode TRANSPORT() { return getToken(CiscoGrammar.TRANSPORT, 0); }
		public TerminalNode FINGER() { return getToken(CiscoGrammar.FINGER, 0); }
		public TerminalNode DHCPD() { return getToken(CiscoGrammar.DHCPD, 0); }
		public TerminalNode DSS() { return getToken(CiscoGrammar.DSS, 0); }
		public TerminalNode FLOW_CACHE() { return getToken(CiscoGrammar.FLOW_CACHE, 0); }
		public TerminalNode ICMP() { return getToken(CiscoGrammar.ICMP, 0); }
		public TerminalNode ISDN() { return getToken(CiscoGrammar.ISDN, 0); }
		public TerminalNode GROUP_OBJECT() { return getToken(CiscoGrammar.GROUP_OBJECT, 0); }
		public TerminalNode KEYPAIR() { return getToken(CiscoGrammar.KEYPAIR, 0); }
		public TerminalNode ADMISSION() { return getToken(CiscoGrammar.ADMISSION, 0); }
		public TerminalNode MROUTE() { return getToken(CiscoGrammar.MROUTE, 0); }
		public TerminalNode MAXIMUM() { return getToken(CiscoGrammar.MAXIMUM, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode CLI() { return getToken(CiscoGrammar.CLI, 0); }
		public TerminalNode TEMPLATE() { return getToken(CiscoGrammar.TEMPLATE, 0); }
		public TerminalNode AUTH_PROXY() { return getToken(CiscoGrammar.AUTH_PROXY, 0); }
		public TerminalNode SMTP_SERVER() { return getToken(CiscoGrammar.SMTP_SERVER, 0); }
		public TerminalNode NTP() { return getToken(CiscoGrammar.NTP, 0); }
		public TerminalNode LIFETIME() { return getToken(CiscoGrammar.LIFETIME, 0); }
		public TerminalNode MPLS() { return getToken(CiscoGrammar.MPLS, 0); }
		public TerminalNode TACACS() { return getToken(CiscoGrammar.TACACS, 0); }
		public TerminalNode SCCP() { return getToken(CiscoGrammar.SCCP, 0); }
		public TerminalNode TAG_SWITCHING() { return getToken(CiscoGrammar.TAG_SWITCHING, 0); }
		public TerminalNode DEVICE_SENSOR() { return getToken(CiscoGrammar.DEVICE_SENSOR, 0); }
		public TerminalNode VALIDATION_USAGE() { return getToken(CiscoGrammar.VALIDATION_USAGE, 0); }
		public TerminalNode ADDRESS() { return getToken(CiscoGrammar.ADDRESS, 0); }
		public TerminalNode USERNAME() { return getToken(CiscoGrammar.USERNAME, 0); }
		public TerminalNode FEATURE() { return getToken(CiscoGrammar.FEATURE, 0); }
		public TerminalNode RADIUS_SERVER() { return getToken(CiscoGrammar.RADIUS_SERVER, 0); }
		public TerminalNode SHUTDOWN() { return getToken(CiscoGrammar.SHUTDOWN, 0); }
		public TerminalNode VLAN() { return getToken(CiscoGrammar.VLAN, 0); }
		public TerminalNode CRL() { return getToken(CiscoGrammar.CRL, 0); }
		public TerminalNode ICMP_OBJECT() { return getToken(CiscoGrammar.ICMP_OBJECT, 0); }
		public TerminalNode CFS() { return getToken(CiscoGrammar.CFS, 0); }
		public TerminalNode AAA_SERVER() { return getToken(CiscoGrammar.AAA_SERVER, 0); }
		public TerminalNode REDIRECT_FQDN() { return getToken(CiscoGrammar.REDIRECT_FQDN, 0); }
		public TerminalNode LICENSE() { return getToken(CiscoGrammar.LICENSE, 0); }
		public TerminalNode FTP_SERVER() { return getToken(CiscoGrammar.FTP_SERVER, 0); }
		public TerminalNode INACTIVITY_TIMER() { return getToken(CiscoGrammar.INACTIVITY_TIMER, 0); }
		public TerminalNode LDAP_BASE_DN() { return getToken(CiscoGrammar.LDAP_BASE_DN, 0); }
		public TerminalNode SECURITY() { return getToken(CiscoGrammar.SECURITY, 0); }
		public TerminalNode ESCAPE_CHARACTER() { return getToken(CiscoGrammar.ESCAPE_CHARACTER, 0); }
		public TerminalNode DNS() { return getToken(CiscoGrammar.DNS, 0); }
		public TerminalNode TELNET() { return getToken(CiscoGrammar.TELNET, 0); }
		public TerminalNode AUTHENTICATION_PORT() { return getToken(CiscoGrammar.AUTHENTICATION_PORT, 0); }
		public TerminalNode SYSTEM() { return getToken(CiscoGrammar.SYSTEM, 0); }
		public TerminalNode POWER() { return getToken(CiscoGrammar.POWER, 0); }
		public TerminalNode SUBJECT_NAME() { return getToken(CiscoGrammar.SUBJECT_NAME, 0); }
		public TerminalNode IDENTITY() { return getToken(CiscoGrammar.IDENTITY, 0); }
		public TerminalNode GATEKEEPER() { return getToken(CiscoGrammar.GATEKEEPER, 0); }
		public TerminalNode DOMAIN_LIST() { return getToken(CiscoGrammar.DOMAIN_LIST, 0); }
		public TerminalNode CLASS_MAP() { return getToken(CiscoGrammar.CLASS_MAP, 0); }
		public TerminalNode AUDIT() { return getToken(CiscoGrammar.AUDIT, 0); }
		public TerminalNode CA() { return getToken(CiscoGrammar.CA, 0); }
		public TerminalNode SCHEDULE() { return getToken(CiscoGrammar.SCHEDULE, 0); }
		public TerminalNode ADDRESS_POOL() { return getToken(CiscoGrammar.ADDRESS_POOL, 0); }
		public TerminalNode MEMORY_SIZE() { return getToken(CiscoGrammar.MEMORY_SIZE, 0); }
		public TerminalNode KEY() { return getToken(CiscoGrammar.KEY, 0); }
		public TerminalNode LDAP_LOGIN() { return getToken(CiscoGrammar.LDAP_LOGIN, 0); }
		public TerminalNode MEDIA_TERMINATION() { return getToken(CiscoGrammar.MEDIA_TERMINATION, 0); }
		public TerminalNode LOCATION() { return getToken(CiscoGrammar.LOCATION, 0); }
		public TerminalNode SDM() { return getToken(CiscoGrammar.SDM, 0); }
		public TerminalNode MTU() { return getToken(CiscoGrammar.MTU, 0); }
		public TerminalNode LOAD_SHARING() { return getToken(CiscoGrammar.LOAD_SHARING, 0); }
		public TerminalNode VPDN() { return getToken(CiscoGrammar.VPDN, 0); }
		public TerminalNode RMON() { return getToken(CiscoGrammar.RMON, 0); }
		public TerminalNode DEFAULT() { return getToken(CiscoGrammar.DEFAULT, 0); }
		public TerminalNode FTP() { return getToken(CiscoGrammar.FTP, 0); }
		public TerminalNode FIREWALL() { return getToken(CiscoGrammar.FIREWALL, 0); }
		public TerminalNode MLS() { return getToken(CiscoGrammar.MLS, 0); }
		public TerminalNode REMARK() { return getToken(CiscoGrammar.REMARK, 0); }
		public TerminalNode DYNAMIC_ACCESS_POLICY_RECORD() { return getToken(CiscoGrammar.DYNAMIC_ACCESS_POLICY_RECORD, 0); }
		public TerminalNode ANYCONNECT_ESSENTIALS() { return getToken(CiscoGrammar.ANYCONNECT_ESSENTIALS, 0); }
		public TerminalNode TYPE() { return getToken(CiscoGrammar.TYPE, 0); }
		public TerminalNode SERVER_TYPE() { return getToken(CiscoGrammar.SERVER_TYPE, 0); }
		public TerminalNode MAC() { return getToken(CiscoGrammar.MAC, 0); }
		public TerminalNode AQM_REGISTER_FNF() { return getToken(CiscoGrammar.AQM_REGISTER_FNF, 0); }
		public TerminalNode NAT_CONTROL() { return getToken(CiscoGrammar.NAT_CONTROL, 0); }
		public TerminalNode SERVICE() { return getToken(CiscoGrammar.SERVICE, 0); }
		public TerminalNode PHONE_PROXY() { return getToken(CiscoGrammar.PHONE_PROXY, 0); }
		public TerminalNode HOST_ROUTING() { return getToken(CiscoGrammar.HOST_ROUTING, 0); }
		public TerminalNode IP_ADDRESS_LITERAL() { return getToken(CiscoGrammar.IP_ADDRESS_LITERAL, 0); }
		public TerminalNode ACCOUNTING_PORT() { return getToken(CiscoGrammar.ACCOUNTING_PORT, 0); }
		public TerminalNode HW_MODULE() { return getToken(CiscoGrammar.HW_MODULE, 0); }
		public TerminalNode OWNER() { return getToken(CiscoGrammar.OWNER, 0); }
		public TerminalNode DOMAIN() { return getToken(CiscoGrammar.DOMAIN, 0); }
		public TerminalNode DVMRP() { return getToken(CiscoGrammar.DVMRP, 0); }
		public TerminalNode CCM() { return getToken(CiscoGrammar.CCM, 0); }
		public TerminalNode EVENT() { return getToken(CiscoGrammar.EVENT, 0); }
		public TerminalNode FAILOVER() { return getToken(CiscoGrammar.FAILOVER, 0); }
		public TerminalNode STCAPP() { return getToken(CiscoGrammar.STCAPP, 0); }
		public TerminalNode SHELL() { return getToken(CiscoGrammar.SHELL, 0); }
		public TerminalNode WLAN() { return getToken(CiscoGrammar.WLAN, 0); }
		public TerminalNode RCMD() { return getToken(CiscoGrammar.RCMD, 0); }
		public TerminalNode SNMP() { return getToken(CiscoGrammar.SNMP, 0); }
		public TerminalNode ARP() { return getToken(CiscoGrammar.ARP, 0); }
		public TerminalNode CONTACT_EMAIL_ADDR() { return getToken(CiscoGrammar.CONTACT_EMAIL_ADDR, 0); }
		public TerminalNode XML() { return getToken(CiscoGrammar.XML, 0); }
		public TerminalNode OSPF() { return getToken(CiscoGrammar.OSPF, 0); }
		public TerminalNode SPANNING_TREE() { return getToken(CiscoGrammar.SPANNING_TREE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode SYSOPT() { return getToken(CiscoGrammar.SYSOPT, 0); }
		public TerminalNode USE_VRF() { return getToken(CiscoGrammar.USE_VRF, 0); }
		public TerminalNode PORT_CHANNEL() { return getToken(CiscoGrammar.PORT_CHANNEL, 0); }
		public TerminalNode XX_HIDE() { return getToken(CiscoGrammar.XX_HIDE, 0); }
		public TerminalNode ND() { return getToken(CiscoGrammar.ND, 0); }
		public TerminalNode MLD() { return getToken(CiscoGrammar.MLD, 0); }
		public TerminalNode CALL_HOME() { return getToken(CiscoGrammar.CALL_HOME, 0); }
		public TerminalNode SUBSCRIBER() { return getToken(CiscoGrammar.SUBSCRIBER, 0); }
		public TerminalNode SCRIPTING() { return getToken(CiscoGrammar.SCRIPTING, 0); }
		public TerminalNode VDC() { return getToken(CiscoGrammar.VDC, 0); }
		public TerminalNode ROUTE() { return getToken(CiscoGrammar.ROUTE, 0); }
		public TerminalNode RD() { return getToken(CiscoGrammar.RD, 0); }
		public TerminalNode FLOW_EXPORT() { return getToken(CiscoGrammar.FLOW_EXPORT, 0); }
		public TerminalNode SERVER() { return getToken(CiscoGrammar.SERVER, 0); }
		public TerminalNode LDAP_LOGIN_DN() { return getToken(CiscoGrammar.LDAP_LOGIN_DN, 0); }
		public TerminalNode DESCRIPTION() { return getToken(CiscoGrammar.DESCRIPTION, 0); }
		public TerminalNode DOT11() { return getToken(CiscoGrammar.DOT11, 0); }
		public TerminalNode TFTP() { return getToken(CiscoGrammar.TFTP, 0); }
		public TerminalNode TCP() { return getToken(CiscoGrammar.TCP, 0); }
		public TerminalNode CRYPTO() { return getToken(CiscoGrammar.CRYPTO, 0); }
		public TerminalNode PAGER() { return getToken(CiscoGrammar.PAGER, 0); }
		public TerminalNode DEVICE() { return getToken(CiscoGrammar.DEVICE, 0); }
		public TerminalNode INTERNAL() { return getToken(CiscoGrammar.INTERNAL, 0); }
		public TerminalNode ENCR() { return getToken(CiscoGrammar.ENCR, 0); }
		public TerminalNode FQDN() { return getToken(CiscoGrammar.FQDN, 0); }
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode MICROCODE() { return getToken(CiscoGrammar.MICROCODE, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode ACTION() { return getToken(CiscoGrammar.ACTION, 0); }
		public TerminalNode SUBSCRIBE_TO() { return getToken(CiscoGrammar.SUBSCRIBE_TO, 0); }
		public TerminalNode POWEROFF() { return getToken(CiscoGrammar.POWEROFF, 0); }
		public TerminalNode ACCESS_GROUP() { return getToken(CiscoGrammar.ACCESS_GROUP, 0); }
		public TerminalNode DOT1Q() { return getToken(CiscoGrammar.DOT1Q, 0); }
		public TerminalNode TLS_PROXY() { return getToken(CiscoGrammar.TLS_PROXY, 0); }
		public TerminalNode OBJECT_GROUP() { return getToken(CiscoGrammar.OBJECT_GROUP, 0); }
		public TerminalNode VPN() { return getToken(CiscoGrammar.VPN, 0); }
		public TerminalNode BRIDGE() { return getToken(CiscoGrammar.BRIDGE, 0); }
		public TerminalNode PROTOCOL_OBJECT() { return getToken(CiscoGrammar.PROTOCOL_OBJECT, 0); }
		public Null_standalone_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_standalone_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_standalone_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_standalone_stanza(this);
		}
	}

	public final Null_standalone_stanzaContext null_standalone_stanza() throws RecognitionException {
		Null_standalone_stanzaContext _localctx = new Null_standalone_stanzaContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_null_standalone_stanza);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(942);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(941); match(NO);
				}
			}

			setState(1324);
			switch (_input.LA(1)) {
			case AAA:
				{
				setState(944); match(AAA);
				}
				break;
			case AAA_SERVER:
				{
				setState(945); match(AAA_SERVER);
				}
				break;
			case ABSOLUTE_TIMEOUT:
				{
				setState(946); match(ABSOLUTE_TIMEOUT);
				}
				break;
			case ACCESS_GROUP:
				{
				setState(947); match(ACCESS_GROUP);
				}
				break;
			case ACCESS_LIST:
				{
				{
				setState(948); match(ACCESS_LIST);
				setState(952);
				switch (_input.LA(1)) {
				case DEC:
					{
					{
					setState(949); match(DEC);
					setState(950); match(REMARK);
					}
					}
					break;
				case VARIABLE:
					{
					setState(951); match(VARIABLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case ACCOUNTING_PORT:
				{
				setState(954); match(ACCOUNTING_PORT);
				}
				break;
			case ACTION:
				{
				setState(955); match(ACTION);
				}
				break;
			case ACTIVE:
				{
				setState(956); match(ACTIVE);
				}
				break;
			case ADDRESS:
				{
				setState(957); match(ADDRESS);
				}
				break;
			case ALERT_GROUP:
				{
				setState(958); match(ALERT_GROUP);
				}
				break;
			case ALIAS:
				{
				setState(959); match(ALIAS);
				}
				break;
			case ANYCONNECT:
				{
				setState(960); match(ANYCONNECT);
				}
				break;
			case ANYCONNECT_ESSENTIALS:
				{
				setState(961); match(ANYCONNECT_ESSENTIALS);
				}
				break;
			case AP:
				{
				setState(962); match(AP);
				}
				break;
			case AQM_REGISTER_FNF:
				{
				setState(963); match(AQM_REGISTER_FNF);
				}
				break;
			case ARP:
				{
				setState(964); match(ARP);
				}
				break;
			case ASA:
				{
				setState(965); match(ASA);
				}
				break;
			case ASDM:
				{
				setState(966); match(ASDM);
				}
				break;
			case ASSOCIATE:
				{
				setState(967); match(ASSOCIATE);
				}
				break;
			case ASYNC_BOOTP:
				{
				setState(968); match(ASYNC_BOOTP);
				}
				break;
			case AUTHENTICATION:
				{
				setState(969); match(AUTHENTICATION);
				}
				break;
			case AUTHENTICATION_PORT:
				{
				setState(970); match(AUTHENTICATION_PORT);
				}
				break;
			case AUTO:
				{
				setState(971); match(AUTO);
				}
				break;
			case BOOT:
				{
				setState(972); match(BOOT);
				}
				break;
			case BOOT_END_MARKER:
				{
				setState(973); match(BOOT_END_MARKER);
				}
				break;
			case BOOT_START_MARKER:
				{
				setState(974); match(BOOT_START_MARKER);
				}
				break;
			case BRIDGE:
				{
				setState(975); match(BRIDGE);
				}
				break;
			case CALL:
				{
				setState(976); match(CALL);
				}
				break;
			case CALL_HOME:
				{
				setState(977); match(CALL_HOME);
				}
				break;
			case CARD:
				{
				setState(978); match(CARD);
				}
				break;
			case CCM_MANAGER:
				{
				setState(979); match(CCM_MANAGER);
				}
				break;
			case CDP:
				{
				setState(980); match(CDP);
				}
				break;
			case CFS:
				{
				setState(981); match(CFS);
				}
				break;
			case CHAT_SCRIPT:
				{
				setState(982); match(CHAT_SCRIPT);
				}
				break;
			case CIPC:
				{
				setState(983); match(CIPC);
				}
				break;
			case CLASS_MAP:
				{
				setState(984); match(CLASS_MAP);
				}
				break;
			case CLI:
				{
				setState(985); match(CLI);
				}
				break;
			case CLOCK:
				{
				setState(986); match(CLOCK);
				}
				break;
			case CLUSTER:
				{
				setState(987); match(CLUSTER);
				}
				break;
			case CNS:
				{
				setState(988); match(CNS);
				}
				break;
			case CODEC:
				{
				setState(989); match(CODEC);
				}
				break;
			case CONFIG_REGISTER:
				{
				setState(990); match(CONFIG_REGISTER);
				}
				break;
			case CONSOLE:
				{
				setState(991); match(CONSOLE);
				}
				break;
			case CONTACT_EMAIL_ADDR:
				{
				setState(992); match(CONTACT_EMAIL_ADDR);
				}
				break;
			case CRL:
				{
				setState(993); match(CRL);
				}
				break;
			case CRYPTO:
				{
				{
				setState(994); match(CRYPTO);
				setState(999);
				switch (_input.LA(1)) {
				case CA:
					{
					setState(995); match(CA);
					}
					break;
				case IPSEC:
					{
					setState(996); match(IPSEC);
					}
					break;
				case ISAKMP:
					{
					{
					setState(997); match(ISAKMP);
					setState(998);
					_la = _input.LA(1);
					if ( !(_la==ENABLE || _la==INVALID_SPI_RECOVERY || _la==KEY) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case CTL_FILE:
				{
				setState(1001); match(CTL_FILE);
				}
				break;
			case CTS:
				{
				setState(1002); match(CTS);
				}
				break;
			case DEFAULT:
				{
				setState(1003); match(DEFAULT);
				}
				break;
			case DESCRIPTION:
				{
				setState(1004); match(DESCRIPTION);
				}
				break;
			case DESTINATION:
				{
				setState(1005); match(DESTINATION);
				}
				break;
			case DEVICE_SENSOR:
				{
				setState(1006); match(DEVICE_SENSOR);
				}
				break;
			case DHCPD:
				{
				setState(1007); match(DHCPD);
				}
				break;
			case DIAGNOSTIC:
				{
				setState(1008); match(DIAGNOSTIC);
				}
				break;
			case DIALER_LIST:
				{
				setState(1009); match(DIALER_LIST);
				}
				break;
			case DISABLE:
				{
				setState(1010); match(DISABLE);
				}
				break;
			case DNS:
				{
				setState(1011); match(DNS);
				}
				break;
			case DNS_GUARD:
				{
				setState(1012); match(DNS_GUARD);
				}
				break;
			case DOMAIN_NAME:
				{
				setState(1013); match(DOMAIN_NAME);
				}
				break;
			case DOT11:
				{
				setState(1014); match(DOT11);
				}
				break;
			case DSP:
				{
				setState(1015); match(DSP);
				}
				break;
			case DSPFARM:
				{
				setState(1016); match(DSPFARM);
				}
				break;
			case DSS:
				{
				setState(1017); match(DSS);
				}
				break;
			case DYNAMIC_ACCESS_POLICY_RECORD:
				{
				setState(1018); match(DYNAMIC_ACCESS_POLICY_RECORD);
				}
				break;
			case ENABLE:
				{
				setState(1019); match(ENABLE);
				}
				break;
			case ENCR:
				{
				setState(1020); match(ENCR);
				}
				break;
			case ENCRYPTION:
				{
				setState(1021); match(ENCRYPTION);
				}
				break;
			case ENROLLMENT:
				{
				setState(1022); match(ENROLLMENT);
				}
				break;
			case ENVIRONMENT:
				{
				setState(1023); match(ENVIRONMENT);
				}
				break;
			case ERRDISABLE:
				{
				setState(1024); match(ERRDISABLE);
				}
				break;
			case ESCAPE_CHARACTER:
				{
				setState(1025); match(ESCAPE_CHARACTER);
				}
				break;
			case EVENT:
				{
				setState(1026); match(EVENT);
				}
				break;
			case EXCEPTION:
				{
				setState(1027); match(EXCEPTION);
				}
				break;
			case EXEC:
				{
				setState(1028); match(EXEC);
				}
				break;
			case FABRIC:
				{
				setState(1029); match(FABRIC);
				}
				break;
			case FACILITY_ALARM:
				{
				setState(1030); match(FACILITY_ALARM);
				}
				break;
			case FAILOVER:
				{
				setState(1031); match(FAILOVER);
				}
				break;
			case FEATURE:
				{
				setState(1032); match(FEATURE);
				}
				break;
			case FILE:
				{
				setState(1033); match(FILE);
				}
				break;
			case FIREWALL:
				{
				setState(1034); match(FIREWALL);
				}
				break;
			case FIRMWARE:
				{
				setState(1035); match(FIRMWARE);
				}
				break;
			case FLOWCONTROL:
				{
				setState(1036); match(FLOWCONTROL);
				}
				break;
			case FRAME_RELAY:
				{
				setState(1037); match(FRAME_RELAY);
				}
				break;
			case FREQUENCY:
				{
				setState(1038); match(FREQUENCY);
				}
				break;
			case FQDN:
				{
				setState(1039); match(FQDN);
				}
				break;
			case FTP:
				{
				setState(1040); match(FTP);
				}
				break;
			case FTP_SERVER:
				{
				setState(1041); match(FTP_SERVER);
				}
				break;
			case GATEKEEPER:
				{
				setState(1042); match(GATEKEEPER);
				}
				break;
			case GROUP:
				{
				setState(1043); match(GROUP);
				}
				break;
			case GROUP_OBJECT:
				{
				setState(1044); match(GROUP_OBJECT);
				}
				break;
			case HARDWARE:
				{
				setState(1045); match(HARDWARE);
				}
				break;
			case HASH:
				{
				setState(1046); match(HASH);
				}
				break;
			case HISTORY:
				{
				setState(1047); match(HISTORY);
				}
				break;
			case HOST:
				{
				setState(1048); match(HOST);
				}
				break;
			case HTTP:
				{
				setState(1049); match(HTTP);
				}
				break;
			case HW_MODULE:
				{
				setState(1050); match(HW_MODULE);
				}
				break;
			case ICMP:
				{
				setState(1051); match(ICMP);
				}
				break;
			case ICMP_ECHO:
				{
				setState(1052); match(ICMP_ECHO);
				}
				break;
			case ICMP_OBJECT:
				{
				setState(1053); match(ICMP_OBJECT);
				}
				break;
			case IDENTITY:
				{
				setState(1054); match(IDENTITY);
				}
				break;
			case INACTIVITY_TIMER:
				{
				setState(1055); match(INACTIVITY_TIMER);
				}
				break;
			case IP:
				{
				{
				setState(1056); match(IP);
				setState(1115);
				switch (_input.LA(1)) {
				case ADDRESS_POOL:
					{
					setState(1057); match(ADDRESS_POOL);
					}
					break;
				case ADMISSION:
					{
					setState(1058); match(ADMISSION);
					}
					break;
				case ALIAS:
					{
					setState(1059); match(ALIAS);
					}
					break;
				case ARP:
					{
					setState(1060); match(ARP);
					}
					break;
				case AUDIT:
					{
					setState(1061); match(AUDIT);
					}
					break;
				case AUTH_PROXY:
					{
					setState(1062); match(AUTH_PROXY);
					}
					break;
				case BOOTP:
					{
					setState(1063); match(BOOTP);
					}
					break;
				case BGP_COMMUNITY:
					{
					setState(1064); match(BGP_COMMUNITY);
					}
					break;
				case CEF:
					{
					setState(1065); match(CEF);
					}
					break;
				case CLASSLESS:
					{
					setState(1066); match(CLASSLESS);
					}
					break;
				case DEFAULT_NETWORK:
					{
					setState(1067); match(DEFAULT_NETWORK);
					}
					break;
				case DEVICE:
					{
					setState(1068); match(DEVICE);
					}
					break;
				case DOMAIN:
					{
					setState(1069); match(DOMAIN);
					}
					break;
				case DOMAIN_LIST:
					{
					setState(1070); match(DOMAIN_LIST);
					}
					break;
				case DOMAIN_LOOKUP:
					{
					setState(1071); match(DOMAIN_LOOKUP);
					}
					break;
				case DOMAIN_NAME:
					{
					setState(1072); match(DOMAIN_NAME);
					}
					break;
				case DVMRP:
					{
					setState(1073); match(DVMRP);
					}
					break;
				case EXTCOMMUNITY_LIST:
					{
					setState(1074); match(EXTCOMMUNITY_LIST);
					}
					break;
				case FINGER:
					{
					setState(1075); match(FINGER);
					}
					break;
				case FLOW_CACHE:
					{
					setState(1076); match(FLOW_CACHE);
					}
					break;
				case FLOW_EXPORT:
					{
					setState(1077); match(FLOW_EXPORT);
					}
					break;
				case FORWARD_PROTOCOL:
					{
					setState(1078); match(FORWARD_PROTOCOL);
					}
					break;
				case FTP:
					{
					setState(1079); match(FTP);
					}
					break;
				case GRATUITOUS_ARPS:
					{
					setState(1080); match(GRATUITOUS_ARPS);
					}
					break;
				case HOST:
					{
					setState(1081); match(HOST);
					}
					break;
				case HOST_ROUTING:
					{
					setState(1082); match(HOST_ROUTING);
					}
					break;
				case HTTP:
					{
					setState(1083); match(HTTP);
					}
					break;
				case ICMP:
					{
					setState(1084); match(ICMP);
					}
					break;
				case IGMP:
					{
					setState(1085); match(IGMP);
					}
					break;
				case LOAD_SHARING:
					{
					setState(1086); match(LOAD_SHARING);
					}
					break;
				case LOCAL:
					{
					setState(1087); match(LOCAL);
					}
					break;
				case MFIB:
					{
					setState(1088); match(MFIB);
					}
					break;
				case MROUTE:
					{
					setState(1089); match(MROUTE);
					}
					break;
				case MSDP:
					{
					setState(1090); match(MSDP);
					}
					break;
				case MULTICAST:
					{
					setState(1091); match(MULTICAST);
					}
					break;
				case MULTICAST_ROUTING:
					{
					setState(1092); match(MULTICAST_ROUTING);
					}
					break;
				case NAME_SERVER:
					{
					setState(1093); match(NAME_SERVER);
					}
					break;
				case NAT:
					{
					setState(1094); match(NAT);
					}
					break;
				case OSPF:
					{
					{
					setState(1095); match(OSPF);
					setState(1096); match(NAME_LOOKUP);
					}
					}
					break;
				case PIM:
					{
					setState(1097); match(PIM);
					}
					break;
				case RADIUS:
					{
					setState(1098); match(RADIUS);
					}
					break;
				case RCMD:
					{
					setState(1099); match(RCMD);
					}
					break;
				case ROUTE:
					{
					{
					setState(1100); match(ROUTE);
					setState(1101); match(VRF);
					}
					}
					break;
				case ROUTING:
					{
					setState(1102); match(ROUTING);
					}
					break;
				case SAP:
					{
					setState(1103); match(SAP);
					}
					break;
				case SCP:
					{
					setState(1104); match(SCP);
					}
					break;
				case SLA:
					{
					setState(1105); match(SLA);
					}
					break;
				case SOURCE_ROUTE:
					{
					setState(1106); match(SOURCE_ROUTE);
					}
					break;
				case SSH:
					{
					setState(1107); match(SSH);
					}
					break;
				case SUBNET_ZERO:
					{
					setState(1108); match(SUBNET_ZERO);
					}
					break;
				case TACACS:
					{
					setState(1109); match(TACACS);
					}
					break;
				case TCP:
					{
					setState(1110); match(TCP);
					}
					break;
				case TELNET:
					{
					setState(1111); match(TELNET);
					}
					break;
				case TFTP:
					{
					setState(1112); match(TFTP);
					}
					break;
				case VERIFY:
					{
					setState(1113); match(VERIFY);
					}
					break;
				case VRF:
					{
					setState(1114); match(VRF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case IP_ADDRESS_LITERAL:
				{
				setState(1117); match(IP_ADDRESS_LITERAL);
				}
				break;
			case IPV6:
				{
				{
				setState(1118); match(IPV6);
				setState(1134);
				switch (_input.LA(1)) {
				case CEF:
					{
					setState(1119); match(CEF);
					}
					break;
				case HOST:
					{
					setState(1120); match(HOST);
					}
					break;
				case LOCAL:
					{
					setState(1121); match(LOCAL);
					}
					break;
				case MFIB:
					{
					setState(1122); match(MFIB);
					}
					break;
				case MFIB_MODE:
					{
					setState(1123); match(MFIB_MODE);
					}
					break;
				case MLD:
					{
					setState(1124); match(MLD);
					}
					break;
				case MULTICAST:
					{
					setState(1125); match(MULTICAST);
					}
					break;
				case MULTICAST_ROUTING:
					{
					setState(1126); match(MULTICAST_ROUTING);
					}
					break;
				case ND:
					{
					setState(1127); match(ND);
					}
					break;
				case OSPF:
					{
					{
					setState(1128); match(OSPF);
					setState(1129); match(NAME_LOOKUP);
					}
					}
					break;
				case PIM:
					{
					setState(1130); match(PIM);
					}
					break;
				case ROUTE:
					{
					setState(1131); match(ROUTE);
					}
					break;
				case SOURCE_ROUTE:
					{
					setState(1132); match(SOURCE_ROUTE);
					}
					break;
				case UNICAST_ROUTING:
					{
					setState(1133); match(UNICAST_ROUTING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case ISDN:
				{
				setState(1136); match(ISDN);
				}
				break;
			case KEEPOUT:
				{
				setState(1137); match(KEEPOUT);
				}
				break;
			case KEYPAIR:
				{
				setState(1138); match(KEYPAIR);
				}
				break;
			case KEYRING:
				{
				setState(1139); match(KEYRING);
				}
				break;
			case LDAP_BASE_DN:
				{
				setState(1140); match(LDAP_BASE_DN);
				}
				break;
			case LDAP_LOGIN:
				{
				setState(1141); match(LDAP_LOGIN);
				}
				break;
			case LDAP_LOGIN_DN:
				{
				setState(1142); match(LDAP_LOGIN_DN);
				}
				break;
			case LDAP_NAMING_ATTRIBUTE:
				{
				setState(1143); match(LDAP_NAMING_ATTRIBUTE);
				}
				break;
			case LDAP_SCOPE:
				{
				setState(1144); match(LDAP_SCOPE);
				}
				break;
			case LICENSE:
				{
				setState(1145); match(LICENSE);
				}
				break;
			case LIFETIME:
				{
				setState(1146); match(LIFETIME);
				}
				break;
			case LLDP:
				{
				setState(1147); match(LLDP);
				}
				break;
			case LOCATION:
				{
				setState(1148); match(LOCATION);
				}
				break;
			case LOGGING:
				{
				setState(1149); match(LOGGING);
				}
				break;
			case MAC:
				{
				setState(1150); match(MAC);
				}
				break;
			case MAC_ADDRESS_TABLE:
				{
				setState(1151); match(MAC_ADDRESS_TABLE);
				}
				break;
			case MAIL_SERVER:
				{
				setState(1152); match(MAIL_SERVER);
				}
				break;
			case MATCH:
				{
				setState(1153); match(MATCH);
				}
				break;
			case MAXIMUM:
				{
				setState(1154); match(MAXIMUM);
				}
				break;
			case MEDIA_TERMINATION:
				{
				setState(1155); match(MEDIA_TERMINATION);
				}
				break;
			case MEMORY_SIZE:
				{
				setState(1156); match(MEMORY_SIZE);
				}
				break;
			case MGCP:
				{
				setState(1157); match(MGCP);
				}
				break;
			case MICROCODE:
				{
				setState(1158); match(MICROCODE);
				}
				break;
			case MLS:
				{
				setState(1159); match(MLS);
				}
				break;
			case MODE:
				{
				setState(1160); match(MODE);
				}
				break;
			case MODEM:
				{
				setState(1161); match(MODEM);
				}
				break;
			case MODULE:
				{
				setState(1162); match(MODULE);
				}
				break;
			case MONITOR:
				{
				setState(1163); match(MONITOR);
				}
				break;
			case MPLS:
				{
				setState(1164); match(MPLS);
				}
				break;
			case MTA:
				{
				setState(1165); match(MTA);
				}
				break;
			case MTU:
				{
				setState(1166); match(MTU);
				}
				break;
			case MULTILINK:
				{
				setState(1167); match(MULTILINK);
				}
				break;
			case MVR:
				{
				setState(1168); match(MVR);
				}
				break;
			case NAME_SERVER:
				{
				setState(1169); match(NAME_SERVER);
				}
				break;
			case NAME:
				{
				setState(1170); match(NAME);
				}
				break;
			case NAMES:
				{
				setState(1171); match(NAMES);
				}
				break;
			case NAT:
				{
				setState(1172); match(NAT);
				}
				break;
			case NAT_CONTROL:
				{
				setState(1173); match(NAT_CONTROL);
				}
				break;
			case NETCONF:
				{
				setState(1174); match(NETCONF);
				}
				break;
			case NETWORK_OBJECT:
				{
				setState(1175); match(NETWORK_OBJECT);
				}
				break;
			case NETWORK_CLOCK_PARTICIPATE:
				{
				setState(1176); match(NETWORK_CLOCK_PARTICIPATE);
				}
				break;
			case NETWORK_CLOCK_SELECT:
				{
				setState(1177); match(NETWORK_CLOCK_SELECT);
				}
				break;
			case NTP:
				{
				setState(1178); match(NTP);
				}
				break;
			case OBJECT:
				{
				setState(1179); match(OBJECT);
				}
				break;
			case OBJECT_GROUP:
				{
				setState(1180); match(OBJECT_GROUP);
				}
				break;
			case OWNER:
				{
				setState(1181); match(OWNER);
				}
				break;
			case PAGER:
				{
				setState(1182); match(PAGER);
				}
				break;
			case PARSER:
				{
				setState(1183); match(PARSER);
				}
				break;
			case PARTICIPATE:
				{
				setState(1184); match(PARTICIPATE);
				}
				break;
			case PASSWORD:
				{
				setState(1185); match(PASSWORD);
				}
				break;
			case PERCENT:
				{
				setState(1186); match(PERCENT);
				}
				break;
			case PHONE_PROXY:
				{
				setState(1187); match(PHONE_PROXY);
				}
				break;
			case PLATFORM:
				{
				setState(1188); match(PLATFORM);
				}
				break;
			case PORT_CHANNEL:
				{
				setState(1189); match(PORT_CHANNEL);
				}
				break;
			case PORT_OBJECT:
				{
				setState(1190); match(PORT_OBJECT);
				}
				break;
			case POWER:
				{
				setState(1191); match(POWER);
				}
				break;
			case POWEROFF:
				{
				setState(1192); match(POWEROFF);
				}
				break;
			case PRE_SHARED_KEY:
				{
				setState(1193); match(PRE_SHARED_KEY);
				}
				break;
			case PRIORITY:
				{
				setState(1194); match(PRIORITY);
				}
				break;
			case PRIORITY_QUEUE:
				{
				setState(1195); match(PRIORITY_QUEUE);
				}
				break;
			case PRIVILEGE:
				{
				setState(1196); match(PRIVILEGE);
				}
				break;
			case PROCESS:
				{
				setState(1197); match(PROCESS);
				}
				break;
			case PROFILE:
				{
				setState(1198); match(PROFILE);
				}
				break;
			case PROMPT:
				{
				setState(1199); match(PROMPT);
				}
				break;
			case PROTOCOL_OBJECT:
				{
				setState(1200); match(PROTOCOL_OBJECT);
				}
				break;
			case QOS:
				{
				setState(1201); match(QOS);
				}
				break;
			case QUIT:
				{
				setState(1202); match(QUIT);
				}
				break;
			case RADIUS_COMMON_PW:
				{
				setState(1203); match(RADIUS_COMMON_PW);
				}
				break;
			case RADIUS_SERVER:
				{
				setState(1204); match(RADIUS_SERVER);
				}
				break;
			case RD:
				{
				setState(1205); match(RD);
				}
				break;
			case RECORD_ENTRY:
				{
				setState(1206); match(RECORD_ENTRY);
				}
				break;
			case REDIRECT_FQDN:
				{
				setState(1207); match(REDIRECT_FQDN);
				}
				break;
			case RESOURCE:
				{
				setState(1208); match(RESOURCE);
				}
				break;
			case RESOURCE_POOL:
				{
				setState(1209); match(RESOURCE_POOL);
				}
				break;
			case REVERSE_ROUTE:
				{
				setState(1210); match(REVERSE_ROUTE);
				}
				break;
			case REVOCATION_CHECK:
				{
				setState(1211); match(REVOCATION_CHECK);
				}
				break;
			case RMON:
				{
				setState(1212); match(RMON);
				}
				break;
			case ROUTE:
				{
				setState(1213); match(ROUTE);
				}
				break;
			case ROUTE_TARGET:
				{
				setState(1214); match(ROUTE_TARGET);
				}
				break;
			case RSAKEYPAIR:
				{
				setState(1215); match(RSAKEYPAIR);
				}
				break;
			case RTR:
				{
				setState(1216); match(RTR);
				}
				break;
			case SAME_SECURITY_TRAFFIC:
				{
				setState(1217); match(SAME_SECURITY_TRAFFIC);
				}
				break;
			case SCCP:
				{
				{
				setState(1218); match(SCCP);
				setState(1222);
				switch (_input.LA(1)) {
				case CCM:
					{
					{
					setState(1219); match(CCM);
					setState(1220); match(IP_ADDRESS);
					}
					}
					break;
				case LOCAL:
					{
					setState(1221); match(LOCAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case SCHEDULE:
				{
				setState(1224); match(SCHEDULE);
				}
				break;
			case SCHEDULER:
				{
				setState(1225); match(SCHEDULER);
				}
				break;
			case SCRIPTING:
				{
				setState(1226); match(SCRIPTING);
				}
				break;
			case SDM:
				{
				setState(1227); match(SDM);
				}
				break;
			case SECURITY:
				{
				setState(1228); match(SECURITY);
				}
				break;
			case SENDER:
				{
				setState(1229); match(SENDER);
				}
				break;
			case SERIAL_NUMBER:
				{
				setState(1230); match(SERIAL_NUMBER);
				}
				break;
			case SERVER:
				{
				setState(1231); match(SERVER);
				}
				break;
			case SERVER_TYPE:
				{
				setState(1232); match(SERVER_TYPE);
				}
				break;
			case SERVICE:
				{
				setState(1233); match(SERVICE);
				}
				break;
			case SERVICE_POLICY:
				{
				setState(1234); match(SERVICE_POLICY);
				}
				break;
			case SET:
				{
				setState(1235); match(SET);
				}
				break;
			case SETUP:
				{
				setState(1236); match(SETUP);
				}
				break;
			case SFLOW:
				{
				setState(1237); match(SFLOW);
				}
				break;
			case SHELL:
				{
				setState(1238); match(SHELL);
				}
				break;
			case SHUTDOWN:
				{
				setState(1239); match(SHUTDOWN);
				}
				break;
			case SMTP_SERVER:
				{
				setState(1240); match(SMTP_SERVER);
				}
				break;
			case SNMP:
				{
				setState(1241); match(SNMP);
				}
				break;
			case SNMP_SERVER:
				{
				setState(1242); match(SNMP_SERVER);
				}
				break;
			case SOURCE:
				{
				setState(1243); match(SOURCE);
				}
				break;
			case SOURCE_INTERFACE:
				{
				setState(1244); match(SOURCE_INTERFACE);
				}
				break;
			case SOURCE_IP_ADDRESS:
				{
				setState(1245); match(SOURCE_IP_ADDRESS);
				}
				break;
			case SPANNING_TREE:
				{
				setState(1246); match(SPANNING_TREE);
				}
				break;
			case SPD:
				{
				setState(1247); match(SPD);
				}
				break;
			case SPE:
				{
				setState(1248); match(SPE);
				}
				break;
			case SPEED:
				{
				setState(1249); match(SPEED);
				}
				break;
			case STOPBITS:
				{
				setState(1250); match(STOPBITS);
				}
				break;
			case SSH:
				{
				setState(1251); match(SSH);
				}
				break;
			case SSL:
				{
				setState(1252); match(SSL);
				}
				break;
			case STATIC:
				{
				setState(1253); match(STATIC);
				}
				break;
			case STCAPP:
				{
				{
				setState(1254); match(STCAPP);
				{
				setState(1255); match(CCM_GROUP);
				}
				}
				}
				break;
			case SUBJECT_NAME:
				{
				setState(1256); match(SUBJECT_NAME);
				}
				break;
			case SUBNET:
				{
				setState(1257); match(SUBNET);
				}
				break;
			case SUBSCRIBER:
				{
				setState(1258); match(SUBSCRIBER);
				}
				break;
			case SUBSCRIBE_TO:
				{
				setState(1259); match(SUBSCRIBE_TO);
				}
				break;
			case SUBSCRIBE_TO_ALERT_GROUP:
				{
				setState(1260); match(SUBSCRIBE_TO_ALERT_GROUP);
				}
				break;
			case SWITCH:
				{
				setState(1261); match(SWITCH);
				}
				break;
			case SYSOPT:
				{
				setState(1262); match(SYSOPT);
				}
				break;
			case SYSTEM:
				{
				setState(1263); match(SYSTEM);
				}
				break;
			case TABLE_MAP:
				{
				setState(1264); match(TABLE_MAP);
				}
				break;
			case TACACS_SERVER:
				{
				setState(1265); match(TACACS_SERVER);
				}
				break;
			case TAG:
				{
				setState(1266); match(TAG);
				}
				break;
			case TAG_SWITCHING:
				{
				setState(1267); match(TAG_SWITCHING);
				}
				break;
			case TELNET:
				{
				setState(1268); match(TELNET);
				}
				break;
			case TEMPLATE:
				{
				setState(1269); match(TEMPLATE);
				}
				break;
			case TFTP_SERVER:
				{
				setState(1270); match(TFTP_SERVER);
				}
				break;
			case THREAT_DETECTION:
				{
				setState(1271); match(THREAT_DETECTION);
				}
				break;
			case TIMEOUT:
				{
				setState(1272); match(TIMEOUT);
				}
				break;
			case TLS_PROXY:
				{
				setState(1273); match(TLS_PROXY);
				}
				break;
			case TRACK:
				{
				setState(1274); match(TRACK);
				}
				break;
			case TRANSLATE:
				{
				setState(1275); match(TRANSLATE);
				}
				break;
			case TRANSPORT:
				{
				setState(1276); match(TRANSPORT);
				}
				break;
			case TUNNEL_GROUP_LIST:
				{
				setState(1277); match(TUNNEL_GROUP_LIST);
				}
				break;
			case TYPE:
				{
				setState(1278); match(TYPE);
				}
				break;
			case UDLD:
				{
				setState(1279); match(UDLD);
				}
				break;
			case UNABLE:
				{
				setState(1280); match(UNABLE);
				}
				break;
			case UPGRADE:
				{
				setState(1281); match(UPGRADE);
				}
				break;
			case USER_IDENTITY:
				{
				setState(1282); match(USER_IDENTITY);
				}
				break;
			case USE_VRF:
				{
				setState(1283); match(USE_VRF);
				}
				break;
			case USERNAME:
				{
				setState(1284); match(USERNAME);
				}
				break;
			case VALIDATION_USAGE:
				{
				setState(1285); match(VALIDATION_USAGE);
				}
				break;
			case VDC:
				{
				{
				setState(1286); match(VDC);
				setState(1290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
					{
					{
					setState(1287);
					_la = _input.LA(1);
					if ( _la <= 0 || (_la==NEWLINE) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					}
					setState(1292);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1293); match(NEWLINE);
				setState(1304);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1294); match(LIMIT_RESOURCE);
						setState(1298);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
							{
							{
							setState(1295);
							_la = _input.LA(1);
							if ( _la <= 0 || (_la==NEWLINE) ) {
							_errHandler.recoverInline(this);
							}
							consume();
							}
							}
							setState(1300);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(1301); match(NEWLINE);
						}
						} 
					}
					setState(1306);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,36,_ctx);
				}
				}
				}
				break;
			case VERSION:
				{
				setState(1307); match(VERSION);
				}
				break;
			case VLAN:
				{
				{
				setState(1308); match(VLAN);
				setState(1309);
				_la = _input.LA(1);
				if ( !(_la==ACCESS_LOG || _la==CONFIGURATION || _la==DOT1Q || _la==INTERNAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				break;
			case VMPS:
				{
				setState(1310); match(VMPS);
				}
				break;
			case VPDN:
				{
				setState(1311); match(VPDN);
				}
				break;
			case VPN:
				{
				setState(1312); match(VPN);
				}
				break;
			case VTP:
				{
				setState(1313); match(VTP);
				}
				break;
			case VOICE_CARD:
				{
				setState(1314); match(VOICE_CARD);
				}
				break;
			case WEBVPN:
				{
				setState(1315); match(WEBVPN);
				}
				break;
			case WLAN:
				{
				setState(1316); match(WLAN);
				}
				break;
			case WSMA:
				{
				setState(1317); match(WSMA);
				}
				break;
			case X25:
				{
				setState(1318); match(X25);
				}
				break;
			case X29:
				{
				setState(1319); match(X29);
				}
				break;
			case XLATE:
				{
				setState(1320); match(XLATE);
				}
				break;
			case XML:
				{
				setState(1321); match(XML);
				setState(1322); match(SERVER);
				}
				break;
			case XX_HIDE:
				{
				setState(1323); match(XX_HIDE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1326);
				((Null_standalone_stanzaContext)_localctx)._tset2994 = _input.LT(1);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
					((Null_standalone_stanzaContext)_localctx)._tset2994 = (Token)_errHandler.recoverInline(this);
				}
				consume();
				((Null_standalone_stanzaContext)_localctx).remaining_tokens.add(((Null_standalone_stanzaContext)_localctx)._tset2994);
				}
				}
				setState(1331);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1332); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public Arp_access_list_stanzaContext arp_access_list_stanza() {
			return getRuleContext(Arp_access_list_stanzaContext.class,0);
		}
		public Vrf_context_stanzaContext vrf_context_stanza() {
			return getRuleContext(Vrf_context_stanzaContext.class,0);
		}
		public Null_block_stanzaContext null_block_stanza() {
			return getRuleContext(Null_block_stanzaContext.class,0);
		}
		public Banner_stanzaContext banner_stanza() {
			return getRuleContext(Banner_stanzaContext.class,0);
		}
		public TerminalNode SCCP() { return getToken(CiscoGrammar.SCCP, 0); }
		public Certificate_stanzaContext certificate_stanza() {
			return getRuleContext(Certificate_stanzaContext.class,0);
		}
		public Vrf_stanzaContext vrf_stanza() {
			return getRuleContext(Vrf_stanzaContext.class,0);
		}
		public TerminalNode STCAPP() { return getToken(CiscoGrammar.STCAPP, 0); }
		public Null_standalone_stanzaContext null_standalone_stanza() {
			return getRuleContext(Null_standalone_stanzaContext.class,0);
		}
		public Macro_stanzaContext macro_stanza() {
			return getRuleContext(Macro_stanzaContext.class,0);
		}
		public Mac_access_list_stanzaContext mac_access_list_stanza() {
			return getRuleContext(Mac_access_list_stanzaContext.class,0);
		}
		public Null_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_stanza(this);
		}
	}

	public final Null_stanzaContext null_stanza() throws RecognitionException {
		Null_stanzaContext _localctx = new Null_stanzaContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_null_stanza);
		try {
			setState(1349);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1334); arp_access_list_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1335); banner_stanza();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1336); certificate_stanza();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1337); mac_access_list_stanza();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1338); macro_stanza();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1339); null_block_stanza();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1340); null_standalone_stanza();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(1344);
				switch (_input.LA(1)) {
				case NEWLINE:
					{
					}
					break;
				case SCCP:
					{
					setState(1342); match(SCCP);
					}
					break;
				case STCAPP:
					{
					setState(1343); match(STCAPP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1346); match(NEWLINE);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1347); vrf_context_stanza();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1348); vrf_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StanzaContext extends ParserRuleContext {
		public Ip_default_gateway_stanzaContext ip_default_gateway_stanza() {
			return getRuleContext(Ip_default_gateway_stanzaContext.class,0);
		}
		public Switching_mode_stanzaContext switching_mode_stanza() {
			return getRuleContext(Switching_mode_stanzaContext.class,0);
		}
		public Ip_prefix_list_stanzaContext ip_prefix_list_stanza() {
			return getRuleContext(Ip_prefix_list_stanzaContext.class,0);
		}
		public Route_map_stanzaContext route_map_stanza() {
			return getRuleContext(Route_map_stanzaContext.class,0);
		}
		public Extended_access_list_stanzaContext extended_access_list_stanza() {
			return getRuleContext(Extended_access_list_stanzaContext.class,0);
		}
		public Ip_community_list_expanded_stanzaContext ip_community_list_expanded_stanza() {
			return getRuleContext(Ip_community_list_expanded_stanzaContext.class,0);
		}
		public Ip_as_path_access_list_stanzaContext ip_as_path_access_list_stanza() {
			return getRuleContext(Ip_as_path_access_list_stanzaContext.class,0);
		}
		public Ipx_sap_access_list_stanzaContext ipx_sap_access_list_stanza() {
			return getRuleContext(Ipx_sap_access_list_stanzaContext.class,0);
		}
		public Nexus_access_list_stanzaContext nexus_access_list_stanza() {
			return getRuleContext(Nexus_access_list_stanzaContext.class,0);
		}
		public Protocol_type_code_access_list_stanzaContext protocol_type_code_access_list_stanza() {
			return getRuleContext(Protocol_type_code_access_list_stanzaContext.class,0);
		}
		public Ip_route_stanzaContext ip_route_stanza() {
			return getRuleContext(Ip_route_stanzaContext.class,0);
		}
		public Ip_community_list_standard_stanzaContext ip_community_list_standard_stanza() {
			return getRuleContext(Ip_community_list_standard_stanzaContext.class,0);
		}
		public Ipv6_router_ospf_stanzaContext ipv6_router_ospf_stanza() {
			return getRuleContext(Ipv6_router_ospf_stanzaContext.class,0);
		}
		public Router_ospf_stanzaContext router_ospf_stanza() {
			return getRuleContext(Router_ospf_stanzaContext.class,0);
		}
		public Null_stanzaContext null_stanza() {
			return getRuleContext(Null_stanzaContext.class,0);
		}
		public Hostname_stanzaContext hostname_stanza() {
			return getRuleContext(Hostname_stanzaContext.class,0);
		}
		public Router_bgp_stanzaContext router_bgp_stanza() {
			return getRuleContext(Router_bgp_stanzaContext.class,0);
		}
		public Router_rip_stanzaContext router_rip_stanza() {
			return getRuleContext(Router_rip_stanzaContext.class,0);
		}
		public Interface_stanzaContext interface_stanza() {
			return getRuleContext(Interface_stanzaContext.class,0);
		}
		public Appletalk_access_list_stanzaContext appletalk_access_list_stanza() {
			return getRuleContext(Appletalk_access_list_stanzaContext.class,0);
		}
		public Standard_access_list_stanzaContext standard_access_list_stanza() {
			return getRuleContext(Standard_access_list_stanzaContext.class,0);
		}
		public StanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterStanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitStanza(this);
		}
	}

	public final StanzaContext stanza() throws RecognitionException {
		StanzaContext _localctx = new StanzaContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_stanza);
		try {
			setState(1372);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1351); appletalk_access_list_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1352); extended_access_list_stanza();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1353); hostname_stanza();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1354); interface_stanza();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1355); ip_as_path_access_list_stanza();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1356); ip_community_list_expanded_stanza();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1357); ip_community_list_standard_stanza();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1358); ip_default_gateway_stanza();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1359); ip_prefix_list_stanza();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1360); ip_route_stanza();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1361); ipv6_router_ospf_stanza();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1362); ipx_sap_access_list_stanza();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1363); nexus_access_list_stanza();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1364); null_stanza();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1365); protocol_type_code_access_list_stanza();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1366); route_map_stanza();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1367); router_bgp_stanza();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1368); router_ospf_stanza();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1369); router_rip_stanza();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1370); standard_access_list_stanza();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1371); switching_mode_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switching_mode_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode SWITCHING_MODE() { return getToken(CiscoGrammar.SWITCHING_MODE, 0); }
		public Switching_mode_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switching_mode_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSwitching_mode_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSwitching_mode_stanza(this);
		}
	}

	public final Switching_mode_stanzaContext switching_mode_stanza() throws RecognitionException {
		Switching_mode_stanzaContext _localctx = new Switching_mode_stanzaContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_switching_mode_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1374); match(SWITCHING_MODE);
			setState(1378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1375);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(1380);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1381); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vrf_context_stanzaContext extends ParserRuleContext {
		public TerminalNode ROUTE(int i) {
			return getToken(CiscoGrammar.ROUTE, i);
		}
		public TerminalNode CONTEXT() { return getToken(CiscoGrammar.CONTEXT, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public List<TerminalNode> DOMAIN_LIST() { return getTokens(CiscoGrammar.DOMAIN_LIST); }
		public List<TerminalNode> NAME_SERVER() { return getTokens(CiscoGrammar.NAME_SERVER); }
		public TerminalNode IP(int i) {
			return getToken(CiscoGrammar.IP, i);
		}
		public TerminalNode DOMAIN_LIST(int i) {
			return getToken(CiscoGrammar.DOMAIN_LIST, i);
		}
		public TerminalNode NAME_SERVER(int i) {
			return getToken(CiscoGrammar.NAME_SERVER, i);
		}
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public List<TerminalNode> IP() { return getTokens(CiscoGrammar.IP); }
		public List<TerminalNode> ROUTE() { return getTokens(CiscoGrammar.ROUTE); }
		public TerminalNode DOMAIN_NAME(int i) {
			return getToken(CiscoGrammar.DOMAIN_NAME, i);
		}
		public TerminalNode VRF() { return getToken(CiscoGrammar.VRF, 0); }
		public List<TerminalNode> DOMAIN_NAME() { return getTokens(CiscoGrammar.DOMAIN_NAME); }
		public Vrf_context_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vrf_context_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterVrf_context_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitVrf_context_stanza(this);
		}
	}

	public final Vrf_context_stanzaContext vrf_context_stanza() throws RecognitionException {
		Vrf_context_stanzaContext _localctx = new Vrf_context_stanzaContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_vrf_context_stanza);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1383); match(VRF);
			setState(1384); match(CONTEXT);
			setState(1385);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1386); match(NEWLINE);
			setState(1425);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(1423);
					switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
					case 1:
						{
						setState(1387); match(IP);
						setState(1388); match(ROUTE);
						setState(1392);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
							{
							{
							setState(1389);
							_la = _input.LA(1);
							if ( _la <= 0 || (_la==NEWLINE) ) {
							_errHandler.recoverInline(this);
							}
							consume();
							}
							}
							setState(1394);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(1395); match(NEWLINE);
						}
						break;
					case 2:
						{
						setState(1396); match(IP);
						setState(1397); match(DOMAIN_NAME);
						setState(1401);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
							{
							{
							setState(1398);
							_la = _input.LA(1);
							if ( _la <= 0 || (_la==NEWLINE) ) {
							_errHandler.recoverInline(this);
							}
							consume();
							}
							}
							setState(1403);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(1404); match(NEWLINE);
						}
						break;
					case 3:
						{
						setState(1405); match(IP);
						setState(1406); match(DOMAIN_LIST);
						setState(1410);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
							{
							{
							setState(1407);
							_la = _input.LA(1);
							if ( _la <= 0 || (_la==NEWLINE) ) {
							_errHandler.recoverInline(this);
							}
							consume();
							}
							}
							setState(1412);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(1413); match(NEWLINE);
						}
						break;
					case 4:
						{
						setState(1414); match(IP);
						setState(1415); match(NAME_SERVER);
						setState(1419);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
							{
							{
							setState(1416);
							_la = _input.LA(1);
							if ( _la <= 0 || (_la==NEWLINE) ) {
							_errHandler.recoverInline(this);
							}
							consume();
							}
							}
							setState(1421);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(1422); match(NEWLINE);
						}
						break;
					}
					} 
				}
				setState(1427);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vrf_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public List<TerminalNode> CONTEXT() { return getTokens(CiscoGrammar.CONTEXT); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Address_family_vrf_stanzaContext address_family_vrf_stanza(int i) {
			return getRuleContext(Address_family_vrf_stanzaContext.class,i);
		}
		public TerminalNode VRF() { return getToken(CiscoGrammar.VRF, 0); }
		public Null_block_substanzaContext null_block_substanza(int i) {
			return getRuleContext(Null_block_substanzaContext.class,i);
		}
		public List<Null_block_substanzaContext> null_block_substanza() {
			return getRuleContexts(Null_block_substanzaContext.class);
		}
		public TerminalNode CONTEXT(int i) {
			return getToken(CiscoGrammar.CONTEXT, i);
		}
		public List<Address_family_vrf_stanzaContext> address_family_vrf_stanza() {
			return getRuleContexts(Address_family_vrf_stanzaContext.class);
		}
		public Vrf_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vrf_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterVrf_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitVrf_stanza(this);
		}
	}

	public final Vrf_stanzaContext vrf_stanza() throws RecognitionException {
		Vrf_stanzaContext _localctx = new Vrf_stanzaContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_vrf_stanza);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1428); match(VRF);
			setState(1432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1429);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==CONTEXT || _la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(1434);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1435); match(NEWLINE);
			setState(1439);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,50,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1436); null_block_substanza();
					}
					} 
				}
				setState(1441);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,50,_ctx);
			}
			setState(1445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADDRESS_FAMILY) {
				{
				{
				setState(1442); address_family_vrf_stanza();
				}
				}
				setState(1447);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_list_actionContext extends ParserRuleContext {
		public TerminalNode DENY() { return getToken(CiscoGrammar.DENY, 0); }
		public TerminalNode PERMIT() { return getToken(CiscoGrammar.PERMIT, 0); }
		public Access_list_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_list_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAccess_list_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAccess_list_action(this);
		}
	}

	public final Access_list_actionContext access_list_action() throws RecognitionException {
		Access_list_actionContext _localctx = new Access_list_actionContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_access_list_action);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1448);
			_la = _input.LA(1);
			if ( !(_la==DENY || _la==PERMIT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommunityContext extends ParserRuleContext {
		public Token com;
		public TerminalNode NO_ADVERTISE() { return getToken(CiscoGrammar.NO_ADVERTISE, 0); }
		public TerminalNode INTERNET() { return getToken(CiscoGrammar.INTERNET, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode LOCAL_AS() { return getToken(CiscoGrammar.LOCAL_AS, 0); }
		public TerminalNode NO_EXPORT() { return getToken(CiscoGrammar.NO_EXPORT, 0); }
		public TerminalNode COMMUNITY_NUMBER() { return getToken(CiscoGrammar.COMMUNITY_NUMBER, 0); }
		public CommunityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_community; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterCommunity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitCommunity(this);
		}
	}

	public final CommunityContext community() throws RecognitionException {
		CommunityContext _localctx = new CommunityContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_community);
		try {
			setState(1456);
			switch (_input.LA(1)) {
			case COMMUNITY_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1450); ((CommunityContext)_localctx).com = match(COMMUNITY_NUMBER);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1451); ((CommunityContext)_localctx).com = match(DEC);
				}
				break;
			case INTERNET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1452); ((CommunityContext)_localctx).com = match(INTERNET);
				}
				break;
			case LOCAL_AS:
				enterOuterAlt(_localctx, 4);
				{
				setState(1453); ((CommunityContext)_localctx).com = match(LOCAL_AS);
				}
				break;
			case NO_ADVERTISE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1454); ((CommunityContext)_localctx).com = match(NO_ADVERTISE);
				}
				break;
			case NO_EXPORT:
				enterOuterAlt(_localctx, 6);
				{
				setState(1455); ((CommunityContext)_localctx).com = match(NO_EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Description_lineContext extends ParserRuleContext {
		public Token text;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode M_DESCRIPTION_NON_NEWLINE() { return getToken(CiscoGrammar.M_DESCRIPTION_NON_NEWLINE, 0); }
		public TerminalNode DESCRIPTION() { return getToken(CiscoGrammar.DESCRIPTION, 0); }
		public Description_lineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_description_line; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterDescription_line(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitDescription_line(this);
		}
	}

	public final Description_lineContext description_line() throws RecognitionException {
		Description_lineContext _localctx = new Description_lineContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_description_line);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1458); match(DESCRIPTION);
			setState(1460);
			_la = _input.LA(1);
			if (_la==M_DESCRIPTION_NON_NEWLINE) {
				{
				setState(1459); ((Description_lineContext)_localctx).text = match(M_DESCRIPTION_NON_NEWLINE);
				}
			}

			setState(1462); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exact_matchContext extends ParserRuleContext {
		public String matchText;
		public TerminalNode COMMUNITY_LIST_NUM_EXPANDED() { return getToken(CiscoGrammar.COMMUNITY_LIST_NUM_EXPANDED, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public Exact_matchContext(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }
		public Exact_matchContext(ParserRuleContext parent, int invokingState, String matchText) {
			super(parent, invokingState);
			this.matchText = matchText;
		}
		@Override public int getRuleIndex() { return RULE_exact_match; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterExact_match(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitExact_match(this);
		}
	}

	public final Exact_matchContext exact_match(String matchText) throws RecognitionException {
		Exact_matchContext _localctx = new Exact_matchContext(_ctx, getState(), matchText);
		enterRule(_localctx, 38, RULE_exact_match);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1464);
			if (!((_input.LT(1).getType() == VARIABLE || _input.LT(1).getType() == COMMUNITY_LIST_NUM_EXPANDED) && _input.LT(1).getText().equals(_localctx.matchText))) throw new FailedPredicateException(this, "(_input.LT(1).getType() == VARIABLE || _input.LT(1).getType() == COMMUNITY_LIST_NUM_EXPANDED) && _input.LT(1).getText().equals($matchText)");
			setState(1465);
			_la = _input.LA(1);
			if ( !(_la==COMMUNITY_LIST_NUM_EXPANDED || _la==VARIABLE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_nameContext extends ParserRuleContext {
		public Token name;
		public Token x;
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode FORWARD_SLASH() { return getToken(CiscoGrammar.FORWARD_SLASH, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Interface_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterInterface_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitInterface_name(this);
		}
	}

	public final Interface_nameContext interface_name() throws RecognitionException {
		Interface_nameContext _localctx = new Interface_nameContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_interface_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1467); ((Interface_nameContext)_localctx).name = match(VARIABLE);
			setState(1470);
			_la = _input.LA(1);
			if (_la==FORWARD_SLASH) {
				{
				setState(1468); match(FORWARD_SLASH);
				setState(1469); ((Interface_nameContext)_localctx).x = match(DEC);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Port_specifierContext extends ParserRuleContext {
		public PortContext port;
		public List<PortContext> args = new ArrayList<PortContext>();
		public PortContext arg;
		public PortContext arg1;
		public PortContext arg2;
		public TerminalNode NEQ() { return getToken(CiscoGrammar.NEQ, 0); }
		public List<PortContext> port() {
			return getRuleContexts(PortContext.class);
		}
		public TerminalNode RANGE() { return getToken(CiscoGrammar.RANGE, 0); }
		public TerminalNode LT() { return getToken(CiscoGrammar.LT, 0); }
		public TerminalNode GT() { return getToken(CiscoGrammar.GT, 0); }
		public PortContext port(int i) {
			return getRuleContext(PortContext.class,i);
		}
		public TerminalNode EQ() { return getToken(CiscoGrammar.EQ, 0); }
		public Port_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterPort_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitPort_specifier(this);
		}
	}

	public final Port_specifierContext port_specifier() throws RecognitionException {
		Port_specifierContext _localctx = new Port_specifierContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_port_specifier);
		int _la;
		try {
			setState(1488);
			switch (_input.LA(1)) {
			case EQ:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1472); match(EQ);
				setState(1474); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1473); ((Port_specifierContext)_localctx).port = port();
					((Port_specifierContext)_localctx).args.add(((Port_specifierContext)_localctx).port);
					}
					}
					setState(1476); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (BGP - 82)) | (1L << (BOOTPC - 82)) | (1L << (BOOTPS - 82)) | (1L << (CMD - 82)))) != 0) || _la==DOMAIN || _la==EXEC || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (FTP - 272)) | (1L << (FTP_DATA - 272)) | (1L << (HOSTNAME - 272)) | (1L << (IDENT - 272)))) != 0) || _la==ISAKMP || _la==LPD || ((((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & ((1L << (MLAG - 419)) | (1L << (NETBIOS_DGM - 419)) | (1L << (NETBIOS_NS - 419)) | (1L << (NETBIOS_SS - 419)) | (1L << (NNTP - 419)) | (1L << (NON500_ISAKMP - 419)))) != 0) || ((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (NTP - 483)) | (1L << (PIM_AUTO_RP - 483)) | (1L << (POP3 - 483)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (RIP - 590)) | (1L << (SMTP - 590)) | (1L << (SNMP - 590)) | (1L << (SNMPTRAP - 590)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (SSH - 667)) | (1L << (SUNRPC - 667)) | (1L << (SYSLOG - 667)) | (1L << (TACACS - 667)) | (1L << (TELNET - 667)) | (1L << (TFTP - 667)))) != 0) || _la==WWW || _la==DEC );
				}
				}
				break;
			case GT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1478); match(GT);
				setState(1479); ((Port_specifierContext)_localctx).arg = port();
				}
				}
				break;
			case NEQ:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1480); match(NEQ);
				setState(1481); ((Port_specifierContext)_localctx).arg = port();
				}
				}
				break;
			case LT:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(1482); match(LT);
				setState(1483); ((Port_specifierContext)_localctx).arg = port();
				}
				}
				break;
			case RANGE:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1484); match(RANGE);
				setState(1485); ((Port_specifierContext)_localctx).arg1 = port();
				setState(1486); ((Port_specifierContext)_localctx).arg2 = port();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PortContext extends ParserRuleContext {
		public TerminalNode MLAG() { return getToken(CiscoGrammar.MLAG, 0); }
		public TerminalNode POP3() { return getToken(CiscoGrammar.POP3, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode NETBIOS_SS() { return getToken(CiscoGrammar.NETBIOS_SS, 0); }
		public TerminalNode NETBIOS_NS() { return getToken(CiscoGrammar.NETBIOS_NS, 0); }
		public TerminalNode WWW() { return getToken(CiscoGrammar.WWW, 0); }
		public TerminalNode NTP() { return getToken(CiscoGrammar.NTP, 0); }
		public TerminalNode FTP_DATA() { return getToken(CiscoGrammar.FTP_DATA, 0); }
		public TerminalNode SYSLOG() { return getToken(CiscoGrammar.SYSLOG, 0); }
		public TerminalNode FTP() { return getToken(CiscoGrammar.FTP, 0); }
		public TerminalNode RIP() { return getToken(CiscoGrammar.RIP, 0); }
		public TerminalNode TACACS() { return getToken(CiscoGrammar.TACACS, 0); }
		public TerminalNode PIM_AUTO_RP() { return getToken(CiscoGrammar.PIM_AUTO_RP, 0); }
		public TerminalNode IDENT() { return getToken(CiscoGrammar.IDENT, 0); }
		public TerminalNode SNMPTRAP() { return getToken(CiscoGrammar.SNMPTRAP, 0); }
		public TerminalNode EXEC() { return getToken(CiscoGrammar.EXEC, 0); }
		public TerminalNode CMD() { return getToken(CiscoGrammar.CMD, 0); }
		public TerminalNode SUNRPC() { return getToken(CiscoGrammar.SUNRPC, 0); }
		public TerminalNode NNTP() { return getToken(CiscoGrammar.NNTP, 0); }
		public TerminalNode TFTP() { return getToken(CiscoGrammar.TFTP, 0); }
		public TerminalNode LPD() { return getToken(CiscoGrammar.LPD, 0); }
		public TerminalNode SMTP() { return getToken(CiscoGrammar.SMTP, 0); }
		public TerminalNode DOMAIN() { return getToken(CiscoGrammar.DOMAIN, 0); }
		public TerminalNode NETBIOS_DGM() { return getToken(CiscoGrammar.NETBIOS_DGM, 0); }
		public TerminalNode BGP() { return getToken(CiscoGrammar.BGP, 0); }
		public TerminalNode BOOTPS() { return getToken(CiscoGrammar.BOOTPS, 0); }
		public TerminalNode HOSTNAME() { return getToken(CiscoGrammar.HOSTNAME, 0); }
		public TerminalNode NON500_ISAKMP() { return getToken(CiscoGrammar.NON500_ISAKMP, 0); }
		public TerminalNode SSH() { return getToken(CiscoGrammar.SSH, 0); }
		public TerminalNode TELNET() { return getToken(CiscoGrammar.TELNET, 0); }
		public TerminalNode SNMP() { return getToken(CiscoGrammar.SNMP, 0); }
		public TerminalNode ISAKMP() { return getToken(CiscoGrammar.ISAKMP, 0); }
		public TerminalNode BOOTPC() { return getToken(CiscoGrammar.BOOTPC, 0); }
		public PortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterPort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitPort(this);
		}
	}

	public final PortContext port() throws RecognitionException {
		PortContext _localctx = new PortContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_port);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1490);
			_la = _input.LA(1);
			if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (BGP - 82)) | (1L << (BOOTPC - 82)) | (1L << (BOOTPS - 82)) | (1L << (CMD - 82)))) != 0) || _la==DOMAIN || _la==EXEC || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (FTP - 272)) | (1L << (FTP_DATA - 272)) | (1L << (HOSTNAME - 272)) | (1L << (IDENT - 272)))) != 0) || _la==ISAKMP || _la==LPD || ((((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & ((1L << (MLAG - 419)) | (1L << (NETBIOS_DGM - 419)) | (1L << (NETBIOS_NS - 419)) | (1L << (NETBIOS_SS - 419)) | (1L << (NNTP - 419)) | (1L << (NON500_ISAKMP - 419)))) != 0) || ((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (NTP - 483)) | (1L << (PIM_AUTO_RP - 483)) | (1L << (POP3 - 483)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (RIP - 590)) | (1L << (SMTP - 590)) | (1L << (SNMP - 590)) | (1L << (SNMPTRAP - 590)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (SSH - 667)) | (1L << (SUNRPC - 667)) | (1L << (SYSLOG - 667)) | (1L << (TACACS - 667)) | (1L << (TELNET - 667)) | (1L << (TFTP - 667)))) != 0) || _la==WWW || _la==DEC) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProtocolContext extends ParserRuleContext {
		public TerminalNode ESP() { return getToken(CiscoGrammar.ESP, 0); }
		public TerminalNode OSPF() { return getToken(CiscoGrammar.OSPF, 0); }
		public TerminalNode EIGRP() { return getToken(CiscoGrammar.EIGRP, 0); }
		public TerminalNode TCP() { return getToken(CiscoGrammar.TCP, 0); }
		public TerminalNode UDP() { return getToken(CiscoGrammar.UDP, 0); }
		public TerminalNode IGMP() { return getToken(CiscoGrammar.IGMP, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode IPINIP() { return getToken(CiscoGrammar.IPINIP, 0); }
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public TerminalNode AHP() { return getToken(CiscoGrammar.AHP, 0); }
		public TerminalNode VRRP() { return getToken(CiscoGrammar.VRRP, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode GRE() { return getToken(CiscoGrammar.GRE, 0); }
		public TerminalNode PIM() { return getToken(CiscoGrammar.PIM, 0); }
		public TerminalNode SCTP() { return getToken(CiscoGrammar.SCTP, 0); }
		public TerminalNode ICMP() { return getToken(CiscoGrammar.ICMP, 0); }
		public ProtocolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_protocol; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterProtocol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitProtocol(this);
		}
	}

	public final ProtocolContext protocol() throws RecognitionException {
		ProtocolContext _localctx = new ProtocolContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_protocol);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1492);
			_la = _input.LA(1);
			if ( !(_la==AHP || _la==EIGRP || _la==ESP || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (GRE - 281)) | (1L << (ICMP - 281)) | (1L << (IGMP - 281)) | (1L << (IP - 281)) | (1L << (IPINIP - 281)) | (1L << (IPV6 - 281)))) != 0) || _la==OSPF || _la==PIM || _la==SCTP || _la==TCP || _la==UDP || _la==VRRP || _la==DEC) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RangeContext extends ParserRuleContext {
		public SubrangeContext subrange;
		public List<SubrangeContext> range_list = new ArrayList<SubrangeContext>();
		public TerminalNode NONE() { return getToken(CiscoGrammar.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(CiscoGrammar.COMMA); }
		public List<SubrangeContext> subrange() {
			return getRuleContexts(SubrangeContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(CiscoGrammar.COMMA, i);
		}
		public SubrangeContext subrange(int i) {
			return getRuleContext(SubrangeContext.class,i);
		}
		public RangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRange(this);
		}
	}

	public final RangeContext range() throws RecognitionException {
		RangeContext _localctx = new RangeContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_range);
		int _la;
		try {
			setState(1503);
			switch (_input.LA(1)) {
			case DEC:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1494); ((RangeContext)_localctx).subrange = subrange();
				((RangeContext)_localctx).range_list.add(((RangeContext)_localctx).subrange);
				setState(1499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1495); match(COMMA);
					setState(1496); ((RangeContext)_localctx).subrange = subrange();
					((RangeContext)_localctx).range_list.add(((RangeContext)_localctx).subrange);
					}
					}
					setState(1501);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case NONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1502); match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubrangeContext extends ParserRuleContext {
		public Token low;
		public Token high;
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public TerminalNode DASH() { return getToken(CiscoGrammar.DASH, 0); }
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public SubrangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subrange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSubrange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSubrange(this);
		}
	}

	public final SubrangeContext subrange() throws RecognitionException {
		SubrangeContext _localctx = new SubrangeContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_subrange);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1505); ((SubrangeContext)_localctx).low = match(DEC);
			setState(1508);
			_la = _input.LA(1);
			if (_la==DASH) {
				{
				setState(1506); match(DASH);
				setState(1507); ((SubrangeContext)_localctx).high = match(DEC);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchport_trunk_encapsulationContext extends ParserRuleContext {
		public TerminalNode ISL() { return getToken(CiscoGrammar.ISL, 0); }
		public TerminalNode NEGOTIATE() { return getToken(CiscoGrammar.NEGOTIATE, 0); }
		public TerminalNode DOT1Q() { return getToken(CiscoGrammar.DOT1Q, 0); }
		public Switchport_trunk_encapsulationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchport_trunk_encapsulation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSwitchport_trunk_encapsulation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSwitchport_trunk_encapsulation(this);
		}
	}

	public final Switchport_trunk_encapsulationContext switchport_trunk_encapsulation() throws RecognitionException {
		Switchport_trunk_encapsulationContext _localctx = new Switchport_trunk_encapsulationContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_switchport_trunk_encapsulation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1510);
			_la = _input.LA(1);
			if ( !(_la==DOT1Q || _la==ISL || _la==NEGOTIATE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_list_ip_rangeContext extends ParserRuleContext {
		public Token ip;
		public Token wildcard;
		public Token prefix;
		public Token ipv6_prefix;
		public List<TerminalNode> IP_ADDRESS() { return getTokens(CiscoGrammar.IP_ADDRESS); }
		public TerminalNode ANY() { return getToken(CiscoGrammar.ANY, 0); }
		public TerminalNode HOST() { return getToken(CiscoGrammar.HOST, 0); }
		public TerminalNode IP_ADDRESS(int i) {
			return getToken(CiscoGrammar.IP_ADDRESS, i);
		}
		public TerminalNode IPV6_PREFIX() { return getToken(CiscoGrammar.IPV6_PREFIX, 0); }
		public TerminalNode IP_PREFIX() { return getToken(CiscoGrammar.IP_PREFIX, 0); }
		public Access_list_ip_rangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_list_ip_range; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAccess_list_ip_range(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAccess_list_ip_range(this);
		}
	}

	public final Access_list_ip_rangeContext access_list_ip_range() throws RecognitionException {
		Access_list_ip_rangeContext _localctx = new Access_list_ip_rangeContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_access_list_ip_range);
		try {
			setState(1519);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1512); ((Access_list_ip_rangeContext)_localctx).ip = match(IP_ADDRESS);
				setState(1513); ((Access_list_ip_rangeContext)_localctx).wildcard = match(IP_ADDRESS);
				}
				}
				break;
			case ANY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1514); match(ANY);
				}
				break;
			case HOST:
				enterOuterAlt(_localctx, 3);
				{
				setState(1515); match(HOST);
				setState(1516); ((Access_list_ip_rangeContext)_localctx).ip = match(IP_ADDRESS);
				}
				break;
			case IP_PREFIX:
				enterOuterAlt(_localctx, 4);
				{
				setState(1517); ((Access_list_ip_rangeContext)_localctx).prefix = match(IP_PREFIX);
				}
				break;
			case IPV6_PREFIX:
				enterOuterAlt(_localctx, 5);
				{
				setState(1518); ((Access_list_ip_rangeContext)_localctx).ipv6_prefix = match(IPV6_PREFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Appletalk_access_list_numbered_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public TerminalNode ACL_NUM_APPLETALK() { return getToken(CiscoGrammar.ACL_NUM_APPLETALK, 0); }
		public Appletalk_access_list_numbered_stanzaContext appletalk_access_list_numbered_stanza() {
			return getRuleContext(Appletalk_access_list_numbered_stanzaContext.class,0);
		}
		public Appletalk_access_list_null_tailContext appletalk_access_list_null_tail() {
			return getRuleContext(Appletalk_access_list_null_tailContext.class,0);
		}
		public TerminalNode ACCESS_LIST() { return getToken(CiscoGrammar.ACCESS_LIST, 0); }
		public Appletalk_access_list_numbered_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_appletalk_access_list_numbered_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAppletalk_access_list_numbered_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAppletalk_access_list_numbered_stanza(this);
		}
	}

	public final Appletalk_access_list_numbered_stanzaContext appletalk_access_list_numbered_stanza() throws RecognitionException {
		Appletalk_access_list_numbered_stanzaContext _localctx = new Appletalk_access_list_numbered_stanzaContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_appletalk_access_list_numbered_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1521); match(ACCESS_LIST);
			setState(1522); ((Appletalk_access_list_numbered_stanzaContext)_localctx).name = match(ACL_NUM_APPLETALK);
			setState(1523); appletalk_access_list_null_tail();

					((Appletalk_access_list_numbered_stanzaContext)_localctx).again =  _input.LT(1).getType() == ACCESS_LIST &&
					_input.LT(2).getType() == ACL_NUM_APPLETALK &&
					_input.LT(2).getText().equals((((Appletalk_access_list_numbered_stanzaContext)_localctx).name!=null?((Appletalk_access_list_numbered_stanzaContext)_localctx).name.getText():null));
				
			setState(1528);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				setState(1525);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(1526); appletalk_access_list_numbered_stanza();
				}
				break;
			case 2:
				{
				setState(1527);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Appletalk_access_list_null_tailContext extends ParserRuleContext {
		public Access_list_actionContext action;
		public TerminalNode CABLE_RANGE() { return getToken(CiscoGrammar.CABLE_RANGE, 0); }
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode OTHER_ACCESS() { return getToken(CiscoGrammar.OTHER_ACCESS, 0); }
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Appletalk_access_list_null_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_appletalk_access_list_null_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAppletalk_access_list_null_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAppletalk_access_list_null_tail(this);
		}
	}

	public final Appletalk_access_list_null_tailContext appletalk_access_list_null_tail() throws RecognitionException {
		Appletalk_access_list_null_tailContext _localctx = new Appletalk_access_list_null_tailContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_appletalk_access_list_null_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1530); ((Appletalk_access_list_null_tailContext)_localctx).action = access_list_action();
			setState(1539);
			switch (_input.LA(1)) {
			case CABLE_RANGE:
				{
				{
				setState(1531); match(CABLE_RANGE);
				setState(1535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
					{
					{
					setState(1532);
					_la = _input.LA(1);
					if ( _la <= 0 || (_la==NEWLINE) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					}
					setState(1537);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case OTHER_ACCESS:
				{
				setState(1538); match(OTHER_ACCESS);
				}
				break;
			case NEWLINE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1541); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Appletalk_access_list_stanzaContext extends ParserRuleContext {
		public Appletalk_access_list_numbered_stanzaContext numbered;
		public Appletalk_access_list_numbered_stanzaContext appletalk_access_list_numbered_stanza() {
			return getRuleContext(Appletalk_access_list_numbered_stanzaContext.class,0);
		}
		public Appletalk_access_list_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_appletalk_access_list_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAppletalk_access_list_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAppletalk_access_list_stanza(this);
		}
	}

	public final Appletalk_access_list_stanzaContext appletalk_access_list_stanza() throws RecognitionException {
		Appletalk_access_list_stanzaContext _localctx = new Appletalk_access_list_stanzaContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_appletalk_access_list_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1543); ((Appletalk_access_list_stanzaContext)_localctx).numbered = appletalk_access_list_numbered_stanza();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arp_access_list_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public Arp_al_substanzaContext arp_al_substanza(int i) {
			return getRuleContext(Arp_al_substanzaContext.class,i);
		}
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public List<Arp_al_substanzaContext> arp_al_substanza() {
			return getRuleContexts(Arp_al_substanzaContext.class);
		}
		public TerminalNode ARP() { return getToken(CiscoGrammar.ARP, 0); }
		public Arp_access_list_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arp_access_list_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterArp_access_list_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitArp_access_list_stanza(this);
		}
	}

	public final Arp_access_list_stanzaContext arp_access_list_stanza() throws RecognitionException {
		Arp_access_list_stanzaContext _localctx = new Arp_access_list_stanzaContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_arp_access_list_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1545); match(ARP);
			setState(1549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1546);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(1551);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1552); match(NEWLINE);
			setState(1556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEC) {
				{
				{
				setState(1553); arp_al_substanza();
				}
				}
				setState(1558);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arp_al_substanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode REMARK() { return getToken(CiscoGrammar.REMARK, 0); }
		public TerminalNode DENY() { return getToken(CiscoGrammar.DENY, 0); }
		public TerminalNode PERMIT() { return getToken(CiscoGrammar.PERMIT, 0); }
		public Arp_al_substanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arp_al_substanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterArp_al_substanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitArp_al_substanza(this);
		}
	}

	public final Arp_al_substanzaContext arp_al_substanza() throws RecognitionException {
		Arp_al_substanzaContext _localctx = new Arp_al_substanzaContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_arp_al_substanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1559); match(DEC);
			setState(1560);
			_la = _input.LA(1);
			if ( !(_la==DENY || _la==PERMIT || _la==REMARK) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1561);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(1566);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1567); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_access_list_additional_featureContext extends ParserRuleContext {
		public TerminalNode ECHO() { return getToken(CiscoGrammar.ECHO, 0); }
		public TerminalNode NET_UNREACHABLE() { return getToken(CiscoGrammar.NET_UNREACHABLE, 0); }
		public TerminalNode LOG() { return getToken(CiscoGrammar.LOG, 0); }
		public TerminalNode RST() { return getToken(CiscoGrammar.RST, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode TRACKED() { return getToken(CiscoGrammar.TRACKED, 0); }
		public TerminalNode EQ() { return getToken(CiscoGrammar.EQ, 0); }
		public TerminalNode PORT_UNREACHABLE() { return getToken(CiscoGrammar.PORT_UNREACHABLE, 0); }
		public TerminalNode REDIRECT() { return getToken(CiscoGrammar.REDIRECT, 0); }
		public TerminalNode ECHO_REPLY() { return getToken(CiscoGrammar.ECHO_REPLY, 0); }
		public TerminalNode NETWORK_UNKNOWN() { return getToken(CiscoGrammar.NETWORK_UNKNOWN, 0); }
		public TerminalNode MLD_REPORT() { return getToken(CiscoGrammar.MLD_REPORT, 0); }
		public TerminalNode ROUTER_ADVERTISEMENT() { return getToken(CiscoGrammar.ROUTER_ADVERTISEMENT, 0); }
		public TerminalNode TTL_EXCEEDED() { return getToken(CiscoGrammar.TTL_EXCEEDED, 0); }
		public TerminalNode PACKET_TOO_BIG() { return getToken(CiscoGrammar.PACKET_TOO_BIG, 0); }
		public TerminalNode UNREACHABLE() { return getToken(CiscoGrammar.UNREACHABLE, 0); }
		public TerminalNode ND_NS() { return getToken(CiscoGrammar.ND_NS, 0); }
		public TerminalNode ND_NA() { return getToken(CiscoGrammar.ND_NA, 0); }
		public TerminalNode HOST_UNKNOWN() { return getToken(CiscoGrammar.HOST_UNKNOWN, 0); }
		public TerminalNode HOST_UNREACHABLE() { return getToken(CiscoGrammar.HOST_UNREACHABLE, 0); }
		public TerminalNode SOURCE_QUENCH() { return getToken(CiscoGrammar.SOURCE_QUENCH, 0); }
		public TerminalNode MLD_REDUCTION() { return getToken(CiscoGrammar.MLD_REDUCTION, 0); }
		public TerminalNode ESTABLISHED() { return getToken(CiscoGrammar.ESTABLISHED, 0); }
		public TerminalNode MLD_QUERY() { return getToken(CiscoGrammar.MLD_QUERY, 0); }
		public TerminalNode ROUTER_SOLICITATION() { return getToken(CiscoGrammar.ROUTER_SOLICITATION, 0); }
		public TerminalNode TTL() { return getToken(CiscoGrammar.TTL, 0); }
		public TerminalNode LOG_INPUT() { return getToken(CiscoGrammar.LOG_INPUT, 0); }
		public TerminalNode FRAGMENTS() { return getToken(CiscoGrammar.FRAGMENTS, 0); }
		public TerminalNode PARAMETER_PROBLEM() { return getToken(CiscoGrammar.PARAMETER_PROBLEM, 0); }
		public TerminalNode ECHO_REQUEST() { return getToken(CiscoGrammar.ECHO_REQUEST, 0); }
		public TerminalNode TIME_EXCEEDED() { return getToken(CiscoGrammar.TIME_EXCEEDED, 0); }
		public Extended_access_list_additional_featureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_access_list_additional_feature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterExtended_access_list_additional_feature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitExtended_access_list_additional_feature(this);
		}
	}

	public final Extended_access_list_additional_featureContext extended_access_list_additional_feature() throws RecognitionException {
		Extended_access_list_additional_featureContext _localctx = new Extended_access_list_additional_featureContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_extended_access_list_additional_feature);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1600);
			switch (_input.LA(1)) {
			case ECHO_REPLY:
				{
				setState(1569); match(ECHO_REPLY);
				}
				break;
			case ECHO_REQUEST:
				{
				setState(1570); match(ECHO_REQUEST);
				}
				break;
			case ECHO:
				{
				setState(1571); match(ECHO);
				}
				break;
			case ESTABLISHED:
				{
				setState(1572); match(ESTABLISHED);
				}
				break;
			case FRAGMENTS:
				{
				setState(1573); match(FRAGMENTS);
				}
				break;
			case HOST_UNKNOWN:
				{
				setState(1574); match(HOST_UNKNOWN);
				}
				break;
			case HOST_UNREACHABLE:
				{
				setState(1575); match(HOST_UNREACHABLE);
				}
				break;
			case LOG:
				{
				setState(1576); match(LOG);
				}
				break;
			case LOG_INPUT:
				{
				setState(1577); match(LOG_INPUT);
				}
				break;
			case MLD_QUERY:
				{
				setState(1578); match(MLD_QUERY);
				}
				break;
			case MLD_REDUCTION:
				{
				setState(1579); match(MLD_REDUCTION);
				}
				break;
			case MLD_REPORT:
				{
				setState(1580); match(MLD_REPORT);
				}
				break;
			case ND_NA:
				{
				setState(1581); match(ND_NA);
				}
				break;
			case ND_NS:
				{
				setState(1582); match(ND_NS);
				}
				break;
			case NETWORK_UNKNOWN:
				{
				setState(1583); match(NETWORK_UNKNOWN);
				}
				break;
			case NET_UNREACHABLE:
				{
				setState(1584); match(NET_UNREACHABLE);
				}
				break;
			case PACKET_TOO_BIG:
				{
				setState(1585); match(PACKET_TOO_BIG);
				}
				break;
			case PARAMETER_PROBLEM:
				{
				setState(1586); match(PARAMETER_PROBLEM);
				}
				break;
			case PORT_UNREACHABLE:
				{
				setState(1587); match(PORT_UNREACHABLE);
				}
				break;
			case REDIRECT:
				{
				setState(1588); match(REDIRECT);
				}
				break;
			case ROUTER_ADVERTISEMENT:
				{
				setState(1589); match(ROUTER_ADVERTISEMENT);
				}
				break;
			case ROUTER_SOLICITATION:
				{
				setState(1590); match(ROUTER_SOLICITATION);
				}
				break;
			case RST:
				{
				setState(1591); match(RST);
				}
				break;
			case SOURCE_QUENCH:
				{
				setState(1592); match(SOURCE_QUENCH);
				}
				break;
			case TIME_EXCEEDED:
				{
				setState(1593); match(TIME_EXCEEDED);
				}
				break;
			case TRACKED:
				{
				setState(1594); match(TRACKED);
				}
				break;
			case TTL_EXCEEDED:
				{
				setState(1595); match(TTL_EXCEEDED);
				}
				break;
			case TTL:
				{
				setState(1596); match(TTL);
				setState(1597); match(EQ);
				setState(1598); match(DEC);
				}
				break;
			case UNREACHABLE:
				{
				setState(1599); match(UNREACHABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_access_list_named_stanzaContext extends ParserRuleContext {
		public Token name;
		public List<Extended_access_list_tailContext> extended_access_list_tail() {
			return getRuleContexts(Extended_access_list_tailContext.class);
		}
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public List<Extended_access_list_null_tailContext> extended_access_list_null_tail() {
			return getRuleContexts(Extended_access_list_null_tailContext.class);
		}
		public Extended_access_list_tailContext extended_access_list_tail(int i) {
			return getRuleContext(Extended_access_list_tailContext.class,i);
		}
		public TerminalNode EXTENDED() { return getToken(CiscoGrammar.EXTENDED, 0); }
		public Extended_access_list_null_tailContext extended_access_list_null_tail(int i) {
			return getRuleContext(Extended_access_list_null_tailContext.class,i);
		}
		public TerminalNode ACCESS_LIST() { return getToken(CiscoGrammar.ACCESS_LIST, 0); }
		public Extended_access_list_named_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_access_list_named_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterExtended_access_list_named_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitExtended_access_list_named_stanza(this);
		}
	}

	public final Extended_access_list_named_stanzaContext extended_access_list_named_stanza() throws RecognitionException {
		Extended_access_list_named_stanzaContext _localctx = new Extended_access_list_named_stanzaContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_extended_access_list_named_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1602); match(IP);
			setState(1603); match(ACCESS_LIST);
			setState(1604); match(EXTENDED);
			setState(1605);
			((Extended_access_list_named_stanzaContext)_localctx).name = _input.LT(1);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
				((Extended_access_list_named_stanzaContext)_localctx).name = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(1606); match(NEWLINE);
			setState(1611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 168)) & ~0x3f) == 0 && ((1L << (_la - 168)) & ((1L << (DENY - 168)) | (1L << (DYNAMIC - 168)) | (1L << (EVALUATE - 168)))) != 0) || _la==PERMIT || _la==REMARK) {
				{
				setState(1609);
				switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					setState(1607); extended_access_list_tail();
					}
					break;
				case 2:
					{
					setState(1608); extended_access_list_null_tail();
					}
					break;
				}
				}
				setState(1613);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_access_list_null_tailContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode EVALUATE() { return getToken(CiscoGrammar.EVALUATE, 0); }
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public List<Access_list_ip_rangeContext> access_list_ip_range() {
			return getRuleContexts(Access_list_ip_rangeContext.class);
		}
		public TerminalNode DYNAMIC() { return getToken(CiscoGrammar.DYNAMIC, 0); }
		public ProtocolContext protocol() {
			return getRuleContext(ProtocolContext.class,0);
		}
		public Port_specifierContext port_specifier(int i) {
			return getRuleContext(Port_specifierContext.class,i);
		}
		public TerminalNode REFLECT() { return getToken(CiscoGrammar.REFLECT, 0); }
		public Access_list_ip_rangeContext access_list_ip_range(int i) {
			return getRuleContext(Access_list_ip_rangeContext.class,i);
		}
		public TerminalNode REMARK() { return getToken(CiscoGrammar.REMARK, 0); }
		public List<Port_specifierContext> port_specifier() {
			return getRuleContexts(Port_specifierContext.class);
		}
		public Extended_access_list_null_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_access_list_null_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterExtended_access_list_null_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitExtended_access_list_null_tail(this);
		}
	}

	public final Extended_access_list_null_tailContext extended_access_list_null_tail() throws RecognitionException {
		Extended_access_list_null_tailContext _localctx = new Extended_access_list_null_tailContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_extended_access_list_null_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1629);
			switch (_input.LA(1)) {
			case DENY:
			case PERMIT:
				{
				{
				setState(1614); access_list_action();
				setState(1615); protocol();
				setState(1616); access_list_ip_range();
				setState(1618);
				_la = _input.LA(1);
				if (_la==EQ || _la==GT || _la==LT || _la==NEQ || _la==RANGE) {
					{
					setState(1617); port_specifier();
					}
				}

				setState(1620); access_list_ip_range();
				setState(1622);
				_la = _input.LA(1);
				if (_la==EQ || _la==GT || _la==LT || _la==NEQ || _la==RANGE) {
					{
					setState(1621); port_specifier();
					}
				}

				setState(1624); match(REFLECT);
				}
				}
				break;
			case DYNAMIC:
				{
				setState(1626); match(DYNAMIC);
				}
				break;
			case EVALUATE:
				{
				setState(1627); match(EVALUATE);
				}
				break;
			case REMARK:
				{
				setState(1628); match(REMARK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1631);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(1636);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1637); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_access_list_numbered_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public Extended_access_list_numbered_stanzaContext extended_access_list_numbered_stanza() {
			return getRuleContext(Extended_access_list_numbered_stanzaContext.class,0);
		}
		public Extended_access_list_tailContext extended_access_list_tail() {
			return getRuleContext(Extended_access_list_tailContext.class,0);
		}
		public Extended_access_list_null_tailContext extended_access_list_null_tail() {
			return getRuleContext(Extended_access_list_null_tailContext.class,0);
		}
		public TerminalNode ACL_NUM_EXTENDED() { return getToken(CiscoGrammar.ACL_NUM_EXTENDED, 0); }
		public TerminalNode ACCESS_LIST() { return getToken(CiscoGrammar.ACCESS_LIST, 0); }
		public Extended_access_list_numbered_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_access_list_numbered_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterExtended_access_list_numbered_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitExtended_access_list_numbered_stanza(this);
		}
	}

	public final Extended_access_list_numbered_stanzaContext extended_access_list_numbered_stanza() throws RecognitionException {
		Extended_access_list_numbered_stanzaContext _localctx = new Extended_access_list_numbered_stanzaContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_extended_access_list_numbered_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639); match(ACCESS_LIST);
			setState(1640); ((Extended_access_list_numbered_stanzaContext)_localctx).name = match(ACL_NUM_EXTENDED);
			setState(1643);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(1641); extended_access_list_tail();
				}
				break;
			case 2:
				{
				setState(1642); extended_access_list_null_tail();
				}
				break;
			}

					((Extended_access_list_numbered_stanzaContext)_localctx).again =  _input.LT(1).getType() == ACCESS_LIST &&
					_input.LT(2).getType() == ACL_NUM_EXTENDED &&
					_input.LT(2).getText().equals((((Extended_access_list_numbered_stanzaContext)_localctx).name!=null?((Extended_access_list_numbered_stanzaContext)_localctx).name.getText():null));
				
			setState(1649);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				setState(1646);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(1647); extended_access_list_numbered_stanza();
				}
				break;
			case 2:
				{
				setState(1648);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_access_list_stanzaContext extends ParserRuleContext {
		public Extended_access_list_named_stanzaContext named;
		public Extended_access_list_numbered_stanzaContext numbered;
		public Extended_access_list_numbered_stanzaContext extended_access_list_numbered_stanza() {
			return getRuleContext(Extended_access_list_numbered_stanzaContext.class,0);
		}
		public Extended_access_list_named_stanzaContext extended_access_list_named_stanza() {
			return getRuleContext(Extended_access_list_named_stanzaContext.class,0);
		}
		public Extended_access_list_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_access_list_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterExtended_access_list_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitExtended_access_list_stanza(this);
		}
	}

	public final Extended_access_list_stanzaContext extended_access_list_stanza() throws RecognitionException {
		Extended_access_list_stanzaContext _localctx = new Extended_access_list_stanzaContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_extended_access_list_stanza);
		try {
			setState(1653);
			switch (_input.LA(1)) {
			case IP:
				enterOuterAlt(_localctx, 1);
				{
				setState(1651); ((Extended_access_list_stanzaContext)_localctx).named = extended_access_list_named_stanza();
				}
				break;
			case ACCESS_LIST:
				enterOuterAlt(_localctx, 2);
				{
				setState(1652); ((Extended_access_list_stanzaContext)_localctx).numbered = extended_access_list_numbered_stanza();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_access_list_tailContext extends ParserRuleContext {
		public Access_list_actionContext ala;
		public ProtocolContext prot;
		public Access_list_ip_rangeContext srcipr;
		public Port_specifierContext alps_src;
		public Access_list_ip_rangeContext dstipr;
		public Port_specifierContext alps_dst;
		public Extended_access_list_additional_featureContext feature;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public List<Access_list_ip_rangeContext> access_list_ip_range() {
			return getRuleContexts(Access_list_ip_rangeContext.class);
		}
		public ProtocolContext protocol() {
			return getRuleContext(ProtocolContext.class,0);
		}
		public Port_specifierContext port_specifier(int i) {
			return getRuleContext(Port_specifierContext.class,i);
		}
		public Access_list_ip_rangeContext access_list_ip_range(int i) {
			return getRuleContext(Access_list_ip_rangeContext.class,i);
		}
		public Extended_access_list_additional_featureContext extended_access_list_additional_feature() {
			return getRuleContext(Extended_access_list_additional_featureContext.class,0);
		}
		public List<Port_specifierContext> port_specifier() {
			return getRuleContexts(Port_specifierContext.class);
		}
		public Extended_access_list_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_access_list_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterExtended_access_list_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitExtended_access_list_tail(this);
		}
	}

	public final Extended_access_list_tailContext extended_access_list_tail() throws RecognitionException {
		Extended_access_list_tailContext _localctx = new Extended_access_list_tailContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_extended_access_list_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1655); ((Extended_access_list_tailContext)_localctx).ala = access_list_action();
			setState(1656); ((Extended_access_list_tailContext)_localctx).prot = protocol();
			setState(1657); ((Extended_access_list_tailContext)_localctx).srcipr = access_list_ip_range();
			setState(1659);
			_la = _input.LA(1);
			if (_la==EQ || _la==GT || _la==LT || _la==NEQ || _la==RANGE) {
				{
				setState(1658); ((Extended_access_list_tailContext)_localctx).alps_src = port_specifier();
				}
			}

			setState(1661); ((Extended_access_list_tailContext)_localctx).dstipr = access_list_ip_range();
			setState(1663);
			_la = _input.LA(1);
			if (_la==EQ || _la==GT || _la==LT || _la==NEQ || _la==RANGE) {
				{
				setState(1662); ((Extended_access_list_tailContext)_localctx).alps_dst = port_specifier();
				}
			}

			setState(1666);
			_la = _input.LA(1);
			if (((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & ((1L << (ECHO - 210)) | (1L << (ECHO_REPLY - 210)) | (1L << (ECHO_REQUEST - 210)) | (1L << (ESTABLISHED - 210)) | (1L << (FRAGMENTS - 210)))) != 0) || _la==HOST_UNKNOWN || _la==HOST_UNREACHABLE || ((((_la - 377)) & ~0x3f) == 0 && ((1L << (_la - 377)) & ((1L << (LOG - 377)) | (1L << (LOG_INPUT - 377)) | (1L << (MLD_QUERY - 377)) | (1L << (MLD_REDUCTION - 377)) | (1L << (MLD_REPORT - 377)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (ND_NA - 453)) | (1L << (ND_NS - 453)) | (1L << (NET_UNREACHABLE - 453)) | (1L << (NETWORK_UNKNOWN - 453)) | (1L << (PACKET_TOO_BIG - 453)) | (1L << (PARAMETER_PROBLEM - 453)))) != 0) || _la==PORT_UNREACHABLE || _la==REDIRECT || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (ROUTER_ADVERTISEMENT - 600)) | (1L << (ROUTER_SOLICITATION - 600)) | (1L << (RST - 600)) | (1L << (SOURCE_QUENCH - 600)))) != 0) || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (TIME_EXCEEDED - 715)) | (1L << (TRACKED - 715)) | (1L << (TTL - 715)) | (1L << (TTL_EXCEEDED - 715)) | (1L << (UNREACHABLE - 715)))) != 0)) {
				{
				setState(1665); ((Extended_access_list_tailContext)_localctx).feature = extended_access_list_additional_feature();
				}
			}

			setState(1668); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_as_path_access_list_stanzaContext extends ParserRuleContext {
		public Ip_as_path_numbered_stanzaContext numbered;
		public Ip_as_path_numbered_stanzaContext ip_as_path_numbered_stanza() {
			return getRuleContext(Ip_as_path_numbered_stanzaContext.class,0);
		}
		public Ip_as_path_access_list_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_as_path_access_list_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_as_path_access_list_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_as_path_access_list_stanza(this);
		}
	}

	public final Ip_as_path_access_list_stanzaContext ip_as_path_access_list_stanza() throws RecognitionException {
		Ip_as_path_access_list_stanzaContext _localctx = new Ip_as_path_access_list_stanzaContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_ip_as_path_access_list_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1670); ((Ip_as_path_access_list_stanzaContext)_localctx).numbered = ip_as_path_numbered_stanza();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_as_path_numbered_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public Ip_as_path_numbered_stanzaContext ip_as_path_numbered_stanza() {
			return getRuleContext(Ip_as_path_numbered_stanzaContext.class,0);
		}
		public TerminalNode AS_PATH() { return getToken(CiscoGrammar.AS_PATH, 0); }
		public Ip_as_path_access_list_tailContext ip_as_path_access_list_tail() {
			return getRuleContext(Ip_as_path_access_list_tailContext.class,0);
		}
		public TerminalNode ACCESS_LIST() { return getToken(CiscoGrammar.ACCESS_LIST, 0); }
		public Ip_as_path_numbered_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_as_path_numbered_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_as_path_numbered_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_as_path_numbered_stanza(this);
		}
	}

	public final Ip_as_path_numbered_stanzaContext ip_as_path_numbered_stanza() throws RecognitionException {
		Ip_as_path_numbered_stanzaContext _localctx = new Ip_as_path_numbered_stanzaContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_ip_as_path_numbered_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1672); match(IP);
			setState(1673); match(AS_PATH);
			setState(1674); match(ACCESS_LIST);
			setState(1675);
			((Ip_as_path_numbered_stanzaContext)_localctx).name = matchWildcard();
			setState(1676); ip_as_path_access_list_tail();

					((Ip_as_path_numbered_stanzaContext)_localctx).again =  _input.LT(1).getType() == IP &&
					_input.LT(2).getType() == AS_PATH &&
					_input.LT(3).getType() == ACCESS_LIST &&
					_input.LT(4).getText().equals((((Ip_as_path_numbered_stanzaContext)_localctx).name!=null?((Ip_as_path_numbered_stanzaContext)_localctx).name.getText():null));
				
			setState(1681);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(1678);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(1679); ip_as_path_numbered_stanza();
				}
				break;
			case 2:
				{
				setState(1680);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_as_path_access_list_tailContext extends ParserRuleContext {
		public Access_list_actionContext action;
		public Token NEWLINE;
		public List<Token> remainder = new ArrayList<Token>();
		public Token _tset599;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Ip_as_path_access_list_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_as_path_access_list_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_as_path_access_list_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_as_path_access_list_tail(this);
		}
	}

	public final Ip_as_path_access_list_tailContext ip_as_path_access_list_tail() throws RecognitionException {
		Ip_as_path_access_list_tailContext _localctx = new Ip_as_path_access_list_tailContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_ip_as_path_access_list_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1683); ((Ip_as_path_access_list_tailContext)_localctx).action = access_list_action();
			setState(1685); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1684);
				((Ip_as_path_access_list_tailContext)_localctx)._tset599 = _input.LT(1);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
					((Ip_as_path_access_list_tailContext)_localctx)._tset599 = (Token)_errHandler.recoverInline(this);
				}
				consume();
				((Ip_as_path_access_list_tailContext)_localctx).remainder.add(((Ip_as_path_access_list_tailContext)_localctx)._tset599);
				}
				}
				setState(1687); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0) );
			setState(1689); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_community_list_expanded_stanzaContext extends ParserRuleContext {
		public Ip_community_list_expanded_named_stanzaContext named;
		public Ip_community_list_expanded_numbered_stanzaContext numbered;
		public Ip_community_list_expanded_numbered_stanzaContext ip_community_list_expanded_numbered_stanza() {
			return getRuleContext(Ip_community_list_expanded_numbered_stanzaContext.class,0);
		}
		public Ip_community_list_expanded_named_stanzaContext ip_community_list_expanded_named_stanza() {
			return getRuleContext(Ip_community_list_expanded_named_stanzaContext.class,0);
		}
		public Ip_community_list_expanded_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_community_list_expanded_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_community_list_expanded_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_community_list_expanded_stanza(this);
		}
	}

	public final Ip_community_list_expanded_stanzaContext ip_community_list_expanded_stanza() throws RecognitionException {
		Ip_community_list_expanded_stanzaContext _localctx = new Ip_community_list_expanded_stanzaContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_ip_community_list_expanded_stanza);
		try {
			setState(1693);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1691); ((Ip_community_list_expanded_stanzaContext)_localctx).named = ip_community_list_expanded_named_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1692); ((Ip_community_list_expanded_stanzaContext)_localctx).numbered = ip_community_list_expanded_numbered_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_community_list_expanded_named_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public TerminalNode EXPANDED() { return getToken(CiscoGrammar.EXPANDED, 0); }
		public Ip_community_list_expanded_named_stanzaContext ip_community_list_expanded_named_stanza() {
			return getRuleContext(Ip_community_list_expanded_named_stanzaContext.class,0);
		}
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public Ip_community_list_expanded_tailContext ip_community_list_expanded_tail() {
			return getRuleContext(Ip_community_list_expanded_tailContext.class,0);
		}
		public TerminalNode COMMUNITY_LIST() { return getToken(CiscoGrammar.COMMUNITY_LIST, 0); }
		public Ip_community_list_expanded_named_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_community_list_expanded_named_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_community_list_expanded_named_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_community_list_expanded_named_stanza(this);
		}
	}

	public final Ip_community_list_expanded_named_stanzaContext ip_community_list_expanded_named_stanza() throws RecognitionException {
		Ip_community_list_expanded_named_stanzaContext _localctx = new Ip_community_list_expanded_named_stanzaContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_ip_community_list_expanded_named_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1695); match(IP);
			setState(1696); match(COMMUNITY_LIST);
			setState(1697); match(EXPANDED);
			setState(1698); ((Ip_community_list_expanded_named_stanzaContext)_localctx).name = match(VARIABLE);
			setState(1699); ip_community_list_expanded_tail();

					((Ip_community_list_expanded_named_stanzaContext)_localctx).again =  _input.LT(1).getType() == IP &&
					_input.LT(2).getType() == COMMUNITY_LIST &&
					_input.LT(3).getType() == EXPANDED &&
					_input.LT(4).getType() == VARIABLE &&
					_input.LT(4).getText().equals((((Ip_community_list_expanded_named_stanzaContext)_localctx).name!=null?((Ip_community_list_expanded_named_stanzaContext)_localctx).name.getText():null));
				
			setState(1704);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				setState(1701);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(1702); ip_community_list_expanded_named_stanza();
				}
				break;
			case 2:
				{
				setState(1703);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_community_list_expanded_numbered_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public Ip_community_list_expanded_numbered_stanzaContext ip_community_list_expanded_numbered_stanza() {
			return getRuleContext(Ip_community_list_expanded_numbered_stanzaContext.class,0);
		}
		public TerminalNode COMMUNITY_LIST_NUM_EXPANDED() { return getToken(CiscoGrammar.COMMUNITY_LIST_NUM_EXPANDED, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public Ip_community_list_expanded_tailContext ip_community_list_expanded_tail() {
			return getRuleContext(Ip_community_list_expanded_tailContext.class,0);
		}
		public TerminalNode COMMUNITY_LIST() { return getToken(CiscoGrammar.COMMUNITY_LIST, 0); }
		public Ip_community_list_expanded_numbered_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_community_list_expanded_numbered_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_community_list_expanded_numbered_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_community_list_expanded_numbered_stanza(this);
		}
	}

	public final Ip_community_list_expanded_numbered_stanzaContext ip_community_list_expanded_numbered_stanza() throws RecognitionException {
		Ip_community_list_expanded_numbered_stanzaContext _localctx = new Ip_community_list_expanded_numbered_stanzaContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_ip_community_list_expanded_numbered_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1706); match(IP);
			setState(1707); match(COMMUNITY_LIST);
			setState(1708); ((Ip_community_list_expanded_numbered_stanzaContext)_localctx).name = match(COMMUNITY_LIST_NUM_EXPANDED);
			setState(1709); ip_community_list_expanded_tail();

					((Ip_community_list_expanded_numbered_stanzaContext)_localctx).again =  _input.LT(1).getType() == IP &&
					_input.LT(2).getType() == COMMUNITY_LIST &&
					_input.LT(3).getType() == COMMUNITY_LIST_NUM_EXPANDED &&
					_input.LT(3).getText().equals((((Ip_community_list_expanded_numbered_stanzaContext)_localctx).name!=null?((Ip_community_list_expanded_numbered_stanzaContext)_localctx).name.getText():null));
				
			setState(1714);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				setState(1711);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(1712); ip_community_list_expanded_numbered_stanza();
				}
				break;
			case 2:
				{
				setState(1713);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_community_list_expanded_tailContext extends ParserRuleContext {
		public Access_list_actionContext ala;
		public Token NEWLINE;
		public List<Token> remainder = new ArrayList<Token>();
		public Token _tset719;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Ip_community_list_expanded_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_community_list_expanded_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_community_list_expanded_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_community_list_expanded_tail(this);
		}
	}

	public final Ip_community_list_expanded_tailContext ip_community_list_expanded_tail() throws RecognitionException {
		Ip_community_list_expanded_tailContext _localctx = new Ip_community_list_expanded_tailContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_ip_community_list_expanded_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1716); ((Ip_community_list_expanded_tailContext)_localctx).ala = access_list_action();
			setState(1718); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1717);
				((Ip_community_list_expanded_tailContext)_localctx)._tset719 = _input.LT(1);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
					((Ip_community_list_expanded_tailContext)_localctx)._tset719 = (Token)_errHandler.recoverInline(this);
				}
				consume();
				((Ip_community_list_expanded_tailContext)_localctx).remainder.add(((Ip_community_list_expanded_tailContext)_localctx)._tset719);
				}
				}
				setState(1720); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0) );
			setState(1722); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_community_list_standard_stanzaContext extends ParserRuleContext {
		public Ip_community_list_standard_named_stanzaContext named;
		public Ip_community_list_standard_numbered_stanzaContext numbered;
		public Ip_community_list_standard_numbered_stanzaContext ip_community_list_standard_numbered_stanza() {
			return getRuleContext(Ip_community_list_standard_numbered_stanzaContext.class,0);
		}
		public Ip_community_list_standard_named_stanzaContext ip_community_list_standard_named_stanza() {
			return getRuleContext(Ip_community_list_standard_named_stanzaContext.class,0);
		}
		public Ip_community_list_standard_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_community_list_standard_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_community_list_standard_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_community_list_standard_stanza(this);
		}
	}

	public final Ip_community_list_standard_stanzaContext ip_community_list_standard_stanza() throws RecognitionException {
		Ip_community_list_standard_stanzaContext _localctx = new Ip_community_list_standard_stanzaContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_ip_community_list_standard_stanza);
		try {
			setState(1726);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1724); ((Ip_community_list_standard_stanzaContext)_localctx).named = ip_community_list_standard_named_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1725); ((Ip_community_list_standard_stanzaContext)_localctx).numbered = ip_community_list_standard_numbered_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_community_list_standard_named_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode COMMUNITY_LIST() { return getToken(CiscoGrammar.COMMUNITY_LIST, 0); }
		public Ip_community_list_standard_named_stanzaContext ip_community_list_standard_named_stanza() {
			return getRuleContext(Ip_community_list_standard_named_stanzaContext.class,0);
		}
		public TerminalNode STANDARD() { return getToken(CiscoGrammar.STANDARD, 0); }
		public Ip_community_list_standard_tailContext ip_community_list_standard_tail() {
			return getRuleContext(Ip_community_list_standard_tailContext.class,0);
		}
		public Ip_community_list_standard_named_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_community_list_standard_named_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_community_list_standard_named_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_community_list_standard_named_stanza(this);
		}
	}

	public final Ip_community_list_standard_named_stanzaContext ip_community_list_standard_named_stanza() throws RecognitionException {
		Ip_community_list_standard_named_stanzaContext _localctx = new Ip_community_list_standard_named_stanzaContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_ip_community_list_standard_named_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1728); match(IP);
			setState(1729); match(COMMUNITY_LIST);
			setState(1730); match(STANDARD);
			setState(1731); ((Ip_community_list_standard_named_stanzaContext)_localctx).name = match(VARIABLE);
			setState(1732); ip_community_list_standard_tail();

					((Ip_community_list_standard_named_stanzaContext)_localctx).again =  _input.LT(1).getType() == IP &&
					_input.LT(2).getType() == COMMUNITY_LIST &&
					_input.LT(3).getType() == STANDARD &&
					_input.LT(4).getType() == VARIABLE &&
					_input.LT(4).getText().equals((((Ip_community_list_standard_named_stanzaContext)_localctx).name!=null?((Ip_community_list_standard_named_stanzaContext)_localctx).name.getText():null));
				
			setState(1737);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(1734);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(1735); ip_community_list_standard_named_stanza();
				}
				break;
			case 2:
				{
				setState(1736);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_community_list_standard_numbered_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode COMMUNITY_LIST() { return getToken(CiscoGrammar.COMMUNITY_LIST, 0); }
		public Ip_community_list_standard_numbered_stanzaContext ip_community_list_standard_numbered_stanza() {
			return getRuleContext(Ip_community_list_standard_numbered_stanzaContext.class,0);
		}
		public TerminalNode COMMUNITY_LIST_NUM_STANDARD() { return getToken(CiscoGrammar.COMMUNITY_LIST_NUM_STANDARD, 0); }
		public Ip_community_list_standard_tailContext ip_community_list_standard_tail() {
			return getRuleContext(Ip_community_list_standard_tailContext.class,0);
		}
		public Ip_community_list_standard_numbered_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_community_list_standard_numbered_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_community_list_standard_numbered_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_community_list_standard_numbered_stanza(this);
		}
	}

	public final Ip_community_list_standard_numbered_stanzaContext ip_community_list_standard_numbered_stanza() throws RecognitionException {
		Ip_community_list_standard_numbered_stanzaContext _localctx = new Ip_community_list_standard_numbered_stanzaContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_ip_community_list_standard_numbered_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1739); match(IP);
			setState(1740); match(COMMUNITY_LIST);
			setState(1741); ((Ip_community_list_standard_numbered_stanzaContext)_localctx).name = match(COMMUNITY_LIST_NUM_STANDARD);
			setState(1742); ip_community_list_standard_tail();

					((Ip_community_list_standard_numbered_stanzaContext)_localctx).again =  _input.LT(1).getType() == IP &&
					_input.LT(2).getType() == COMMUNITY_LIST &&
					_input.LT(3).getType() == COMMUNITY_LIST_NUM_STANDARD &&
					_input.LT(3).getText().equals((((Ip_community_list_standard_numbered_stanzaContext)_localctx).name!=null?((Ip_community_list_standard_numbered_stanzaContext)_localctx).name.getText():null));
				
			setState(1747);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				setState(1744);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(1745); ip_community_list_standard_numbered_stanza();
				}
				break;
			case 2:
				{
				setState(1746);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_community_list_standard_tailContext extends ParserRuleContext {
		public Access_list_actionContext ala;
		public CommunityContext community;
		public List<CommunityContext> communities = new ArrayList<CommunityContext>();
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public List<CommunityContext> community() {
			return getRuleContexts(CommunityContext.class);
		}
		public CommunityContext community(int i) {
			return getRuleContext(CommunityContext.class,i);
		}
		public Ip_community_list_standard_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_community_list_standard_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_community_list_standard_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_community_list_standard_tail(this);
		}
	}

	public final Ip_community_list_standard_tailContext ip_community_list_standard_tail() throws RecognitionException {
		Ip_community_list_standard_tailContext _localctx = new Ip_community_list_standard_tailContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_ip_community_list_standard_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1749); ((Ip_community_list_standard_tailContext)_localctx).ala = access_list_action();
			setState(1751); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1750); ((Ip_community_list_standard_tailContext)_localctx).community = community();
				((Ip_community_list_standard_tailContext)_localctx).communities.add(((Ip_community_list_standard_tailContext)_localctx).community);
				}
				}
				setState(1753); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTERNET || _la==LOCAL_AS || _la==NO_ADVERTISE || _la==NO_EXPORT || _la==COMMUNITY_NUMBER || _la==DEC );
			setState(1755); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_prefix_list_stanzaContext extends ParserRuleContext {
		public Ip_prefix_list_named_stanzaContext named;
		public Ip_prefix_list_named_stanzaContext ip_prefix_list_named_stanza() {
			return getRuleContext(Ip_prefix_list_named_stanzaContext.class,0);
		}
		public Ip_prefix_list_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_prefix_list_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_prefix_list_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_prefix_list_stanza(this);
		}
	}

	public final Ip_prefix_list_stanzaContext ip_prefix_list_stanza() throws RecognitionException {
		Ip_prefix_list_stanzaContext _localctx = new Ip_prefix_list_stanzaContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_ip_prefix_list_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1757); ((Ip_prefix_list_stanzaContext)_localctx).named = ip_prefix_list_named_stanza();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_prefix_list_named_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public Ip_prefix_list_null_tailContext ip_prefix_list_null_tail() {
			return getRuleContext(Ip_prefix_list_null_tailContext.class,0);
		}
		public Ip_prefix_list_tailContext ip_prefix_list_tail() {
			return getRuleContext(Ip_prefix_list_tailContext.class,0);
		}
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode PREFIX_LIST() { return getToken(CiscoGrammar.PREFIX_LIST, 0); }
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public Ip_prefix_list_named_stanzaContext ip_prefix_list_named_stanza() {
			return getRuleContext(Ip_prefix_list_named_stanzaContext.class,0);
		}
		public Ip_prefix_list_named_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_prefix_list_named_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_prefix_list_named_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_prefix_list_named_stanza(this);
		}
	}

	public final Ip_prefix_list_named_stanzaContext ip_prefix_list_named_stanza() throws RecognitionException {
		Ip_prefix_list_named_stanzaContext _localctx = new Ip_prefix_list_named_stanzaContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_ip_prefix_list_named_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1759);
			_la = _input.LA(1);
			if ( !(_la==IP || _la==IPV6) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1760); match(PREFIX_LIST);
			setState(1761); ((Ip_prefix_list_named_stanzaContext)_localctx).name = match(VARIABLE);
			setState(1764);
			switch (_input.LA(1)) {
			case DENY:
			case PERMIT:
			case SEQ:
				{
				setState(1762); ip_prefix_list_tail();
				}
				break;
			case DESCRIPTION:
				{
				setState(1763); ip_prefix_list_null_tail();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}

					((Ip_prefix_list_named_stanzaContext)_localctx).again =  (_input.LT(1).getType() == IP || _input.LT(1).getType() == IPV6) &&
					_input.LT(2).getType() == PREFIX_LIST &&
					_input.LT(3).getType() == VARIABLE &&
					_input.LT(3).getText().equals((((Ip_prefix_list_named_stanzaContext)_localctx).name!=null?((Ip_prefix_list_named_stanzaContext)_localctx).name.getText():null));
				
			setState(1770);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				setState(1767);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(1768); ip_prefix_list_named_stanza();
				}
				break;
			case 2:
				{
				setState(1769);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_prefix_list_null_tailContext extends ParserRuleContext {
		public Description_lineContext description_line() {
			return getRuleContext(Description_lineContext.class,0);
		}
		public Ip_prefix_list_null_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_prefix_list_null_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_prefix_list_null_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_prefix_list_null_tail(this);
		}
	}

	public final Ip_prefix_list_null_tailContext ip_prefix_list_null_tail() throws RecognitionException {
		Ip_prefix_list_null_tailContext _localctx = new Ip_prefix_list_null_tailContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_ip_prefix_list_null_tail);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1772); description_line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_prefix_list_tailContext extends ParserRuleContext {
		public Token seqnum;
		public Access_list_actionContext action;
		public Token prefix;
		public Token ipv6_prefix;
		public Token minpl;
		public Token maxpl;
		public Token eqpl;
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public TerminalNode EQ(int i) {
			return getToken(CiscoGrammar.EQ, i);
		}
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public List<TerminalNode> LE() { return getTokens(CiscoGrammar.LE); }
		public TerminalNode IPV6_PREFIX() { return getToken(CiscoGrammar.IPV6_PREFIX, 0); }
		public TerminalNode LE(int i) {
			return getToken(CiscoGrammar.LE, i);
		}
		public List<TerminalNode> GE() { return getTokens(CiscoGrammar.GE); }
		public List<TerminalNode> EQ() { return getTokens(CiscoGrammar.EQ); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public TerminalNode SEQ() { return getToken(CiscoGrammar.SEQ, 0); }
		public TerminalNode IP_PREFIX() { return getToken(CiscoGrammar.IP_PREFIX, 0); }
		public TerminalNode GE(int i) {
			return getToken(CiscoGrammar.GE, i);
		}
		public Ip_prefix_list_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_prefix_list_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_prefix_list_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_prefix_list_tail(this);
		}
	}

	public final Ip_prefix_list_tailContext ip_prefix_list_tail() throws RecognitionException {
		Ip_prefix_list_tailContext _localctx = new Ip_prefix_list_tailContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_ip_prefix_list_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1776);
			_la = _input.LA(1);
			if (_la==SEQ) {
				{
				setState(1774); match(SEQ);
				setState(1775); ((Ip_prefix_list_tailContext)_localctx).seqnum = match(DEC);
				}
			}

			setState(1778); ((Ip_prefix_list_tailContext)_localctx).action = access_list_action();
			setState(1781);
			switch (_input.LA(1)) {
			case IP_PREFIX:
				{
				setState(1779); ((Ip_prefix_list_tailContext)_localctx).prefix = match(IP_PREFIX);
				}
				break;
			case IPV6_PREFIX:
				{
				setState(1780); ((Ip_prefix_list_tailContext)_localctx).ipv6_prefix = match(IPV6_PREFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EQ || _la==GE || _la==LE) {
				{
				setState(1789);
				switch (_input.LA(1)) {
				case GE:
					{
					{
					setState(1783); match(GE);
					setState(1784); ((Ip_prefix_list_tailContext)_localctx).minpl = match(DEC);
					}
					}
					break;
				case LE:
					{
					{
					setState(1785); match(LE);
					setState(1786); ((Ip_prefix_list_tailContext)_localctx).maxpl = match(DEC);
					}
					}
					break;
				case EQ:
					{
					{
					setState(1787); match(EQ);
					setState(1788); ((Ip_prefix_list_tailContext)_localctx).eqpl = match(DEC);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1793);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1794); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ipx_sap_access_list_numbered_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public TerminalNode ACL_NUM_IPX_SAP() { return getToken(CiscoGrammar.ACL_NUM_IPX_SAP, 0); }
		public Ipx_sap_access_list_null_tailContext ipx_sap_access_list_null_tail() {
			return getRuleContext(Ipx_sap_access_list_null_tailContext.class,0);
		}
		public Ipx_sap_access_list_numbered_stanzaContext ipx_sap_access_list_numbered_stanza() {
			return getRuleContext(Ipx_sap_access_list_numbered_stanzaContext.class,0);
		}
		public TerminalNode ACCESS_LIST() { return getToken(CiscoGrammar.ACCESS_LIST, 0); }
		public Ipx_sap_access_list_numbered_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ipx_sap_access_list_numbered_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIpx_sap_access_list_numbered_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIpx_sap_access_list_numbered_stanza(this);
		}
	}

	public final Ipx_sap_access_list_numbered_stanzaContext ipx_sap_access_list_numbered_stanza() throws RecognitionException {
		Ipx_sap_access_list_numbered_stanzaContext _localctx = new Ipx_sap_access_list_numbered_stanzaContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_ipx_sap_access_list_numbered_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1796); match(ACCESS_LIST);
			setState(1797); ((Ipx_sap_access_list_numbered_stanzaContext)_localctx).name = match(ACL_NUM_IPX_SAP);
			setState(1798); ipx_sap_access_list_null_tail();

					((Ipx_sap_access_list_numbered_stanzaContext)_localctx).again =  _input.LT(1).getType() == ACCESS_LIST &&
					_input.LT(2).getType() == ACL_NUM_IPX_SAP &&
					_input.LT(2).getText().equals((((Ipx_sap_access_list_numbered_stanzaContext)_localctx).name!=null?((Ipx_sap_access_list_numbered_stanzaContext)_localctx).name.getText():null));
				
			setState(1803);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				setState(1800);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(1801); ipx_sap_access_list_numbered_stanza();
				}
				break;
			case 2:
				{
				setState(1802);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ipx_sap_access_list_null_tailContext extends ParserRuleContext {
		public Access_list_actionContext action;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Ipx_sap_access_list_null_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ipx_sap_access_list_null_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIpx_sap_access_list_null_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIpx_sap_access_list_null_tail(this);
		}
	}

	public final Ipx_sap_access_list_null_tailContext ipx_sap_access_list_null_tail() throws RecognitionException {
		Ipx_sap_access_list_null_tailContext _localctx = new Ipx_sap_access_list_null_tailContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_ipx_sap_access_list_null_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1805); ((Ipx_sap_access_list_null_tailContext)_localctx).action = access_list_action();
			setState(1809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1806);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(1811);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1812); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ipx_sap_access_list_stanzaContext extends ParserRuleContext {
		public Ipx_sap_access_list_numbered_stanzaContext numbered;
		public Ipx_sap_access_list_numbered_stanzaContext ipx_sap_access_list_numbered_stanza() {
			return getRuleContext(Ipx_sap_access_list_numbered_stanzaContext.class,0);
		}
		public Ipx_sap_access_list_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ipx_sap_access_list_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIpx_sap_access_list_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIpx_sap_access_list_stanza(this);
		}
	}

	public final Ipx_sap_access_list_stanzaContext ipx_sap_access_list_stanza() throws RecognitionException {
		Ipx_sap_access_list_stanzaContext _localctx = new Ipx_sap_access_list_stanzaContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_ipx_sap_access_list_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1814); ((Ipx_sap_access_list_stanzaContext)_localctx).numbered = ipx_sap_access_list_numbered_stanza();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mac_access_list_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Mac_al_substanzaContext mac_al_substanza(int i) {
			return getRuleContext(Mac_al_substanzaContext.class,i);
		}
		public List<Mac_al_substanzaContext> mac_al_substanza() {
			return getRuleContexts(Mac_al_substanzaContext.class);
		}
		public TerminalNode MAC() { return getToken(CiscoGrammar.MAC, 0); }
		public Mac_access_list_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mac_access_list_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMac_access_list_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMac_access_list_stanza(this);
		}
	}

	public final Mac_access_list_stanzaContext mac_access_list_stanza() throws RecognitionException {
		Mac_access_list_stanzaContext _localctx = new Mac_access_list_stanzaContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_mac_access_list_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1816); match(MAC);
			setState(1820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1817);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(1822);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1823); match(NEWLINE);
			setState(1827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEC) {
				{
				{
				setState(1824); mac_al_substanza();
				}
				}
				setState(1829);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mac_al_substanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode REMARK() { return getToken(CiscoGrammar.REMARK, 0); }
		public TerminalNode DENY() { return getToken(CiscoGrammar.DENY, 0); }
		public TerminalNode PERMIT() { return getToken(CiscoGrammar.PERMIT, 0); }
		public Mac_al_substanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mac_al_substanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMac_al_substanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMac_al_substanza(this);
		}
	}

	public final Mac_al_substanzaContext mac_al_substanza() throws RecognitionException {
		Mac_al_substanzaContext _localctx = new Mac_al_substanzaContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_mac_al_substanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1830); match(DEC);
			setState(1831);
			_la = _input.LA(1);
			if ( !(_la==DENY || _la==PERMIT || _la==REMARK) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1832);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(1837);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1838); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nexus_access_list_null_tailContext extends ParserRuleContext {
		public Token num;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode REMARK() { return getToken(CiscoGrammar.REMARK, 0); }
		public Nexus_access_list_null_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nexus_access_list_null_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNexus_access_list_null_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNexus_access_list_null_tail(this);
		}
	}

	public final Nexus_access_list_null_tailContext nexus_access_list_null_tail() throws RecognitionException {
		Nexus_access_list_null_tailContext _localctx = new Nexus_access_list_null_tailContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_nexus_access_list_null_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1840); ((Nexus_access_list_null_tailContext)_localctx).num = match(DEC);
			setState(1841); match(REMARK);
			setState(1845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1842);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(1847);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1848); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nexus_access_list_stanzaContext extends ParserRuleContext {
		public Token name;
		public List<Nexus_access_list_statisticsContext> nexus_access_list_statistics() {
			return getRuleContexts(Nexus_access_list_statisticsContext.class);
		}
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public Nexus_access_list_null_tailContext nexus_access_list_null_tail(int i) {
			return getRuleContext(Nexus_access_list_null_tailContext.class,i);
		}
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public List<Nexus_access_list_tailContext> nexus_access_list_tail() {
			return getRuleContexts(Nexus_access_list_tailContext.class);
		}
		public Nexus_access_list_tailContext nexus_access_list_tail(int i) {
			return getRuleContext(Nexus_access_list_tailContext.class,i);
		}
		public Nexus_access_list_statisticsContext nexus_access_list_statistics(int i) {
			return getRuleContext(Nexus_access_list_statisticsContext.class,i);
		}
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public List<Nexus_access_list_null_tailContext> nexus_access_list_null_tail() {
			return getRuleContexts(Nexus_access_list_null_tailContext.class);
		}
		public TerminalNode ACCESS_LIST() { return getToken(CiscoGrammar.ACCESS_LIST, 0); }
		public Nexus_access_list_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nexus_access_list_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNexus_access_list_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNexus_access_list_stanza(this);
		}
	}

	public final Nexus_access_list_stanzaContext nexus_access_list_stanza() throws RecognitionException {
		Nexus_access_list_stanzaContext _localctx = new Nexus_access_list_stanzaContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_nexus_access_list_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1850);
			_la = _input.LA(1);
			if ( !(_la==IP || _la==IPV6) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1851); match(ACCESS_LIST);
			setState(1852);
			((Nexus_access_list_stanzaContext)_localctx).name = _input.LT(1);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
				((Nexus_access_list_stanzaContext)_localctx).name = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(1853); match(NEWLINE);
			setState(1859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==STATISTICS || _la==DEC) {
				{
				setState(1857);
				switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
				case 1:
					{
					setState(1854); nexus_access_list_tail();
					}
					break;
				case 2:
					{
					setState(1855); nexus_access_list_null_tail();
					}
					break;
				case 3:
					{
					setState(1856); nexus_access_list_statistics();
					}
					break;
				}
				}
				setState(1861);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nexus_access_list_statisticsContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode STATISTICS() { return getToken(CiscoGrammar.STATISTICS, 0); }
		public Nexus_access_list_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nexus_access_list_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNexus_access_list_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNexus_access_list_statistics(this);
		}
	}

	public final Nexus_access_list_statisticsContext nexus_access_list_statistics() throws RecognitionException {
		Nexus_access_list_statisticsContext _localctx = new Nexus_access_list_statisticsContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_nexus_access_list_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1862); match(STATISTICS);
			setState(1866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1863);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(1868);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1869); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nexus_access_list_tailContext extends ParserRuleContext {
		public Token num;
		public Extended_access_list_tailContext extended_access_list_tail() {
			return getRuleContext(Extended_access_list_tailContext.class,0);
		}
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Nexus_access_list_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nexus_access_list_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNexus_access_list_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNexus_access_list_tail(this);
		}
	}

	public final Nexus_access_list_tailContext nexus_access_list_tail() throws RecognitionException {
		Nexus_access_list_tailContext _localctx = new Nexus_access_list_tailContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_nexus_access_list_tail);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1871); ((Nexus_access_list_tailContext)_localctx).num = match(DEC);
			setState(1872); extended_access_list_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Protocol_type_code_access_list_numbered_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public Protocol_type_code_access_list_numbered_stanzaContext protocol_type_code_access_list_numbered_stanza() {
			return getRuleContext(Protocol_type_code_access_list_numbered_stanzaContext.class,0);
		}
		public TerminalNode ACL_NUM_PROTOCOL_TYPE_CODE() { return getToken(CiscoGrammar.ACL_NUM_PROTOCOL_TYPE_CODE, 0); }
		public Protocol_type_code_access_list_null_tailContext protocol_type_code_access_list_null_tail() {
			return getRuleContext(Protocol_type_code_access_list_null_tailContext.class,0);
		}
		public TerminalNode ACCESS_LIST() { return getToken(CiscoGrammar.ACCESS_LIST, 0); }
		public Protocol_type_code_access_list_numbered_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_protocol_type_code_access_list_numbered_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterProtocol_type_code_access_list_numbered_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitProtocol_type_code_access_list_numbered_stanza(this);
		}
	}

	public final Protocol_type_code_access_list_numbered_stanzaContext protocol_type_code_access_list_numbered_stanza() throws RecognitionException {
		Protocol_type_code_access_list_numbered_stanzaContext _localctx = new Protocol_type_code_access_list_numbered_stanzaContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_protocol_type_code_access_list_numbered_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1874); match(ACCESS_LIST);
			setState(1875); ((Protocol_type_code_access_list_numbered_stanzaContext)_localctx).name = match(ACL_NUM_PROTOCOL_TYPE_CODE);
			setState(1876); protocol_type_code_access_list_null_tail();

					((Protocol_type_code_access_list_numbered_stanzaContext)_localctx).again =  _input.LT(1).getType() == ACCESS_LIST &&
					_input.LT(2).getType() == ACL_NUM_PROTOCOL_TYPE_CODE &&
					_input.LT(2).getText().equals((((Protocol_type_code_access_list_numbered_stanzaContext)_localctx).name!=null?((Protocol_type_code_access_list_numbered_stanzaContext)_localctx).name.getText():null));
				
			setState(1881);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1878);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(1879); protocol_type_code_access_list_numbered_stanza();
				}
				break;
			case 2:
				{
				setState(1880);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Protocol_type_code_access_list_null_tailContext extends ParserRuleContext {
		public Access_list_actionContext action;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Protocol_type_code_access_list_null_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_protocol_type_code_access_list_null_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterProtocol_type_code_access_list_null_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitProtocol_type_code_access_list_null_tail(this);
		}
	}

	public final Protocol_type_code_access_list_null_tailContext protocol_type_code_access_list_null_tail() throws RecognitionException {
		Protocol_type_code_access_list_null_tailContext _localctx = new Protocol_type_code_access_list_null_tailContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_protocol_type_code_access_list_null_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1883); ((Protocol_type_code_access_list_null_tailContext)_localctx).action = access_list_action();
			setState(1887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(1884);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(1889);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1890); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Protocol_type_code_access_list_stanzaContext extends ParserRuleContext {
		public Protocol_type_code_access_list_numbered_stanzaContext numbered;
		public Protocol_type_code_access_list_numbered_stanzaContext protocol_type_code_access_list_numbered_stanza() {
			return getRuleContext(Protocol_type_code_access_list_numbered_stanzaContext.class,0);
		}
		public Protocol_type_code_access_list_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_protocol_type_code_access_list_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterProtocol_type_code_access_list_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitProtocol_type_code_access_list_stanza(this);
		}
	}

	public final Protocol_type_code_access_list_stanzaContext protocol_type_code_access_list_stanza() throws RecognitionException {
		Protocol_type_code_access_list_stanzaContext _localctx = new Protocol_type_code_access_list_stanzaContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_protocol_type_code_access_list_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1892); ((Protocol_type_code_access_list_stanzaContext)_localctx).numbered = protocol_type_code_access_list_numbered_stanza();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_access_list_null_tailContext extends ParserRuleContext {
		public Token remark;
		public Access_list_actionContext ala;
		public Token ipr;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode M_REMARK_REMARK() { return getToken(CiscoGrammar.M_REMARK_REMARK, 0); }
		public TerminalNode LOG() { return getToken(CiscoGrammar.LOG, 0); }
		public TerminalNode REMARK() { return getToken(CiscoGrammar.REMARK, 0); }
		public Standard_access_list_null_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_access_list_null_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterStandard_access_list_null_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitStandard_access_list_null_tail(this);
		}
	}

	public final Standard_access_list_null_tailContext standard_access_list_null_tail() throws RecognitionException {
		Standard_access_list_null_tailContext _localctx = new Standard_access_list_null_tailContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_standard_access_list_null_tail);
		int _la;
		try {
			setState(1904);
			switch (_input.LA(1)) {
			case REMARK:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1894); match(REMARK);
				setState(1895); ((Standard_access_list_null_tailContext)_localctx).remark = match(M_REMARK_REMARK);
				setState(1896); match(NEWLINE);
				}
				}
				break;
			case DENY:
			case PERMIT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1897); ((Standard_access_list_null_tailContext)_localctx).ala = access_list_action();
				setState(1898); ((Standard_access_list_null_tailContext)_localctx).ipr = match(IP_ADDRESS);
				setState(1900);
				_la = _input.LA(1);
				if (_la==LOG) {
					{
					setState(1899); match(LOG);
					}
				}

				setState(1902); match(NEWLINE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_access_list_named_stanzaContext extends ParserRuleContext {
		public Token name;
		public Standard_access_list_tailContext standard_access_list_tail(int i) {
			return getRuleContext(Standard_access_list_tailContext.class,i);
		}
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public List<Standard_access_list_null_tailContext> standard_access_list_null_tail() {
			return getRuleContexts(Standard_access_list_null_tailContext.class);
		}
		public Standard_access_list_null_tailContext standard_access_list_null_tail(int i) {
			return getRuleContext(Standard_access_list_null_tailContext.class,i);
		}
		public List<Standard_access_list_tailContext> standard_access_list_tail() {
			return getRuleContexts(Standard_access_list_tailContext.class);
		}
		public TerminalNode STANDARD() { return getToken(CiscoGrammar.STANDARD, 0); }
		public TerminalNode ACCESS_LIST() { return getToken(CiscoGrammar.ACCESS_LIST, 0); }
		public Standard_access_list_named_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_access_list_named_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterStandard_access_list_named_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitStandard_access_list_named_stanza(this);
		}
	}

	public final Standard_access_list_named_stanzaContext standard_access_list_named_stanza() throws RecognitionException {
		Standard_access_list_named_stanzaContext _localctx = new Standard_access_list_named_stanzaContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_standard_access_list_named_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1906); match(IP);
			setState(1907); match(ACCESS_LIST);
			setState(1908); match(STANDARD);
			setState(1909);
			((Standard_access_list_named_stanzaContext)_localctx).name = _input.LT(1);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
				((Standard_access_list_named_stanzaContext)_localctx).name = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(1910); match(NEWLINE);
			setState(1915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DENY || _la==PERMIT || _la==REMARK) {
				{
				setState(1913);
				switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
				case 1:
					{
					setState(1911); standard_access_list_tail();
					}
					break;
				case 2:
					{
					setState(1912); standard_access_list_null_tail();
					}
					break;
				}
				}
				setState(1917);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_access_list_numbered_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public Standard_access_list_null_tailContext standard_access_list_null_tail() {
			return getRuleContext(Standard_access_list_null_tailContext.class,0);
		}
		public TerminalNode ACL_NUM_STANDARD() { return getToken(CiscoGrammar.ACL_NUM_STANDARD, 0); }
		public Standard_access_list_numbered_stanzaContext standard_access_list_numbered_stanza() {
			return getRuleContext(Standard_access_list_numbered_stanzaContext.class,0);
		}
		public Standard_access_list_tailContext standard_access_list_tail() {
			return getRuleContext(Standard_access_list_tailContext.class,0);
		}
		public TerminalNode ACCESS_LIST() { return getToken(CiscoGrammar.ACCESS_LIST, 0); }
		public Standard_access_list_numbered_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_access_list_numbered_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterStandard_access_list_numbered_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitStandard_access_list_numbered_stanza(this);
		}
	}

	public final Standard_access_list_numbered_stanzaContext standard_access_list_numbered_stanza() throws RecognitionException {
		Standard_access_list_numbered_stanzaContext _localctx = new Standard_access_list_numbered_stanzaContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_standard_access_list_numbered_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1918); match(ACCESS_LIST);
			setState(1919); ((Standard_access_list_numbered_stanzaContext)_localctx).name = match(ACL_NUM_STANDARD);
			setState(1922);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				setState(1920); standard_access_list_tail();
				}
				break;
			case 2:
				{
				setState(1921); standard_access_list_null_tail();
				}
				break;
			}

					((Standard_access_list_numbered_stanzaContext)_localctx).again =  _input.LT(1).getType() == ACCESS_LIST &&
					_input.LT(2).getType() == ACL_NUM_STANDARD &&
					_input.LT(2).getText().equals((((Standard_access_list_numbered_stanzaContext)_localctx).name!=null?((Standard_access_list_numbered_stanzaContext)_localctx).name.getText():null));
				
			setState(1928);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				setState(1925);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(1926); standard_access_list_numbered_stanza();
				}
				break;
			case 2:
				{
				setState(1927);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_access_list_stanzaContext extends ParserRuleContext {
		public Standard_access_list_named_stanzaContext named;
		public Standard_access_list_numbered_stanzaContext numbered;
		public Standard_access_list_named_stanzaContext standard_access_list_named_stanza() {
			return getRuleContext(Standard_access_list_named_stanzaContext.class,0);
		}
		public Standard_access_list_numbered_stanzaContext standard_access_list_numbered_stanza() {
			return getRuleContext(Standard_access_list_numbered_stanzaContext.class,0);
		}
		public Standard_access_list_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_access_list_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterStandard_access_list_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitStandard_access_list_stanza(this);
		}
	}

	public final Standard_access_list_stanzaContext standard_access_list_stanza() throws RecognitionException {
		Standard_access_list_stanzaContext _localctx = new Standard_access_list_stanzaContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_standard_access_list_stanza);
		try {
			setState(1932);
			switch (_input.LA(1)) {
			case IP:
				enterOuterAlt(_localctx, 1);
				{
				setState(1930); ((Standard_access_list_stanzaContext)_localctx).named = standard_access_list_named_stanza();
				}
				break;
			case ACCESS_LIST:
				enterOuterAlt(_localctx, 2);
				{
				setState(1931); ((Standard_access_list_stanzaContext)_localctx).numbered = standard_access_list_numbered_stanza();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_access_list_tailContext extends ParserRuleContext {
		public Access_list_actionContext ala;
		public Access_list_ip_rangeContext ipr;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public Access_list_ip_rangeContext access_list_ip_range() {
			return getRuleContext(Access_list_ip_rangeContext.class,0);
		}
		public TerminalNode LOG() { return getToken(CiscoGrammar.LOG, 0); }
		public Standard_access_list_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_access_list_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterStandard_access_list_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitStandard_access_list_tail(this);
		}
	}

	public final Standard_access_list_tailContext standard_access_list_tail() throws RecognitionException {
		Standard_access_list_tailContext _localctx = new Standard_access_list_tailContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_standard_access_list_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1934); ((Standard_access_list_tailContext)_localctx).ala = access_list_action();
			setState(1935); ((Standard_access_list_tailContext)_localctx).ipr = access_list_ip_range();
			setState(1937);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(1936); match(LOG);
				}
			}

			setState(1939); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Address_family_rb_stanzaContext extends ParserRuleContext {
		public Token vrf_name;
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode UNICAST() { return getToken(CiscoGrammar.UNICAST, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode VPNV4() { return getToken(CiscoGrammar.VPNV4, 0); }
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode IPV4() { return getToken(CiscoGrammar.IPV4, 0); }
		public TerminalNode EXIT_ADDRESS_FAMILY() { return getToken(CiscoGrammar.EXIT_ADDRESS_FAMILY, 0); }
		public TerminalNode MULTICAST() { return getToken(CiscoGrammar.MULTICAST, 0); }
		public TerminalNode VPNV6() { return getToken(CiscoGrammar.VPNV6, 0); }
		public TerminalNode VRF() { return getToken(CiscoGrammar.VRF, 0); }
		public Address_family_rb_stanza_tailContext address_family_rb_stanza_tail() {
			return getRuleContext(Address_family_rb_stanza_tailContext.class,0);
		}
		public TerminalNode ADDRESS_FAMILY() { return getToken(CiscoGrammar.ADDRESS_FAMILY, 0); }
		public Address_family_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_address_family_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAddress_family_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAddress_family_rb_stanza(this);
		}
	}

	public final Address_family_rb_stanzaContext address_family_rb_stanza() throws RecognitionException {
		Address_family_rb_stanzaContext _localctx = new Address_family_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_address_family_rb_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1941); match(ADDRESS_FAMILY);
			setState(1942);
			_la = _input.LA(1);
			if ( !(_la==IPV4 || _la==IPV6 || _la==VPNV4 || _la==VPNV6) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1944);
			_la = _input.LA(1);
			if (_la==MULTICAST || _la==UNICAST) {
				{
				setState(1943);
				_la = _input.LA(1);
				if ( !(_la==MULTICAST || _la==UNICAST) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(1948);
			_la = _input.LA(1);
			if (_la==VRF) {
				{
				setState(1946); match(VRF);
				setState(1947); ((Address_family_rb_stanzaContext)_localctx).vrf_name = match(VARIABLE);
				}
			}

			setState(1950); match(NEWLINE);
			setState(1951); address_family_rb_stanza_tail();
			setState(1954);
			_la = _input.LA(1);
			if (_la==EXIT_ADDRESS_FAMILY) {
				{
				setState(1952); match(EXIT_ADDRESS_FAMILY);
				setState(1953); match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Address_family_rb_stanza_tailContext extends ParserRuleContext {
		public Af_stanzaContext af_stanza;
		public List<Af_stanzaContext> afsl = new ArrayList<Af_stanzaContext>();
		public Af_stanzaContext af_stanza(int i) {
			return getRuleContext(Af_stanzaContext.class,i);
		}
		public List<Af_stanzaContext> af_stanza() {
			return getRuleContexts(Af_stanzaContext.class);
		}
		public Address_family_rb_stanza_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_address_family_rb_stanza_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAddress_family_rb_stanza_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAddress_family_rb_stanza_tail(this);
		}
	}

	public final Address_family_rb_stanza_tailContext address_family_rb_stanza_tail() throws RecognitionException {
		Address_family_rb_stanza_tailContext _localctx = new Address_family_rb_stanza_tailContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_address_family_rb_stanza_tail);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1959);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,118,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1956); ((Address_family_rb_stanza_tailContext)_localctx).af_stanza = af_stanza();
					((Address_family_rb_stanza_tailContext)_localctx).afsl.add(((Address_family_rb_stanza_tailContext)_localctx).af_stanza);
					}
					} 
				}
				setState(1961);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,118,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Af_vrf_rb_substanzaContext extends ParserRuleContext {
		public Address_family_rb_stanzaContext address_family_rb_stanza() {
			return getRuleContext(Address_family_rb_stanzaContext.class,0);
		}
		public Af_vrf_rb_substanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_af_vrf_rb_substanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAf_vrf_rb_substanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAf_vrf_rb_substanza(this);
		}
	}

	public final Af_vrf_rb_substanzaContext af_vrf_rb_substanza() throws RecognitionException {
		Af_vrf_rb_substanzaContext _localctx = new Af_vrf_rb_substanzaContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_af_vrf_rb_substanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1962); address_family_rb_stanza();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Af_stanzaContext extends ParserRuleContext {
		public Network6_af_stanzaContext network6_af_stanza() {
			return getRuleContext(Network6_af_stanzaContext.class,0);
		}
		public Neighbor_description_af_stanzaContext neighbor_description_af_stanza() {
			return getRuleContext(Neighbor_description_af_stanzaContext.class,0);
		}
		public Neighbor_default_originate_af_stanzaContext neighbor_default_originate_af_stanza() {
			return getRuleContext(Neighbor_default_originate_af_stanzaContext.class,0);
		}
		public Redistribute_connected_af_stanzaContext redistribute_connected_af_stanza() {
			return getRuleContext(Redistribute_connected_af_stanzaContext.class,0);
		}
		public Network_af_stanzaContext network_af_stanza() {
			return getRuleContext(Network_af_stanzaContext.class,0);
		}
		public Neighbor_remote_as_af_stanzaContext neighbor_remote_as_af_stanza() {
			return getRuleContext(Neighbor_remote_as_af_stanzaContext.class,0);
		}
		public Neighbor_route_map_af_stanzaContext neighbor_route_map_af_stanza() {
			return getRuleContext(Neighbor_route_map_af_stanzaContext.class,0);
		}
		public Default_metric_af_stanzaContext default_metric_af_stanza() {
			return getRuleContext(Default_metric_af_stanzaContext.class,0);
		}
		public Neighbor_activate_af_stanzaContext neighbor_activate_af_stanza() {
			return getRuleContext(Neighbor_activate_af_stanzaContext.class,0);
		}
		public Neighbor_next_hop_self_af_stanzaContext neighbor_next_hop_self_af_stanza() {
			return getRuleContext(Neighbor_next_hop_self_af_stanzaContext.class,0);
		}
		public Neighbor_shutdown_af_stanzaContext neighbor_shutdown_af_stanza() {
			return getRuleContext(Neighbor_shutdown_af_stanzaContext.class,0);
		}
		public Neighbor_send_community_af_stanzaContext neighbor_send_community_af_stanza() {
			return getRuleContext(Neighbor_send_community_af_stanzaContext.class,0);
		}
		public Neighbor_filter_list_af_stanzaContext neighbor_filter_list_af_stanza() {
			return getRuleContext(Neighbor_filter_list_af_stanzaContext.class,0);
		}
		public Neighbor_distribute_list_af_stanzaContext neighbor_distribute_list_af_stanza() {
			return getRuleContext(Neighbor_distribute_list_af_stanzaContext.class,0);
		}
		public Aggregate_address_af_stanzaContext aggregate_address_af_stanza() {
			return getRuleContext(Aggregate_address_af_stanzaContext.class,0);
		}
		public Redistribute_aggregate_af_stanzaContext redistribute_aggregate_af_stanza() {
			return getRuleContext(Redistribute_aggregate_af_stanzaContext.class,0);
		}
		public Neighbor_route_reflector_client_af_stanzaContext neighbor_route_reflector_client_af_stanza() {
			return getRuleContext(Neighbor_route_reflector_client_af_stanzaContext.class,0);
		}
		public Neighbor_ebgp_multihop_af_stanzaContext neighbor_ebgp_multihop_af_stanza() {
			return getRuleContext(Neighbor_ebgp_multihop_af_stanzaContext.class,0);
		}
		public Neighbor_peer_group_assignment_af_stanzaContext neighbor_peer_group_assignment_af_stanza() {
			return getRuleContext(Neighbor_peer_group_assignment_af_stanzaContext.class,0);
		}
		public Neighbor_peer_group_creation_af_stanzaContext neighbor_peer_group_creation_af_stanza() {
			return getRuleContext(Neighbor_peer_group_creation_af_stanzaContext.class,0);
		}
		public Redistribute_static_af_stanzaContext redistribute_static_af_stanza() {
			return getRuleContext(Redistribute_static_af_stanzaContext.class,0);
		}
		public Null_af_stanzaContext null_af_stanza() {
			return getRuleContext(Null_af_stanzaContext.class,0);
		}
		public Neighbor_prefix_list_af_stanzaContext neighbor_prefix_list_af_stanza() {
			return getRuleContext(Neighbor_prefix_list_af_stanzaContext.class,0);
		}
		public Af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAf_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAf_stanza(this);
		}
	}

	public final Af_stanzaContext af_stanza() throws RecognitionException {
		Af_stanzaContext _localctx = new Af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_af_stanza);
		try {
			setState(1987);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1964); aggregate_address_af_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1965); default_metric_af_stanza();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1966); neighbor_activate_af_stanza();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1967); neighbor_default_originate_af_stanza();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1968); neighbor_description_af_stanza();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1969); neighbor_distribute_list_af_stanza();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1970); neighbor_ebgp_multihop_af_stanza();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1971); neighbor_filter_list_af_stanza();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1972); neighbor_next_hop_self_af_stanza();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1973); neighbor_peer_group_assignment_af_stanza();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1974); neighbor_peer_group_creation_af_stanza();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1975); neighbor_prefix_list_af_stanza();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1976); neighbor_remote_as_af_stanza();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1977); neighbor_route_map_af_stanza();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1978); neighbor_route_reflector_client_af_stanza();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1979); neighbor_send_community_af_stanza();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1980); neighbor_shutdown_af_stanza();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1981); network_af_stanza();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1982); network6_af_stanza();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1983); null_af_stanza();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1984); redistribute_aggregate_af_stanza();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1985); redistribute_connected_af_stanza();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1986); redistribute_static_af_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_address_af_stanzaContext extends ParserRuleContext {
		public Aggregate_address_tail_bgpContext aggregate_address_tail_bgp() {
			return getRuleContext(Aggregate_address_tail_bgpContext.class,0);
		}
		public Aggregate_address_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_address_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAggregate_address_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAggregate_address_af_stanza(this);
		}
	}

	public final Aggregate_address_af_stanzaContext aggregate_address_af_stanza() throws RecognitionException {
		Aggregate_address_af_stanzaContext _localctx = new Aggregate_address_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_aggregate_address_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1989); aggregate_address_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_address_rb_stanzaContext extends ParserRuleContext {
		public Aggregate_address_tail_bgpContext aggregate_address_tail_bgp() {
			return getRuleContext(Aggregate_address_tail_bgpContext.class,0);
		}
		public Aggregate_address_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_address_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAggregate_address_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAggregate_address_rb_stanza(this);
		}
	}

	public final Aggregate_address_rb_stanzaContext aggregate_address_rb_stanza() throws RecognitionException {
		Aggregate_address_rb_stanzaContext _localctx = new Aggregate_address_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_aggregate_address_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1991); aggregate_address_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_address_tail_bgpContext extends ParserRuleContext {
		public Token network;
		public Token subnet;
		public Token prefix;
		public Token ipv6_prefix;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public List<TerminalNode> IP_ADDRESS() { return getTokens(CiscoGrammar.IP_ADDRESS); }
		public TerminalNode IP_ADDRESS(int i) {
			return getToken(CiscoGrammar.IP_ADDRESS, i);
		}
		public TerminalNode IPV6_PREFIX() { return getToken(CiscoGrammar.IPV6_PREFIX, 0); }
		public TerminalNode AGGREGATE_ADDRESS() { return getToken(CiscoGrammar.AGGREGATE_ADDRESS, 0); }
		public TerminalNode IP_PREFIX() { return getToken(CiscoGrammar.IP_PREFIX, 0); }
		public TerminalNode SUMMARY_ONLY() { return getToken(CiscoGrammar.SUMMARY_ONLY, 0); }
		public Aggregate_address_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_address_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAggregate_address_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAggregate_address_tail_bgp(this);
		}
	}

	public final Aggregate_address_tail_bgpContext aggregate_address_tail_bgp() throws RecognitionException {
		Aggregate_address_tail_bgpContext _localctx = new Aggregate_address_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_aggregate_address_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1993); match(AGGREGATE_ADDRESS);
			setState(1998);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				{
				{
				setState(1994); ((Aggregate_address_tail_bgpContext)_localctx).network = match(IP_ADDRESS);
				setState(1995); ((Aggregate_address_tail_bgpContext)_localctx).subnet = match(IP_ADDRESS);
				}
				}
				break;
			case IP_PREFIX:
				{
				setState(1996); ((Aggregate_address_tail_bgpContext)_localctx).prefix = match(IP_PREFIX);
				}
				break;
			case IPV6_PREFIX:
				{
				setState(1997); ((Aggregate_address_tail_bgpContext)_localctx).ipv6_prefix = match(IPV6_PREFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2001);
			_la = _input.LA(1);
			if (_la==SUMMARY_ONLY) {
				{
				setState(2000); match(SUMMARY_ONLY);
				}
			}

			setState(2003); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auto_summary_af_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public TerminalNode AUTO_SUMMARY() { return getToken(CiscoGrammar.AUTO_SUMMARY, 0); }
		public Auto_summary_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_summary_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterAuto_summary_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitAuto_summary_af_stanza(this);
		}
	}

	public final Auto_summary_af_stanzaContext auto_summary_af_stanza() throws RecognitionException {
		Auto_summary_af_stanzaContext _localctx = new Auto_summary_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_auto_summary_af_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2006);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(2005); match(NO);
				}
			}

			setState(2008); match(AUTO_SUMMARY);
			setState(2009); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_id_bgp_rb_stanzaContext extends ParserRuleContext {
		public Token id;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode BGP() { return getToken(CiscoGrammar.BGP, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode CLUSTER_ID() { return getToken(CiscoGrammar.CLUSTER_ID, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Cluster_id_bgp_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_id_bgp_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterCluster_id_bgp_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitCluster_id_bgp_rb_stanza(this);
		}
	}

	public final Cluster_id_bgp_rb_stanzaContext cluster_id_bgp_rb_stanza() throws RecognitionException {
		Cluster_id_bgp_rb_stanzaContext _localctx = new Cluster_id_bgp_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_cluster_id_bgp_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2011); match(BGP);
			setState(2012); match(CLUSTER_ID);
			setState(2015);
			switch (_input.LA(1)) {
			case DEC:
				{
				setState(2013); ((Cluster_id_bgp_rb_stanzaContext)_localctx).id = match(DEC);
				}
				break;
			case IP_ADDRESS:
				{
				setState(2014); ((Cluster_id_bgp_rb_stanzaContext)_localctx).id = match(IP_ADDRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2017); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_metric_af_stanzaContext extends ParserRuleContext {
		public Default_metric_tail_bgpContext default_metric_tail_bgp() {
			return getRuleContext(Default_metric_tail_bgpContext.class,0);
		}
		public Default_metric_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_metric_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterDefault_metric_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitDefault_metric_af_stanza(this);
		}
	}

	public final Default_metric_af_stanzaContext default_metric_af_stanza() throws RecognitionException {
		Default_metric_af_stanzaContext _localctx = new Default_metric_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_default_metric_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2019); default_metric_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_metric_rb_stanzaContext extends ParserRuleContext {
		public Default_metric_tail_bgpContext default_metric_tail_bgp() {
			return getRuleContext(Default_metric_tail_bgpContext.class,0);
		}
		public Default_metric_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_metric_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterDefault_metric_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitDefault_metric_rb_stanza(this);
		}
	}

	public final Default_metric_rb_stanzaContext default_metric_rb_stanza() throws RecognitionException {
		Default_metric_rb_stanzaContext _localctx = new Default_metric_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_default_metric_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2021); default_metric_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_metric_tail_bgpContext extends ParserRuleContext {
		public Token metric;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode DEFAULT_METRIC() { return getToken(CiscoGrammar.DEFAULT_METRIC, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Default_metric_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_metric_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterDefault_metric_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitDefault_metric_tail_bgp(this);
		}
	}

	public final Default_metric_tail_bgpContext default_metric_tail_bgp() throws RecognitionException {
		Default_metric_tail_bgpContext _localctx = new Default_metric_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_default_metric_tail_bgp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2023); match(DEFAULT_METRIC);
			setState(2024); ((Default_metric_tail_bgpContext)_localctx).metric = match(DEC);
			setState(2025); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_activate_af_stanzaContext extends ParserRuleContext {
		public Token neighbor;
		public Token neighbor6;
		public Token pg;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode IPV6_ADDRESS() { return getToken(CiscoGrammar.IPV6_ADDRESS, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode ACTIVATE() { return getToken(CiscoGrammar.ACTIVATE, 0); }
		public Neighbor_activate_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_activate_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_activate_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_activate_af_stanza(this);
		}
	}

	public final Neighbor_activate_af_stanzaContext neighbor_activate_af_stanza() throws RecognitionException {
		Neighbor_activate_af_stanzaContext _localctx = new Neighbor_activate_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_neighbor_activate_af_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2027); match(NEIGHBOR);
			setState(2031);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				{
				setState(2028); ((Neighbor_activate_af_stanzaContext)_localctx).neighbor = match(IP_ADDRESS);
				}
				break;
			case IPV6_ADDRESS:
				{
				setState(2029); ((Neighbor_activate_af_stanzaContext)_localctx).neighbor6 = match(IPV6_ADDRESS);
				}
				break;
			case ACL_NUM_APPLETALK:
			case ACL_NUM_EXTENDED:
			case ACL_NUM_EXTENDED_IPX:
			case ACL_NUM_IPX:
			case ACL_NUM_IPX_SAP:
			case ACL_NUM_OTHER:
			case ACL_NUM_PROTOCOL_TYPE_CODE:
			case ACL_NUM_STANDARD:
			case COMMUNITY_LIST_NUM_EXPANDED:
			case COMMUNITY_LIST_NUM_STANDARD:
			case AAA:
			case AAA_SERVER:
			case ABSOLUTE_TIMEOUT:
			case ACCEPT_DIALIN:
			case ACCESS:
			case ACCESS_CLASS:
			case ACCESS_GROUP:
			case ACCESS_LIST:
			case ACCESS_LOG:
			case ACCOUNTING:
			case ACCOUNTING_LIST:
			case ACCOUNTING_PORT:
			case ACCOUNTING_SERVER_GROUP:
			case ACTION:
			case ACTIVATE:
			case ACTIVATION_CHARACTER:
			case ACTIVE:
			case ADD:
			case ADDITIVE:
			case ADDRESS:
			case ADDRESS_FAMILY:
			case ADDRESS_POOL:
			case ADMINISTRATIVE_WEIGHT:
			case ADMISSION:
			case AES128_SHA1:
			case AES256_SHA1:
			case AESA:
			case AGGREGATE:
			case AGGREGATE_ADDRESS:
			case AHP:
			case ALERT_GROUP:
			case ALIAS:
			case ALLOWED:
			case ALLOWAS_IN:
			case ALWAYS:
			case ALWAYS_COMPARE_MED:
			case ANY:
			case ANYCONNECT:
			case ANYCONNECT_ESSENTIALS:
			case AP:
			case AQM_REGISTER_FNF:
			case ARCHIVE:
			case AREA:
			case ARP:
			case AS_PATH:
			case ASA:
			case ASDM:
			case ASSOCIATE:
			case ASSOCIATION:
			case ASYNC:
			case ASYNC_BOOTP:
			case ATM:
			case AUDIT:
			case AUTH_PROXY:
			case AUTHENTICATION:
			case AUTHENTICATION_PORT:
			case AUTHENTICATION_SERVER_GROUP:
			case AUTHORIZATION:
			case AUTHORIZATION_REQUIRED:
			case AUTHORIZATION_SERVER_GROUP:
			case AUTO:
			case AUTO_COST:
			case AUTOSELECT:
			case AUTO_SUMMARY:
			case AUTO_SYNC:
			case BACKGROUND_ROUTES_ENABLE:
			case BACKUPCRF:
			case BANDWIDTH:
			case BANNER:
			case BESTPATH:
			case BFD:
			case BGP:
			case BGP_COMMUNITY:
			case BIND:
			case BOOT:
			case BOOT_END_MARKER:
			case BOOT_START_MARKER:
			case BOOTP:
			case BOOTPC:
			case BOOTPS:
			case BOTH:
			case BRIDGE:
			case BROADCAST:
			case CA:
			case CABLE_RANGE:
			case CABLELENGTH:
			case CACHE:
			case CACHE_TIMEOUT:
			case CALL:
			case CALL_HOME:
			case CALLER_ID:
			case CARD:
			case CAS_CUSTOM:
			case CCM:
			case CCM_GROUP:
			case CCM_MANAGER:
			case CDP:
			case CEF:
			case CERTIFICATE:
			case CFS:
			case CGMP:
			case CHANNEL:
			case CHANNEL_GROUP:
			case CHANNEL_PROTOCOL:
			case CHANNELIZED:
			case CHAT_SCRIPT:
			case CIPC:
			case CLASS:
			case CLASSLESS:
			case CLASS_MAP:
			case CLI:
			case CLNS:
			case CLOCK:
			case CLUSTER:
			case CLUSTER_ID:
			case CMD:
			case CNS:
			case CODEC:
			case COLLECT:
			case COMM_LIST:
			case COMMANDER_ADDRESS:
			case COMMUNITY:
			case COMMUNITY_LIST:
			case CONFIG_REGISTER:
			case CONFIGURATION:
			case CONFORM_ACTION:
			case CONNECTED:
			case CONSOLE:
			case CONTACT_EMAIL_ADDR:
			case CONTEXT:
			case CONTROL_PLANE:
			case CONTROLLER:
			case COST:
			case COUNTER:
			case CPTONE:
			case CRYPTO:
			case CRL:
			case CTL_FILE:
			case CTS:
			case DAMPENING:
			case DATABITS:
			case DBL:
			case DEAD_INTERVAL:
			case DEFAULT:
			case DEFAULT_ACTION:
			case DEFAULT_DOMAIN:
			case DEFAULT_GATEWAY:
			case DEFAULT_GROUP_POLICY:
			case DEFAULT_INFORMATION:
			case DEFAULT_INFORMATION_ORIGINATE:
			case DEFAULT_METRIC:
			case DEFAULT_NETWORK:
			case DEFAULT_ORIGINATE:
			case DEFAULT_ROUTER:
			case DEFINITION:
			case DELAY:
			case DELETE:
			case DENY:
			case DES:
			case DES_SHA1:
			case DESCRIPTION:
			case DESIRABLE:
			case DESTINATION:
			case DETERMINISTIC_MED:
			case DEVICE:
			case DEVICE_SENSOR:
			case DF:
			case DHCP:
			case DHCPD:
			case DIAGNOSTIC:
			case DIAL_PEER:
			case DIALER_LIST:
			case DIRECT:
			case DIRECTED_BROADCAST:
			case DISABLE:
			case DISTANCE:
			case DISTRIBUTE_LIST:
			case DNS:
			case DNS_GUARD:
			case DNS_SERVER:
			case DOMAIN:
			case DOMAIN_LIST:
			case DOMAIN_LOOKUP:
			case DOMAIN_NAME:
			case DONT_CAPABILITY_NEGOTIATE:
			case DOT11:
			case DOT1Q:
			case DROP:
			case DS0_GROUP:
			case DSP:
			case DSPFARM:
			case DSS:
			case DSU:
			case DUPLEX:
			case DVMRP:
			case DYNAMIC:
			case DYNAMIC_ACCESS_POLICY_RECORD:
			case DYNAMIC_MAP:
			case EBGP_MULTIHOP:
			case ECHO:
			case ECHO_REPLY:
			case ECHO_REQUEST:
			case EGP:
			case EIGRP:
			case EMPTY:
			case ENABLE:
			case ENCAPSULATION:
			case ENCR:
			case ENCRYPTION:
			case END:
			case ENGINEID:
			case ENROLLMENT:
			case ENVIRONMENT:
			case EOF_LITERAL:
			case EQ:
			case ERRDISABLE:
			case ESCAPE_CHARACTER:
			case ESP:
			case ESTABLISHED:
			case EVALUATE:
			case EVENT:
			case EVENT_HANDLER:
			case EXCEED_ACTION:
			case EXCEPTION:
			case EXEC:
			case EXEC_TIMEOUT:
			case EXECUTE:
			case EXIT_ADDRESS_FAMILY:
			case EXPORT:
			case EXPORT_PROTOCOL:
			case EXPORTER:
			case EXPANDED:
			case EXTCOMM_LIST:
			case EXTCOMMUNITY_LIST:
			case EXTENDED:
			case FABRIC:
			case FACILITY_ALARM:
			case FAILOVER:
			case FAIR_QUEUE:
			case FALL_OVER:
			case FALLBACK_DN:
			case FEATURE:
			case FILE:
			case FILE_BROWSING:
			case FILE_ENTRY:
			case FILTER_LIST:
			case FIREWALL:
			case FINGER:
			case FIRMWARE:
			case FLOW:
			case FLOW_CACHE:
			case FLOW_EXPORT:
			case FLOW_TOP_TALKERS:
			case FLOWCONTROL:
			case FLUSH_AT_ACTIVATION:
			case FORWARD_PROTOCOL:
			case FQDN:
			case FRAGMENTS:
			case FRAME_RELAY:
			case FRAMING:
			case FREQUENCY:
			case FTP:
			case FTP_DATA:
			case FTP_SERVER:
			case FULL_DUPLEX:
			case GATEKEEPER:
			case GATEWAY:
			case GE:
			case GRACEFUL_RESTART:
			case GRATUITOUS_ARPS:
			case GRE:
			case GROUP:
			case GROUP_ALIAS:
			case GROUP_OBJECT:
			case GROUP_POLICY:
			case GROUP_RANGE:
			case GROUP_URL:
			case GT:
			case HALF_DUPLEX:
			case HARDWARE:
			case HASH:
			case HELLO_MULTIPLIER:
			case HELPER_ADDRESS:
			case HIDDEN:
			case HIDDEN_SHARES:
			case HIDEKEYS:
			case HIGH_AVAILABILITY:
			case HISTORY:
			case HOLD_QUEUE:
			case HOST:
			case HOST_ROUTING:
			case HOST_UNKNOWN:
			case HOST_UNREACHABLE:
			case HOSTNAME:
			case HSRP:
			case HTTP:
			case HW_MODULE:
			case ICMP:
			case ICMP_ECHO:
			case ICMP_OBJECT:
			case IDENT:
			case IDENTITY:
			case IDLE_TIMEOUT:
			case IGMP:
			case IGP:
			case IKEV1:
			case ILMI_KEEPALIVE:
			case IN:
			case INACTIVITY_TIMER:
			case INBOUND:
			case INCOMPLETE:
			case INHERIT:
			case INSPECT:
			case INSTANCE:
			case INTERFACE:
			case INTERNAL:
			case INTERNET:
			case INVALID_SPI_RECOVERY:
			case IP:
			case IP_ADDRESS_LITERAL:
			case IPC:
			case IPINIP:
			case IPSEC:
			case IPSEC_UDP:
			case IPV4:
			case IPV6:
			case IPV6_ADDRESS_POOL:
			case IPX:
			case IRDP:
			case ISAKMP:
			case ISDN:
			case ISL:
			case KEEPALIVE:
			case KEEPALIVE_ENABLE:
			case KEEPOUT:
			case KEY:
			case KEYPAIR:
			case KEYRING:
			case LACP:
			case LANE:
			case LAPB:
			case LAST_AS:
			case LE:
			case L2TP:
			case L2TP_CLASS:
			case LDAP_BASE_DN:
			case LDAP_LOGIN:
			case LDAP_LOGIN_DN:
			case LDAP_NAMING_ATTRIBUTE:
			case LDAP_SCOPE:
			case LENGTH:
			case LICENSE:
			case LIFETIME:
			case LIMIT_RESOURCE:
			case LINE:
			case LINECODE:
			case LISTEN:
			case LLDP:
			case LOAD_INTERVAL:
			case LOAD_SHARING:
			case LOCAL:
			case LOCAL_AS:
			case LOCAL_IP:
			case LOCAL_PORT:
			case LOCAL_PREFERENCE:
			case LOCATION:
			case LOG:
			case LOG_ADJACENCY_CHANGES:
			case LOG_INPUT:
			case LOG_NEIGHBOR_CHANGES:
			case LOGGING:
			case LOGIN:
			case LPD:
			case LRE:
			case LT:
			case MAC:
			case MAC_ADDRESS:
			case MAC_ADDRESS_TABLE:
			case MACRO:
			case MAIL_SERVER:
			case MAIN_CPU:
			case MANAGEMENT:
			case MANAGEMENT_ONLY:
			case MAP:
			case MAP_CLASS:
			case MAP_GROUP:
			case MAP_LIST:
			case MASK:
			case MATCH:
			case MAXIMUM:
			case MAXIMUM_PATHS:
			case MAXIMUM_PEERS:
			case MAXIMUM_PREFIX:
			case MAXIMUM_ROUTES:
			case MDIX:
			case MEDIA_TERMINATION:
			case MEDIA_TYPE:
			case MEMBER:
			case MEMORY_SIZE:
			case MESSAGE_DIGEST_KEY:
			case MESSAGE_LENGTH:
			case METRIC:
			case METRIC_TYPE:
			case MFIB:
			case MFIB_MODE:
			case MGCP:
			case MICROCODE:
			case MINIMAL:
			case MLAG:
			case MLD:
			case MLD_QUERY:
			case MLD_REDUCTION:
			case MLD_REPORT:
			case MLS:
			case MOBILITY:
			case MODE:
			case MODEM:
			case MODULE:
			case MONITOR:
			case MOP:
			case MOTD:
			case MPLS:
			case MPLS_LABEL:
			case MROUTE:
			case MROUTE_CACHE:
			case MSDP:
			case MTA:
			case MTU:
			case MULTICAST:
			case MULTICAST_ROUTING:
			case MULTILINK:
			case MULTIPOINT:
			case MVR:
			case NAME_LOOKUP:
			case NAME_SERVER:
			case NAMEIF:
			case NAME:
			case NAMES:
			case NAT:
			case NAT_CONTROL:
			case NATIVE:
			case ND:
			case ND_NA:
			case ND_NS:
			case NEGOTIATE:
			case NEGOTIATION:
			case NEIGHBOR:
			case NEQ:
			case NET_UNREACHABLE:
			case NETBIOS_DGM:
			case NETBIOS_NS:
			case NETBIOS_SS:
			case NETCONF:
			case NETWORK:
			case NETWORK_CLOCK_PARTICIPATE:
			case NETWORK_CLOCK_SELECT:
			case NETWORK_OBJECT:
			case NETWORK_UNKNOWN:
			case NEXT_HOP:
			case NEXT_HOP_SELF:
			case NNTP:
			case NO:
			case NO_ADVERTISE:
			case NO_EXPORT:
			case NO_SUMMARY:
			case NODE:
			case NON500_ISAKMP:
			case NONE:
			case NONEGOTIATE:
			case NOTIFY:
			case NSF:
			case NSSA:
			case NTP:
			case OBJECT:
			case OBJECT_GROUP:
			case OPENFLOW:
			case ORIGIN:
			case ORIGINATE:
			case OSPF:
			case OTHER_ACCESS:
			case OUI:
			case OUT:
			case OWNER:
			case PACKET_TOO_BIG:
			case PAGER:
			case PARAMETER_PROBLEM:
			case PARAMETERS:
			case PARENT:
			case PARSER:
			case PARTICIPATE:
			case PASSIVE_INTERFACE:
			case PASSWORD:
			case PASSWORD_STORAGE:
			case PATH_JITTER:
			case PEER:
			case PEER_GROUP:
			case PEER_SESSION:
			case PERMANENT:
			case PEER_CONFIG_CHECK_BYPASS:
			case PEER_GATEWAY:
			case PEER_KEEPALIVE:
			case PERMIT:
			case PHONE_PROXY:
			case PHYSICAL_LAYER:
			case PICKUP:
			case PIM:
			case PIM_AUTO_RP:
			case PKI:
			case PLATFORM:
			case POLICE:
			case POLICY:
			case POLICY_LIST:
			case POLICY_MAP:
			case POP3:
			case PORT:
			case PORT_CHANNEL:
			case PORT_OBJECT:
			case PORT_SECURITY:
			case PORT_UNREACHABLE:
			case POWER:
			case POWEROFF:
			case PPP:
			case PREEMPT:
			case PREPEND:
			case PRE_SHARED_KEY:
			case PRI_GROUP:
			case PRIORITY:
			case PRIORITY_QUEUE:
			case PRIVATE_VLAN:
			case PREFIX:
			case PREFIX_LIST:
			case PRIORITY_:
			case PRIORITY_QUEUE_:
			case PRIVILEGE:
			case PROCESS:
			case PROFILE:
			case PROMPT:
			case PROTOCOL:
			case PROTOCOL_OBJECT:
			case PROXY_ARP:
			case PSEUDOWIRE_CLASS:
			case QOS:
			case QUEUE_BUFFERS:
			case QUEUE_LIMIT:
			case QUEUE_SET:
			case QUIT:
			case RADIUS:
			case RADIUS_COMMON_PW:
			case RADIUS_SERVER:
			case RANDOM_DETECT:
			case RANGE:
			case RATE_LIMIT:
			case RATE_MODE:
			case RC4_SHA1:
			case RCMD:
			case RCV_QUEUE:
			case RD:
			case RECORD:
			case RECORD_ENTRY:
			case REDIRECT:
			case REDIRECT_FQDN:
			case REDIRECTS:
			case REDISTRIBUTE:
			case REDUNDANCY:
			case REFLECT:
			case REMARK:
			case REMOTE_AS:
			case REMOTE_IP:
			case REMOTE_PORT:
			case REMOVE_PRIVATE_AS:
			case REMOTE_SPAN:
			case REMOVED:
			case RESOURCE:
			case RESOURCE_POOL:
			case RETRANSMIT:
			case REVERSE_ROUTE:
			case REVISION:
			case REVOCATION_CHECK:
			case RING:
			case RIP:
			case RMON:
			case ROLE:
			case ROTARY:
			case ROUTE:
			case ROUTE_CACHE:
			case ROUTE_MAP:
			case ROUTE_REFLECTOR_CLIENT:
			case ROUTE_TARGET:
			case ROUTER:
			case ROUTER_ADVERTISEMENT:
			case ROUTER_ID:
			case ROUTER_SOLICITATION:
			case ROUTING:
			case RSAKEYPAIR:
			case RTR:
			case RST:
			case RULE:
			case SAME_SECURITY_TRAFFIC:
			case SAP:
			case SCCP:
			case SCHEDULE:
			case SCHEDULER:
			case SCHEME:
			case SCP:
			case SCRIPTING:
			case SCTP:
			case SDM:
			case SECONDARY:
			case SECURITY:
			case SECURITY_LEVEL:
			case SEND_COMMUNITY:
			case SEND_LABEL:
			case SENDER:
			case SEQ:
			case SEQUENCE:
			case SERIAL:
			case SERIAL_NUMBER:
			case SERVER:
			case SERVER_PRIVATE:
			case SERVER_TYPE:
			case SERVICE:
			case SERVICE_MODULE:
			case SERVICE_POLICY:
			case SERVICE_TYPE:
			case SESSION_DISCONNECT_WARNING:
			case SESSION_LIMIT:
			case SESSION_TIMEOUT:
			case SET:
			case SETUP:
			case SFLOW:
			case SHA1:
			case SHAPE:
			case SHELL:
			case SHUTDOWN:
			case SINGLE_ROUTER_MODE:
			case SLA:
			case SMTP:
			case SMTP_SERVER:
			case SNMP:
			case SNMP_SERVER:
			case SNMPTRAP:
			case SORT_BY:
			case SPE:
			case SOFT_RECONFIGURATION:
			case SONET:
			case SOURCE:
			case SOURCE_INTERFACE:
			case SOURCE_IP_ADDRESS:
			case SOURCE_ROUTE:
			case SOURCE_QUENCH:
			case SPANNING_TREE:
			case SPD:
			case SPEED:
			case SPLIT_TUNNEL_NETWORK_LIST:
			case SPLIT_TUNNEL_POLICY:
			case SRR_QUEUE:
			case SSH:
			case SSL:
			case STACK_MIB:
			case STANDARD:
			case STANDBY:
			case STATIC:
			case STATISTICS:
			case STCAPP:
			case STOPBITS:
			case STORM_CONTROL:
			case STP:
			case SUBJECT_NAME:
			case SUBNET:
			case SUBNETS:
			case SUBNET_ZERO:
			case SUBSCRIBE_TO:
			case SUBSCRIBE_TO_ALERT_GROUP:
			case SUBSCRIBER:
			case SUMMARY_ONLY:
			case SUNRPC:
			case SUPPLEMENTARY_SERVICES:
			case SWITCH:
			case SWITCHBACK:
			case SWITCHING_MODE:
			case SWITCHPORT:
			case SYNC:
			case SYNCHRONIZATION:
			case SYSLOG:
			case SYSOPT:
			case SYSTEM:
			case TABLE_MAP:
			case TACACS:
			case TACACS_PLUS:
			case TACACS_SERVER:
			case TAG:
			case TAG_SWITCHING:
			case TB_VLAN1:
			case TB_VLAN2:
			case TCAM:
			case TCP:
			case TELNET:
			case TEMPLATE:
			case TERMINAL_TYPE:
			case TFTP:
			case TFTP_SERVER:
			case THREAT_DETECTION:
			case THREE_DES:
			case THREE_DES_SHA1:
			case TIME_EXCEEDED:
			case TIMEOUT:
			case TIMEOUTS:
			case TIMER:
			case TIMERS:
			case TIMING:
			case TLS_PROXY:
			case TOP:
			case TRACK:
			case TRACKED:
			case TRANSLATE:
			case TRANSPORT:
			case TRIGGER:
			case TRUNK:
			case TRUST:
			case TRUSTPOINT:
			case TRUSTPOOL:
			case TTL:
			case TTL_EXCEEDED:
			case TUNNEL:
			case TUNNEL_GROUP:
			case TUNNEL_GROUP_LIST:
			case TYPE:
			case UDLD:
			case UDP:
			case UNABLE:
			case UNICAST_ROUTING:
			case UNNUMBERED:
			case UNREACHABLE:
			case UNREACHABLES:
			case UNICAST:
			case UPDATE_SOURCE:
			case UPGRADE:
			case USE_VRF:
			case USER_IDENTITY:
			case USERNAME:
			case VALIDATION_USAGE:
			case VDC:
			case VERIFY:
			case VERSION:
			case VIOLATE_ACTION:
			case VIRTUAL_REASSEMBLY:
			case VIRTUAL_TEMPLATE:
			case VLAN:
			case VMPS:
			case VOICE:
			case VOICE_CARD:
			case VOICE_PORT:
			case VPC:
			case VPDN:
			case VPDN_GROUP:
			case VPN:
			case VPNV4:
			case VPNV6:
			case VPN_FILTER:
			case VPN_IDLE_TIMEOUT:
			case VPN_TUNNEL_PROTOCOL:
			case VRF:
			case VRRP:
			case VTP:
			case WEBVPN:
			case WEIGHT:
			case WINS_SERVER:
			case WITHOUT_CSD:
			case WLAN:
			case WRR_QUEUE:
			case WSMA:
			case WWW:
			case X25:
			case X29:
			case XCONNECT:
			case XLATE:
			case XML:
			case XX_HIDE:
			case COMMUNITY_NUMBER:
			case VARIABLE:
			case ACL_NUM:
			case AMPERSAND:
			case ANGLE_BRACKET_LEFT:
			case ANGLE_BRACKET_RIGHT:
			case ASTERISK:
			case AT:
			case BACKSLASH:
			case BRACE_LEFT:
			case BRACE_RIGHT:
			case BRACKET_LEFT:
			case BRACKET_RIGHT:
			case CARAT:
			case COLON:
			case COMMA:
			case COMMUNITY_LIST_NUM:
			case COMMENT_LINE:
			case DASH:
			case DOLLAR:
			case DEC:
			case DOUBLE_QUOTE:
			case EQUALS:
			case ESCAPE_C:
			case FLOAT:
			case FORWARD_SLASH:
			case HEX:
			case IP_PREFIX:
			case IPV6_PREFIX:
			case PAREN_LEFT:
			case PAREN_RIGHT:
			case PERCENT:
			case PERIOD:
			case PLUS:
			case POUND:
			case SEMICOLON:
			case SINGLE_QUOTE:
			case UNDERSCORE:
			case WS:
			case M_BANNER_WS:
			case M_CERTIFICATE_TEXT:
			case M_COMMENT_NON_NEWLINE:
			case M_DES_DEC_PART:
			case M_DES_HEX_PART:
			case M_DES_WS:
			case M_DESCRIPTION_NON_NEWLINE:
			case M_KEY_NON_NEWLINE:
			case M_MOTD_C_MOTD:
			case M_MOTD_EOF_MOTD:
			case M_MOTD_HASH_MOTD:
			case M_NAME_WS:
			case M_NAME_NAME:
			case M_NEIGHBOR_WS:
			case M_REMARK_REMARK:
			case M_SHA1_DEC_PART:
			case M_SHA1_HEX_PART:
			case M_SHA1_WS:
				{
				setState(2030);
				((Neighbor_activate_af_stanzaContext)_localctx).pg = _input.LT(1);
				_la = _input.LA(1);
				if ( _la <= 0 || (((((_la - 816)) & ~0x3f) == 0 && ((1L << (_la - 816)) & ((1L << (IP_ADDRESS - 816)) | (1L << (IPV6_ADDRESS - 816)) | (1L << (NEWLINE - 816)))) != 0)) ) {
					((Neighbor_activate_af_stanzaContext)_localctx).pg = (Token)_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2033); match(ACTIVATE);
			setState(2034); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_default_originate_af_stanzaContext extends ParserRuleContext {
		public Neighbor_default_originate_tail_bgpContext neighbor_default_originate_tail_bgp() {
			return getRuleContext(Neighbor_default_originate_tail_bgpContext.class,0);
		}
		public Neighbor_default_originate_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_default_originate_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_default_originate_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_default_originate_af_stanza(this);
		}
	}

	public final Neighbor_default_originate_af_stanzaContext neighbor_default_originate_af_stanza() throws RecognitionException {
		Neighbor_default_originate_af_stanzaContext _localctx = new Neighbor_default_originate_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_neighbor_default_originate_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2036); neighbor_default_originate_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_default_originate_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_default_originate_tail_bgpContext neighbor_default_originate_tail_bgp() {
			return getRuleContext(Neighbor_default_originate_tail_bgpContext.class,0);
		}
		public Neighbor_default_originate_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_default_originate_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_default_originate_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_default_originate_rb_stanza(this);
		}
	}

	public final Neighbor_default_originate_rb_stanzaContext neighbor_default_originate_rb_stanza() throws RecognitionException {
		Neighbor_default_originate_rb_stanzaContext _localctx = new Neighbor_default_originate_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_neighbor_default_originate_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2038); neighbor_default_originate_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_default_originate_tail_bgpContext extends ParserRuleContext {
		public Token ip;
		public Token ipv6;
		public Token peergroup;
		public Token map;
		public TerminalNode ROUTE_MAP() { return getToken(CiscoGrammar.ROUTE_MAP, 0); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode IPV6_ADDRESS() { return getToken(CiscoGrammar.IPV6_ADDRESS, 0); }
		public List<TerminalNode> VARIABLE() { return getTokens(CiscoGrammar.VARIABLE); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode VARIABLE(int i) {
			return getToken(CiscoGrammar.VARIABLE, i);
		}
		public TerminalNode DEFAULT_ORIGINATE() { return getToken(CiscoGrammar.DEFAULT_ORIGINATE, 0); }
		public Neighbor_default_originate_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_default_originate_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_default_originate_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_default_originate_tail_bgp(this);
		}
	}

	public final Neighbor_default_originate_tail_bgpContext neighbor_default_originate_tail_bgp() throws RecognitionException {
		Neighbor_default_originate_tail_bgpContext _localctx = new Neighbor_default_originate_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_neighbor_default_originate_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2040); match(NEIGHBOR);
			setState(2044);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				{
				setState(2041); ((Neighbor_default_originate_tail_bgpContext)_localctx).ip = match(IP_ADDRESS);
				}
				break;
			case IPV6_ADDRESS:
				{
				setState(2042); ((Neighbor_default_originate_tail_bgpContext)_localctx).ipv6 = match(IPV6_ADDRESS);
				}
				break;
			case VARIABLE:
				{
				setState(2043); ((Neighbor_default_originate_tail_bgpContext)_localctx).peergroup = match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2046); match(DEFAULT_ORIGINATE);
			setState(2049);
			_la = _input.LA(1);
			if (_la==ROUTE_MAP) {
				{
				setState(2047); match(ROUTE_MAP);
				setState(2048); ((Neighbor_default_originate_tail_bgpContext)_localctx).map = match(VARIABLE);
				}
			}

			setState(2051); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_description_af_stanzaContext extends ParserRuleContext {
		public Neighbor_description_tail_bgpContext neighbor_description_tail_bgp() {
			return getRuleContext(Neighbor_description_tail_bgpContext.class,0);
		}
		public Neighbor_description_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_description_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_description_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_description_af_stanza(this);
		}
	}

	public final Neighbor_description_af_stanzaContext neighbor_description_af_stanza() throws RecognitionException {
		Neighbor_description_af_stanzaContext _localctx = new Neighbor_description_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_neighbor_description_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2053); neighbor_description_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_description_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_description_tail_bgpContext neighbor_description_tail_bgp() {
			return getRuleContext(Neighbor_description_tail_bgpContext.class,0);
		}
		public Neighbor_description_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_description_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_description_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_description_rb_stanza(this);
		}
	}

	public final Neighbor_description_rb_stanzaContext neighbor_description_rb_stanza() throws RecognitionException {
		Neighbor_description_rb_stanzaContext _localctx = new Neighbor_description_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_neighbor_description_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2055); neighbor_description_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_description_tail_bgpContext extends ParserRuleContext {
		public Token neighbor;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public Description_lineContext description_line() {
			return getRuleContext(Description_lineContext.class,0);
		}
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public Neighbor_description_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_description_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_description_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_description_tail_bgp(this);
		}
	}

	public final Neighbor_description_tail_bgpContext neighbor_description_tail_bgp() throws RecognitionException {
		Neighbor_description_tail_bgpContext _localctx = new Neighbor_description_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_neighbor_description_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2057); match(NEIGHBOR);
			setState(2058);
			((Neighbor_description_tail_bgpContext)_localctx).neighbor = _input.LT(1);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
				((Neighbor_description_tail_bgpContext)_localctx).neighbor = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(2059); description_line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_distribute_list_af_stanzaContext extends ParserRuleContext {
		public Neighbor_distribute_list_tail_bgpContext neighbor_distribute_list_tail_bgp() {
			return getRuleContext(Neighbor_distribute_list_tail_bgpContext.class,0);
		}
		public Neighbor_distribute_list_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_distribute_list_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_distribute_list_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_distribute_list_af_stanza(this);
		}
	}

	public final Neighbor_distribute_list_af_stanzaContext neighbor_distribute_list_af_stanza() throws RecognitionException {
		Neighbor_distribute_list_af_stanzaContext _localctx = new Neighbor_distribute_list_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_neighbor_distribute_list_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2061); neighbor_distribute_list_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_distribute_list_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_distribute_list_tail_bgpContext neighbor_distribute_list_tail_bgp() {
			return getRuleContext(Neighbor_distribute_list_tail_bgpContext.class,0);
		}
		public Neighbor_distribute_list_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_distribute_list_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_distribute_list_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_distribute_list_rb_stanza(this);
		}
	}

	public final Neighbor_distribute_list_rb_stanzaContext neighbor_distribute_list_rb_stanza() throws RecognitionException {
		Neighbor_distribute_list_rb_stanzaContext _localctx = new Neighbor_distribute_list_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_neighbor_distribute_list_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2063); neighbor_distribute_list_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_distribute_list_tail_bgpContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode DISTRIBUTE_LIST() { return getToken(CiscoGrammar.DISTRIBUTE_LIST, 0); }
		public Neighbor_distribute_list_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_distribute_list_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_distribute_list_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_distribute_list_tail_bgp(this);
		}
	}

	public final Neighbor_distribute_list_tail_bgpContext neighbor_distribute_list_tail_bgp() throws RecognitionException {
		Neighbor_distribute_list_tail_bgpContext _localctx = new Neighbor_distribute_list_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_neighbor_distribute_list_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2065); match(NEIGHBOR);
			setState(2066);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2067); match(DISTRIBUTE_LIST);
			setState(2071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(2068);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2073);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2074); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_ebgp_multihop_af_stanzaContext extends ParserRuleContext {
		public Neighbor_ebgp_multihop_tail_bgpContext neighbor_ebgp_multihop_tail_bgp() {
			return getRuleContext(Neighbor_ebgp_multihop_tail_bgpContext.class,0);
		}
		public Neighbor_ebgp_multihop_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_ebgp_multihop_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_ebgp_multihop_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_ebgp_multihop_af_stanza(this);
		}
	}

	public final Neighbor_ebgp_multihop_af_stanzaContext neighbor_ebgp_multihop_af_stanza() throws RecognitionException {
		Neighbor_ebgp_multihop_af_stanzaContext _localctx = new Neighbor_ebgp_multihop_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_neighbor_ebgp_multihop_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2076); neighbor_ebgp_multihop_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_ebgp_multihop_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_ebgp_multihop_tail_bgpContext neighbor_ebgp_multihop_tail_bgp() {
			return getRuleContext(Neighbor_ebgp_multihop_tail_bgpContext.class,0);
		}
		public Neighbor_ebgp_multihop_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_ebgp_multihop_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_ebgp_multihop_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_ebgp_multihop_rb_stanza(this);
		}
	}

	public final Neighbor_ebgp_multihop_rb_stanzaContext neighbor_ebgp_multihop_rb_stanza() throws RecognitionException {
		Neighbor_ebgp_multihop_rb_stanzaContext _localctx = new Neighbor_ebgp_multihop_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_neighbor_ebgp_multihop_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2078); neighbor_ebgp_multihop_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_ebgp_multihop_tail_bgpContext extends ParserRuleContext {
		public Token neighbor;
		public Token hop;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode EBGP_MULTIHOP() { return getToken(CiscoGrammar.EBGP_MULTIHOP, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Neighbor_ebgp_multihop_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_ebgp_multihop_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_ebgp_multihop_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_ebgp_multihop_tail_bgp(this);
		}
	}

	public final Neighbor_ebgp_multihop_tail_bgpContext neighbor_ebgp_multihop_tail_bgp() throws RecognitionException {
		Neighbor_ebgp_multihop_tail_bgpContext _localctx = new Neighbor_ebgp_multihop_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_neighbor_ebgp_multihop_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2080); match(NEIGHBOR);
			setState(2081);
			((Neighbor_ebgp_multihop_tail_bgpContext)_localctx).neighbor = _input.LT(1);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
				((Neighbor_ebgp_multihop_tail_bgpContext)_localctx).neighbor = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(2082); match(EBGP_MULTIHOP);
			setState(2083); ((Neighbor_ebgp_multihop_tail_bgpContext)_localctx).hop = match(DEC);
			setState(2084); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_filter_list_af_stanzaContext extends ParserRuleContext {
		public Neighbor_filter_list_tail_bgpContext neighbor_filter_list_tail_bgp() {
			return getRuleContext(Neighbor_filter_list_tail_bgpContext.class,0);
		}
		public Neighbor_filter_list_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_filter_list_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_filter_list_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_filter_list_af_stanza(this);
		}
	}

	public final Neighbor_filter_list_af_stanzaContext neighbor_filter_list_af_stanza() throws RecognitionException {
		Neighbor_filter_list_af_stanzaContext _localctx = new Neighbor_filter_list_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_neighbor_filter_list_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2086); neighbor_filter_list_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_filter_list_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_filter_list_tail_bgpContext neighbor_filter_list_tail_bgp() {
			return getRuleContext(Neighbor_filter_list_tail_bgpContext.class,0);
		}
		public Neighbor_filter_list_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_filter_list_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_filter_list_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_filter_list_rb_stanza(this);
		}
	}

	public final Neighbor_filter_list_rb_stanzaContext neighbor_filter_list_rb_stanza() throws RecognitionException {
		Neighbor_filter_list_rb_stanzaContext _localctx = new Neighbor_filter_list_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_neighbor_filter_list_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2088); neighbor_filter_list_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_filter_list_tail_bgpContext extends ParserRuleContext {
		public Token neighbor;
		public Token num;
		public TerminalNode IN() { return getToken(CiscoGrammar.IN, 0); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode OUT() { return getToken(CiscoGrammar.OUT, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode FILTER_LIST() { return getToken(CiscoGrammar.FILTER_LIST, 0); }
		public Neighbor_filter_list_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_filter_list_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_filter_list_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_filter_list_tail_bgp(this);
		}
	}

	public final Neighbor_filter_list_tail_bgpContext neighbor_filter_list_tail_bgp() throws RecognitionException {
		Neighbor_filter_list_tail_bgpContext _localctx = new Neighbor_filter_list_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_neighbor_filter_list_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2090); match(NEIGHBOR);
			setState(2091);
			((Neighbor_filter_list_tail_bgpContext)_localctx).neighbor = matchWildcard();
			setState(2092); match(FILTER_LIST);
			setState(2093); ((Neighbor_filter_list_tail_bgpContext)_localctx).num = match(DEC);
			setState(2094);
			_la = _input.LA(1);
			if ( !(_la==IN || _la==OUT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2095); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_nexus_stanzaContext extends ParserRuleContext {
		public Token ip_address;
		public Token ipv6_address;
		public Token ip_prefix;
		public Token ipv6_prefix;
		public Neighbor_nexus_tailContext neighbor_nexus_tail;
		public List<Neighbor_nexus_tailContext> tail = new ArrayList<Neighbor_nexus_tailContext>();
		public Neighbor_nexus_tailContext neighbor_nexus_tail(int i) {
			return getRuleContext(Neighbor_nexus_tailContext.class,i);
		}
		public TerminalNode IPV6_ADDRESS() { return getToken(CiscoGrammar.IPV6_ADDRESS, 0); }
		public List<Neighbor_nexus_tailContext> neighbor_nexus_tail() {
			return getRuleContexts(Neighbor_nexus_tailContext.class);
		}
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode IPV6_PREFIX() { return getToken(CiscoGrammar.IPV6_PREFIX, 0); }
		public TerminalNode IP_PREFIX() { return getToken(CiscoGrammar.IP_PREFIX, 0); }
		public Neighbor_nexus_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_nexus_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_nexus_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_nexus_stanza(this);
		}
	}

	public final Neighbor_nexus_stanzaContext neighbor_nexus_stanza() throws RecognitionException {
		Neighbor_nexus_stanzaContext _localctx = new Neighbor_nexus_stanzaContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_neighbor_nexus_stanza);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2097); match(NEIGHBOR);
			setState(2102);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				{
				setState(2098); ((Neighbor_nexus_stanzaContext)_localctx).ip_address = match(IP_ADDRESS);
				}
				break;
			case IPV6_ADDRESS:
				{
				setState(2099); ((Neighbor_nexus_stanzaContext)_localctx).ipv6_address = match(IPV6_ADDRESS);
				}
				break;
			case IP_PREFIX:
				{
				setState(2100); ((Neighbor_nexus_stanzaContext)_localctx).ip_prefix = match(IP_PREFIX);
				}
				break;
			case IPV6_PREFIX:
				{
				setState(2101); ((Neighbor_nexus_stanzaContext)_localctx).ipv6_prefix = match(IPV6_PREFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2105); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2104); ((Neighbor_nexus_stanzaContext)_localctx).neighbor_nexus_tail = neighbor_nexus_tail();
					((Neighbor_nexus_stanzaContext)_localctx).tail.add(((Neighbor_nexus_stanzaContext)_localctx).neighbor_nexus_tail);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2107); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_nexus_inherit_stanzaContext extends ParserRuleContext {
		public Token name;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode PEER() { return getToken(CiscoGrammar.PEER, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode INHERIT() { return getToken(CiscoGrammar.INHERIT, 0); }
		public Neighbor_nexus_inherit_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_nexus_inherit_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_nexus_inherit_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_nexus_inherit_stanza(this);
		}
	}

	public final Neighbor_nexus_inherit_stanzaContext neighbor_nexus_inherit_stanza() throws RecognitionException {
		Neighbor_nexus_inherit_stanzaContext _localctx = new Neighbor_nexus_inherit_stanzaContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_neighbor_nexus_inherit_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2109); match(INHERIT);
			setState(2110); match(PEER);
			setState(2111); ((Neighbor_nexus_inherit_stanzaContext)_localctx).name = match(VARIABLE);
			setState(2112); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_nexus_null_tailContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode DESCRIPTION() { return getToken(CiscoGrammar.DESCRIPTION, 0); }
		public TerminalNode MAXIMUM_PEERS() { return getToken(CiscoGrammar.MAXIMUM_PEERS, 0); }
		public Neighbor_nexus_null_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_nexus_null_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_nexus_null_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_nexus_null_tail(this);
		}
	}

	public final Neighbor_nexus_null_tailContext neighbor_nexus_null_tail() throws RecognitionException {
		Neighbor_nexus_null_tailContext _localctx = new Neighbor_nexus_null_tailContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_neighbor_nexus_null_tail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2114);
			_la = _input.LA(1);
			if ( !(_la==DESCRIPTION || _la==MAXIMUM_PEERS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(2115);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2120);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2121); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_nexus_shutdown_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SHUTDOWN() { return getToken(CiscoGrammar.SHUTDOWN, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public Neighbor_nexus_shutdown_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_nexus_shutdown_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_nexus_shutdown_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_nexus_shutdown_stanza(this);
		}
	}

	public final Neighbor_nexus_shutdown_stanzaContext neighbor_nexus_shutdown_stanza() throws RecognitionException {
		Neighbor_nexus_shutdown_stanzaContext _localctx = new Neighbor_nexus_shutdown_stanzaContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_neighbor_nexus_shutdown_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2124);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(2123); match(NO);
				}
			}

			setState(2126); match(SHUTDOWN);
			setState(2127); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_nexus_remote_as_stanzaContext extends ParserRuleContext {
		public Token asnum;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode REMOTE_AS() { return getToken(CiscoGrammar.REMOTE_AS, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Neighbor_nexus_remote_as_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_nexus_remote_as_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_nexus_remote_as_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_nexus_remote_as_stanza(this);
		}
	}

	public final Neighbor_nexus_remote_as_stanzaContext neighbor_nexus_remote_as_stanza() throws RecognitionException {
		Neighbor_nexus_remote_as_stanzaContext _localctx = new Neighbor_nexus_remote_as_stanzaContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_neighbor_nexus_remote_as_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2131);
			_la = _input.LA(1);
			if (_la==REMOTE_AS) {
				{
				setState(2129); match(REMOTE_AS);
				setState(2130); ((Neighbor_nexus_remote_as_stanzaContext)_localctx).asnum = match(DEC);
				}
			}

			setState(2133); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_nexus_update_source_stanzaContext extends ParserRuleContext {
		public Token source;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode UPDATE_SOURCE() { return getToken(CiscoGrammar.UPDATE_SOURCE, 0); }
		public Neighbor_nexus_update_source_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_nexus_update_source_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_nexus_update_source_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_nexus_update_source_stanza(this);
		}
	}

	public final Neighbor_nexus_update_source_stanzaContext neighbor_nexus_update_source_stanza() throws RecognitionException {
		Neighbor_nexus_update_source_stanzaContext _localctx = new Neighbor_nexus_update_source_stanzaContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_neighbor_nexus_update_source_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2135); match(UPDATE_SOURCE);
			setState(2136); ((Neighbor_nexus_update_source_stanzaContext)_localctx).source = match(VARIABLE);
			setState(2137); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_nexus_vrf_rb_substanzaContext extends ParserRuleContext {
		public Neighbor_nexus_stanzaContext neighbor_nexus_stanza() {
			return getRuleContext(Neighbor_nexus_stanzaContext.class,0);
		}
		public Neighbor_nexus_vrf_rb_substanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_nexus_vrf_rb_substanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_nexus_vrf_rb_substanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_nexus_vrf_rb_substanza(this);
		}
	}

	public final Neighbor_nexus_vrf_rb_substanzaContext neighbor_nexus_vrf_rb_substanza() throws RecognitionException {
		Neighbor_nexus_vrf_rb_substanzaContext _localctx = new Neighbor_nexus_vrf_rb_substanzaContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_neighbor_nexus_vrf_rb_substanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2139); neighbor_nexus_stanza();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_next_hop_self_af_stanzaContext extends ParserRuleContext {
		public Neighbor_next_hop_self_tail_bgpContext neighbor_next_hop_self_tail_bgp() {
			return getRuleContext(Neighbor_next_hop_self_tail_bgpContext.class,0);
		}
		public Neighbor_next_hop_self_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_next_hop_self_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_next_hop_self_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_next_hop_self_af_stanza(this);
		}
	}

	public final Neighbor_next_hop_self_af_stanzaContext neighbor_next_hop_self_af_stanza() throws RecognitionException {
		Neighbor_next_hop_self_af_stanzaContext _localctx = new Neighbor_next_hop_self_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_neighbor_next_hop_self_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2141); neighbor_next_hop_self_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_nexus_tailContext extends ParserRuleContext {
		public Neighbor_nexus_shutdown_stanzaContext neighbor_nexus_shutdown_stanza() {
			return getRuleContext(Neighbor_nexus_shutdown_stanzaContext.class,0);
		}
		public Neighbor_nexus_null_tailContext neighbor_nexus_null_tail() {
			return getRuleContext(Neighbor_nexus_null_tailContext.class,0);
		}
		public Neighbor_nexus_inherit_stanzaContext neighbor_nexus_inherit_stanza() {
			return getRuleContext(Neighbor_nexus_inherit_stanzaContext.class,0);
		}
		public Neighbor_nexus_remote_as_stanzaContext neighbor_nexus_remote_as_stanza() {
			return getRuleContext(Neighbor_nexus_remote_as_stanzaContext.class,0);
		}
		public Neighbor_nexus_update_source_stanzaContext neighbor_nexus_update_source_stanza() {
			return getRuleContext(Neighbor_nexus_update_source_stanzaContext.class,0);
		}
		public Neighbor_nexus_af_stanzaContext neighbor_nexus_af_stanza() {
			return getRuleContext(Neighbor_nexus_af_stanzaContext.class,0);
		}
		public Neighbor_nexus_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_nexus_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_nexus_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_nexus_tail(this);
		}
	}

	public final Neighbor_nexus_tailContext neighbor_nexus_tail() throws RecognitionException {
		Neighbor_nexus_tailContext _localctx = new Neighbor_nexus_tailContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_neighbor_nexus_tail);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2149);
			switch (_input.LA(1)) {
			case INHERIT:
				{
				setState(2143); neighbor_nexus_inherit_stanza();
				}
				break;
			case DESCRIPTION:
			case MAXIMUM_PEERS:
				{
				setState(2144); neighbor_nexus_null_tail();
				}
				break;
			case NO:
			case SHUTDOWN:
				{
				setState(2145); neighbor_nexus_shutdown_stanza();
				}
				break;
			case REMOTE_AS:
			case NEWLINE:
				{
				setState(2146); neighbor_nexus_remote_as_stanza();
				}
				break;
			case UPDATE_SOURCE:
				{
				setState(2147); neighbor_nexus_update_source_stanza();
				}
				break;
			case ADDRESS_FAMILY:
				{
				setState(2148); neighbor_nexus_af_stanza();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_nexus_af_stanzaContext extends ParserRuleContext {
		public TerminalNode IPV4() { return getToken(CiscoGrammar.IPV4, 0); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode UNICAST() { return getToken(CiscoGrammar.UNICAST, 0); }
		public TerminalNode MULTICAST() { return getToken(CiscoGrammar.MULTICAST, 0); }
		public TerminalNode VPNV4() { return getToken(CiscoGrammar.VPNV4, 0); }
		public TerminalNode VPNV6() { return getToken(CiscoGrammar.VPNV6, 0); }
		public Neighbor_nexus_af_stanza_tailContext neighbor_nexus_af_stanza_tail() {
			return getRuleContext(Neighbor_nexus_af_stanza_tailContext.class,0);
		}
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public TerminalNode ADDRESS_FAMILY() { return getToken(CiscoGrammar.ADDRESS_FAMILY, 0); }
		public Neighbor_nexus_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_nexus_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_nexus_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_nexus_af_stanza(this);
		}
	}

	public final Neighbor_nexus_af_stanzaContext neighbor_nexus_af_stanza() throws RecognitionException {
		Neighbor_nexus_af_stanzaContext _localctx = new Neighbor_nexus_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_neighbor_nexus_af_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2151); match(ADDRESS_FAMILY);
			setState(2152);
			_la = _input.LA(1);
			if ( !(_la==IPV4 || _la==IPV6 || _la==VPNV4 || _la==VPNV6) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2154);
			_la = _input.LA(1);
			if (_la==MULTICAST || _la==UNICAST) {
				{
				setState(2153);
				_la = _input.LA(1);
				if ( !(_la==MULTICAST || _la==UNICAST) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2156); match(NEWLINE);
			setState(2157); neighbor_nexus_af_stanza_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_nexus_af_stanza_tailContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SEND_COMMUNITY() { return getToken(CiscoGrammar.SEND_COMMUNITY, 0); }
		public Neighbor_nexus_af_stanza_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_nexus_af_stanza_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_nexus_af_stanza_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_nexus_af_stanza_tail(this);
		}
	}

	public final Neighbor_nexus_af_stanza_tailContext neighbor_nexus_af_stanza_tail() throws RecognitionException {
		Neighbor_nexus_af_stanza_tailContext _localctx = new Neighbor_nexus_af_stanza_tailContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_neighbor_nexus_af_stanza_tail);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2159); match(SEND_COMMUNITY);
			setState(2160); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_next_hop_self_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_next_hop_self_tail_bgpContext neighbor_next_hop_self_tail_bgp() {
			return getRuleContext(Neighbor_next_hop_self_tail_bgpContext.class,0);
		}
		public Neighbor_next_hop_self_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_next_hop_self_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_next_hop_self_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_next_hop_self_rb_stanza(this);
		}
	}

	public final Neighbor_next_hop_self_rb_stanzaContext neighbor_next_hop_self_rb_stanza() throws RecognitionException {
		Neighbor_next_hop_self_rb_stanzaContext _localctx = new Neighbor_next_hop_self_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_neighbor_next_hop_self_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2162); neighbor_next_hop_self_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_next_hop_self_tail_bgpContext extends ParserRuleContext {
		public Token neighbor;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode NEXT_HOP_SELF() { return getToken(CiscoGrammar.NEXT_HOP_SELF, 0); }
		public Neighbor_next_hop_self_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_next_hop_self_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_next_hop_self_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_next_hop_self_tail_bgp(this);
		}
	}

	public final Neighbor_next_hop_self_tail_bgpContext neighbor_next_hop_self_tail_bgp() throws RecognitionException {
		Neighbor_next_hop_self_tail_bgpContext _localctx = new Neighbor_next_hop_self_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_neighbor_next_hop_self_tail_bgp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2164); match(NEIGHBOR);
			setState(2167);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				{
				setState(2165); ((Neighbor_next_hop_self_tail_bgpContext)_localctx).neighbor = match(IP_ADDRESS);
				}
				break;
			case VARIABLE:
				{
				setState(2166); ((Neighbor_next_hop_self_tail_bgpContext)_localctx).neighbor = match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2169); match(NEXT_HOP_SELF);
			setState(2170); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_peer_group_assignment_af_stanzaContext extends ParserRuleContext {
		public Neighbor_peer_group_assignment_tail_bgpContext neighbor_peer_group_assignment_tail_bgp() {
			return getRuleContext(Neighbor_peer_group_assignment_tail_bgpContext.class,0);
		}
		public Neighbor_peer_group_assignment_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_peer_group_assignment_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_peer_group_assignment_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_peer_group_assignment_af_stanza(this);
		}
	}

	public final Neighbor_peer_group_assignment_af_stanzaContext neighbor_peer_group_assignment_af_stanza() throws RecognitionException {
		Neighbor_peer_group_assignment_af_stanzaContext _localctx = new Neighbor_peer_group_assignment_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_neighbor_peer_group_assignment_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2172); neighbor_peer_group_assignment_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_peer_group_assignment_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_peer_group_assignment_tail_bgpContext neighbor_peer_group_assignment_tail_bgp() {
			return getRuleContext(Neighbor_peer_group_assignment_tail_bgpContext.class,0);
		}
		public Neighbor_peer_group_assignment_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_peer_group_assignment_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_peer_group_assignment_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_peer_group_assignment_rb_stanza(this);
		}
	}

	public final Neighbor_peer_group_assignment_rb_stanzaContext neighbor_peer_group_assignment_rb_stanza() throws RecognitionException {
		Neighbor_peer_group_assignment_rb_stanzaContext _localctx = new Neighbor_peer_group_assignment_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_neighbor_peer_group_assignment_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2174); neighbor_peer_group_assignment_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_peer_group_assignment_tail_bgpContext extends ParserRuleContext {
		public Token address;
		public Token address6;
		public Token name;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode PEER_GROUP() { return getToken(CiscoGrammar.PEER_GROUP, 0); }
		public TerminalNode IPV6_ADDRESS() { return getToken(CiscoGrammar.IPV6_ADDRESS, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public Neighbor_peer_group_assignment_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_peer_group_assignment_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_peer_group_assignment_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_peer_group_assignment_tail_bgp(this);
		}
	}

	public final Neighbor_peer_group_assignment_tail_bgpContext neighbor_peer_group_assignment_tail_bgp() throws RecognitionException {
		Neighbor_peer_group_assignment_tail_bgpContext _localctx = new Neighbor_peer_group_assignment_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_neighbor_peer_group_assignment_tail_bgp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2176); match(NEIGHBOR);
			setState(2179);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				{
				setState(2177); ((Neighbor_peer_group_assignment_tail_bgpContext)_localctx).address = match(IP_ADDRESS);
				}
				break;
			case IPV6_ADDRESS:
				{
				setState(2178); ((Neighbor_peer_group_assignment_tail_bgpContext)_localctx).address6 = match(IPV6_ADDRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2181); match(PEER_GROUP);
			setState(2182); ((Neighbor_peer_group_assignment_tail_bgpContext)_localctx).name = match(VARIABLE);
			setState(2183); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_peer_group_creation_af_stanzaContext extends ParserRuleContext {
		public Neighbor_peer_group_creation_tail_bgpContext neighbor_peer_group_creation_tail_bgp() {
			return getRuleContext(Neighbor_peer_group_creation_tail_bgpContext.class,0);
		}
		public Neighbor_peer_group_creation_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_peer_group_creation_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_peer_group_creation_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_peer_group_creation_af_stanza(this);
		}
	}

	public final Neighbor_peer_group_creation_af_stanzaContext neighbor_peer_group_creation_af_stanza() throws RecognitionException {
		Neighbor_peer_group_creation_af_stanzaContext _localctx = new Neighbor_peer_group_creation_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_neighbor_peer_group_creation_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2185); neighbor_peer_group_creation_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_peer_group_creation_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_peer_group_creation_tail_bgpContext neighbor_peer_group_creation_tail_bgp() {
			return getRuleContext(Neighbor_peer_group_creation_tail_bgpContext.class,0);
		}
		public Neighbor_peer_group_creation_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_peer_group_creation_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_peer_group_creation_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_peer_group_creation_rb_stanza(this);
		}
	}

	public final Neighbor_peer_group_creation_rb_stanzaContext neighbor_peer_group_creation_rb_stanza() throws RecognitionException {
		Neighbor_peer_group_creation_rb_stanzaContext _localctx = new Neighbor_peer_group_creation_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_neighbor_peer_group_creation_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2187); neighbor_peer_group_creation_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_peer_group_creation_tail_bgpContext extends ParserRuleContext {
		public Token name;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode PEER_GROUP() { return getToken(CiscoGrammar.PEER_GROUP, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public Neighbor_peer_group_creation_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_peer_group_creation_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_peer_group_creation_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_peer_group_creation_tail_bgp(this);
		}
	}

	public final Neighbor_peer_group_creation_tail_bgpContext neighbor_peer_group_creation_tail_bgp() throws RecognitionException {
		Neighbor_peer_group_creation_tail_bgpContext _localctx = new Neighbor_peer_group_creation_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_neighbor_peer_group_creation_tail_bgp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2189); match(NEIGHBOR);
			setState(2190); ((Neighbor_peer_group_creation_tail_bgpContext)_localctx).name = match(VARIABLE);
			setState(2191); match(PEER_GROUP);
			setState(2192); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_prefix_list_af_stanzaContext extends ParserRuleContext {
		public Neighbor_prefix_list_tail_bgpContext neighbor_prefix_list_tail_bgp() {
			return getRuleContext(Neighbor_prefix_list_tail_bgpContext.class,0);
		}
		public Neighbor_prefix_list_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_prefix_list_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_prefix_list_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_prefix_list_af_stanza(this);
		}
	}

	public final Neighbor_prefix_list_af_stanzaContext neighbor_prefix_list_af_stanza() throws RecognitionException {
		Neighbor_prefix_list_af_stanzaContext _localctx = new Neighbor_prefix_list_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_neighbor_prefix_list_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2194); neighbor_prefix_list_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_prefix_list_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_prefix_list_tail_bgpContext neighbor_prefix_list_tail_bgp() {
			return getRuleContext(Neighbor_prefix_list_tail_bgpContext.class,0);
		}
		public Neighbor_prefix_list_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_prefix_list_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_prefix_list_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_prefix_list_rb_stanza(this);
		}
	}

	public final Neighbor_prefix_list_rb_stanzaContext neighbor_prefix_list_rb_stanza() throws RecognitionException {
		Neighbor_prefix_list_rb_stanzaContext _localctx = new Neighbor_prefix_list_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_neighbor_prefix_list_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2196); neighbor_prefix_list_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_prefix_list_tail_bgpContext extends ParserRuleContext {
		public Token neighbor;
		public Token list_name;
		public TerminalNode IN() { return getToken(CiscoGrammar.IN, 0); }
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode PREFIX_LIST() { return getToken(CiscoGrammar.PREFIX_LIST, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode OUT() { return getToken(CiscoGrammar.OUT, 0); }
		public Neighbor_prefix_list_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_prefix_list_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_prefix_list_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_prefix_list_tail_bgp(this);
		}
	}

	public final Neighbor_prefix_list_tail_bgpContext neighbor_prefix_list_tail_bgp() throws RecognitionException {
		Neighbor_prefix_list_tail_bgpContext _localctx = new Neighbor_prefix_list_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_neighbor_prefix_list_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2198); match(NEIGHBOR);
			setState(2199);
			((Neighbor_prefix_list_tail_bgpContext)_localctx).neighbor = _input.LT(1);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
				((Neighbor_prefix_list_tail_bgpContext)_localctx).neighbor = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(2200); match(PREFIX_LIST);
			setState(2201); ((Neighbor_prefix_list_tail_bgpContext)_localctx).list_name = match(VARIABLE);
			setState(2202);
			_la = _input.LA(1);
			if ( !(_la==IN || _la==OUT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2203); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_remote_as_af_stanzaContext extends ParserRuleContext {
		public Neighbor_remote_as_tail_bgpContext neighbor_remote_as_tail_bgp() {
			return getRuleContext(Neighbor_remote_as_tail_bgpContext.class,0);
		}
		public Neighbor_remote_as_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_remote_as_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_remote_as_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_remote_as_af_stanza(this);
		}
	}

	public final Neighbor_remote_as_af_stanzaContext neighbor_remote_as_af_stanza() throws RecognitionException {
		Neighbor_remote_as_af_stanzaContext _localctx = new Neighbor_remote_as_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_neighbor_remote_as_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2205); neighbor_remote_as_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_remote_as_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_remote_as_tail_bgpContext neighbor_remote_as_tail_bgp() {
			return getRuleContext(Neighbor_remote_as_tail_bgpContext.class,0);
		}
		public Neighbor_remote_as_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_remote_as_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_remote_as_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_remote_as_rb_stanza(this);
		}
	}

	public final Neighbor_remote_as_rb_stanzaContext neighbor_remote_as_rb_stanza() throws RecognitionException {
		Neighbor_remote_as_rb_stanzaContext _localctx = new Neighbor_remote_as_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_neighbor_remote_as_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2207); neighbor_remote_as_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_remote_as_tail_bgpContext extends ParserRuleContext {
		public Token pg;
		public Token as;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode REMOTE_AS() { return getToken(CiscoGrammar.REMOTE_AS, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Neighbor_remote_as_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_remote_as_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_remote_as_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_remote_as_tail_bgp(this);
		}
	}

	public final Neighbor_remote_as_tail_bgpContext neighbor_remote_as_tail_bgp() throws RecognitionException {
		Neighbor_remote_as_tail_bgpContext _localctx = new Neighbor_remote_as_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_neighbor_remote_as_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2209); match(NEIGHBOR);
			setState(2210);
			((Neighbor_remote_as_tail_bgpContext)_localctx).pg = _input.LT(1);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
				((Neighbor_remote_as_tail_bgpContext)_localctx).pg = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(2211); match(REMOTE_AS);
			setState(2212); ((Neighbor_remote_as_tail_bgpContext)_localctx).as = match(DEC);
			setState(2213); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_route_map_af_stanzaContext extends ParserRuleContext {
		public Neighbor_route_map_tail_bgpContext neighbor_route_map_tail_bgp() {
			return getRuleContext(Neighbor_route_map_tail_bgpContext.class,0);
		}
		public Neighbor_route_map_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_route_map_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_route_map_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_route_map_af_stanza(this);
		}
	}

	public final Neighbor_route_map_af_stanzaContext neighbor_route_map_af_stanza() throws RecognitionException {
		Neighbor_route_map_af_stanzaContext _localctx = new Neighbor_route_map_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_neighbor_route_map_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2215); neighbor_route_map_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_route_map_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_route_map_tail_bgpContext neighbor_route_map_tail_bgp() {
			return getRuleContext(Neighbor_route_map_tail_bgpContext.class,0);
		}
		public Neighbor_route_map_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_route_map_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_route_map_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_route_map_rb_stanza(this);
		}
	}

	public final Neighbor_route_map_rb_stanzaContext neighbor_route_map_rb_stanza() throws RecognitionException {
		Neighbor_route_map_rb_stanzaContext _localctx = new Neighbor_route_map_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_neighbor_route_map_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2217); neighbor_route_map_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_route_map_tail_bgpContext extends ParserRuleContext {
		public Token neighbor;
		public Token name;
		public TerminalNode IN() { return getToken(CiscoGrammar.IN, 0); }
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode ROUTE_MAP() { return getToken(CiscoGrammar.ROUTE_MAP, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode OUT() { return getToken(CiscoGrammar.OUT, 0); }
		public Neighbor_route_map_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_route_map_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_route_map_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_route_map_tail_bgp(this);
		}
	}

	public final Neighbor_route_map_tail_bgpContext neighbor_route_map_tail_bgp() throws RecognitionException {
		Neighbor_route_map_tail_bgpContext _localctx = new Neighbor_route_map_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_neighbor_route_map_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2219); match(NEIGHBOR);
			setState(2220);
			((Neighbor_route_map_tail_bgpContext)_localctx).neighbor = _input.LT(1);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
				((Neighbor_route_map_tail_bgpContext)_localctx).neighbor = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(2221); match(ROUTE_MAP);
			setState(2222); ((Neighbor_route_map_tail_bgpContext)_localctx).name = match(VARIABLE);
			setState(2223);
			_la = _input.LA(1);
			if ( !(_la==IN || _la==OUT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2224); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_remove_private_as_af_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode REMOVE_PRIVATE_AS() { return getToken(CiscoGrammar.REMOVE_PRIVATE_AS, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public Neighbor_remove_private_as_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_remove_private_as_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_remove_private_as_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_remove_private_as_af_stanza(this);
		}
	}

	public final Neighbor_remove_private_as_af_stanzaContext neighbor_remove_private_as_af_stanza() throws RecognitionException {
		Neighbor_remove_private_as_af_stanzaContext _localctx = new Neighbor_remove_private_as_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_neighbor_remove_private_as_af_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2226); match(NEIGHBOR);
			setState(2227);
			_la = _input.LA(1);
			if ( !(_la==VARIABLE || _la==IP_ADDRESS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2228); match(REMOVE_PRIVATE_AS);
			setState(2229); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_route_reflector_client_af_stanzaContext extends ParserRuleContext {
		public Token pg;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode ROUTE_REFLECTOR_CLIENT() { return getToken(CiscoGrammar.ROUTE_REFLECTOR_CLIENT, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public Neighbor_route_reflector_client_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_route_reflector_client_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_route_reflector_client_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_route_reflector_client_af_stanza(this);
		}
	}

	public final Neighbor_route_reflector_client_af_stanzaContext neighbor_route_reflector_client_af_stanza() throws RecognitionException {
		Neighbor_route_reflector_client_af_stanzaContext _localctx = new Neighbor_route_reflector_client_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_neighbor_route_reflector_client_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2231); match(NEIGHBOR);
			setState(2234);
			switch (_input.LA(1)) {
			case VARIABLE:
				{
				setState(2232); ((Neighbor_route_reflector_client_af_stanzaContext)_localctx).pg = match(VARIABLE);
				}
				break;
			case IP_ADDRESS:
				{
				setState(2233); ((Neighbor_route_reflector_client_af_stanzaContext)_localctx).pg = match(IP_ADDRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2236); match(ROUTE_REFLECTOR_CLIENT);
			setState(2237); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_send_community_af_stanzaContext extends ParserRuleContext {
		public Neighbor_send_community_tail_bgpContext neighbor_send_community_tail_bgp() {
			return getRuleContext(Neighbor_send_community_tail_bgpContext.class,0);
		}
		public Neighbor_send_community_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_send_community_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_send_community_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_send_community_af_stanza(this);
		}
	}

	public final Neighbor_send_community_af_stanzaContext neighbor_send_community_af_stanza() throws RecognitionException {
		Neighbor_send_community_af_stanzaContext _localctx = new Neighbor_send_community_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_neighbor_send_community_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2239); neighbor_send_community_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_send_community_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_send_community_tail_bgpContext neighbor_send_community_tail_bgp() {
			return getRuleContext(Neighbor_send_community_tail_bgpContext.class,0);
		}
		public Neighbor_send_community_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_send_community_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_send_community_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_send_community_rb_stanza(this);
		}
	}

	public final Neighbor_send_community_rb_stanzaContext neighbor_send_community_rb_stanza() throws RecognitionException {
		Neighbor_send_community_rb_stanzaContext _localctx = new Neighbor_send_community_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_neighbor_send_community_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2241); neighbor_send_community_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_send_community_tail_bgpContext extends ParserRuleContext {
		public Token neighbor;
		public TerminalNode BOTH() { return getToken(CiscoGrammar.BOTH, 0); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode EXTENDED() { return getToken(CiscoGrammar.EXTENDED, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode SEND_COMMUNITY() { return getToken(CiscoGrammar.SEND_COMMUNITY, 0); }
		public Neighbor_send_community_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_send_community_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_send_community_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_send_community_tail_bgp(this);
		}
	}

	public final Neighbor_send_community_tail_bgpContext neighbor_send_community_tail_bgp() throws RecognitionException {
		Neighbor_send_community_tail_bgpContext _localctx = new Neighbor_send_community_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_neighbor_send_community_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2243); match(NEIGHBOR);
			setState(2246);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				{
				setState(2244); ((Neighbor_send_community_tail_bgpContext)_localctx).neighbor = match(IP_ADDRESS);
				}
				break;
			case VARIABLE:
				{
				setState(2245); ((Neighbor_send_community_tail_bgpContext)_localctx).neighbor = match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2248); match(SEND_COMMUNITY);
			setState(2250);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(2249); match(EXTENDED);
				}
			}

			setState(2253);
			_la = _input.LA(1);
			if (_la==BOTH) {
				{
				setState(2252); match(BOTH);
				}
			}

			setState(2255); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_shutdown_af_stanzaContext extends ParserRuleContext {
		public Neighbor_shutdown_tail_bgpContext neighbor_shutdown_tail_bgp() {
			return getRuleContext(Neighbor_shutdown_tail_bgpContext.class,0);
		}
		public Neighbor_shutdown_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_shutdown_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_shutdown_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_shutdown_af_stanza(this);
		}
	}

	public final Neighbor_shutdown_af_stanzaContext neighbor_shutdown_af_stanza() throws RecognitionException {
		Neighbor_shutdown_af_stanzaContext _localctx = new Neighbor_shutdown_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_neighbor_shutdown_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2257); neighbor_shutdown_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_shutdown_rb_stanzaContext extends ParserRuleContext {
		public Neighbor_shutdown_tail_bgpContext neighbor_shutdown_tail_bgp() {
			return getRuleContext(Neighbor_shutdown_tail_bgpContext.class,0);
		}
		public Neighbor_shutdown_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_shutdown_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_shutdown_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_shutdown_rb_stanza(this);
		}
	}

	public final Neighbor_shutdown_rb_stanzaContext neighbor_shutdown_rb_stanza() throws RecognitionException {
		Neighbor_shutdown_rb_stanzaContext _localctx = new Neighbor_shutdown_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_neighbor_shutdown_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2259); neighbor_shutdown_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_shutdown_tail_bgpContext extends ParserRuleContext {
		public Token ip;
		public Token ip6;
		public Token peergroup;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode IPV6_ADDRESS() { return getToken(CiscoGrammar.IPV6_ADDRESS, 0); }
		public TerminalNode SHUTDOWN() { return getToken(CiscoGrammar.SHUTDOWN, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public Neighbor_shutdown_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_shutdown_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_shutdown_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_shutdown_tail_bgp(this);
		}
	}

	public final Neighbor_shutdown_tail_bgpContext neighbor_shutdown_tail_bgp() throws RecognitionException {
		Neighbor_shutdown_tail_bgpContext _localctx = new Neighbor_shutdown_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_neighbor_shutdown_tail_bgp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2261); match(NEIGHBOR);
			setState(2265);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				{
				setState(2262); ((Neighbor_shutdown_tail_bgpContext)_localctx).ip = match(IP_ADDRESS);
				}
				break;
			case IPV6_ADDRESS:
				{
				setState(2263); ((Neighbor_shutdown_tail_bgpContext)_localctx).ip6 = match(IPV6_ADDRESS);
				}
				break;
			case VARIABLE:
				{
				setState(2264); ((Neighbor_shutdown_tail_bgpContext)_localctx).peergroup = match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2267); match(SHUTDOWN);
			setState(2268); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Neighbor_update_source_rb_stanzaContext extends ParserRuleContext {
		public Token neighbor;
		public Token source;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode UPDATE_SOURCE() { return getToken(CiscoGrammar.UPDATE_SOURCE, 0); }
		public Neighbor_update_source_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_neighbor_update_source_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNeighbor_update_source_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNeighbor_update_source_rb_stanza(this);
		}
	}

	public final Neighbor_update_source_rb_stanzaContext neighbor_update_source_rb_stanza() throws RecognitionException {
		Neighbor_update_source_rb_stanzaContext _localctx = new Neighbor_update_source_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_neighbor_update_source_rb_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2270); match(NEIGHBOR);
			setState(2271);
			((Neighbor_update_source_rb_stanzaContext)_localctx).neighbor = _input.LT(1);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
				((Neighbor_update_source_rb_stanzaContext)_localctx).neighbor = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(2272); match(UPDATE_SOURCE);
			setState(2273); ((Neighbor_update_source_rb_stanzaContext)_localctx).source = match(VARIABLE);
			setState(2274); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_af_stanzaContext extends ParserRuleContext {
		public Network_tail_bgpContext network_tail_bgp() {
			return getRuleContext(Network_tail_bgpContext.class,0);
		}
		public Network_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNetwork_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNetwork_af_stanza(this);
		}
	}

	public final Network_af_stanzaContext network_af_stanza() throws RecognitionException {
		Network_af_stanzaContext _localctx = new Network_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_network_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2276); network_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_rb_stanzaContext extends ParserRuleContext {
		public Network_tail_bgpContext network_tail_bgp() {
			return getRuleContext(Network_tail_bgpContext.class,0);
		}
		public Network_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNetwork_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNetwork_rb_stanza(this);
		}
	}

	public final Network_rb_stanzaContext network_rb_stanza() throws RecognitionException {
		Network_rb_stanzaContext _localctx = new Network_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_network_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2278); network_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_tail_bgpContext extends ParserRuleContext {
		public Token ip;
		public Token mask;
		public Token prefix;
		public Token mapname;
		public TerminalNode ROUTE_MAP() { return getToken(CiscoGrammar.ROUTE_MAP, 0); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public List<TerminalNode> IP_ADDRESS() { return getTokens(CiscoGrammar.IP_ADDRESS); }
		public TerminalNode IP_ADDRESS(int i) {
			return getToken(CiscoGrammar.IP_ADDRESS, i);
		}
		public TerminalNode MASK() { return getToken(CiscoGrammar.MASK, 0); }
		public TerminalNode IP_PREFIX() { return getToken(CiscoGrammar.IP_PREFIX, 0); }
		public TerminalNode NETWORK() { return getToken(CiscoGrammar.NETWORK, 0); }
		public Network_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNetwork_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNetwork_tail_bgp(this);
		}
	}

	public final Network_tail_bgpContext network_tail_bgp() throws RecognitionException {
		Network_tail_bgpContext _localctx = new Network_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_network_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2280); match(NETWORK);
			setState(2287);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				{
				{
				setState(2281); ((Network_tail_bgpContext)_localctx).ip = match(IP_ADDRESS);
				setState(2284);
				_la = _input.LA(1);
				if (_la==MASK) {
					{
					setState(2282); match(MASK);
					setState(2283); ((Network_tail_bgpContext)_localctx).mask = match(IP_ADDRESS);
					}
				}

				}
				}
				break;
			case IP_PREFIX:
				{
				setState(2286); ((Network_tail_bgpContext)_localctx).prefix = match(IP_PREFIX);
				}
				break;
			case ROUTE_MAP:
			case NEWLINE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2291);
			_la = _input.LA(1);
			if (_la==ROUTE_MAP) {
				{
				setState(2289); match(ROUTE_MAP);
				setState(2290); ((Network_tail_bgpContext)_localctx).mapname = match(VARIABLE);
				}
			}

			setState(2293); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network6_af_stanzaContext extends ParserRuleContext {
		public Network6_tail_bgpContext network6_tail_bgp() {
			return getRuleContext(Network6_tail_bgpContext.class,0);
		}
		public Network6_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network6_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNetwork6_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNetwork6_af_stanza(this);
		}
	}

	public final Network6_af_stanzaContext network6_af_stanza() throws RecognitionException {
		Network6_af_stanzaContext _localctx = new Network6_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_network6_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2295); network6_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network6_rb_stanzaContext extends ParserRuleContext {
		public Network6_tail_bgpContext network6_tail_bgp() {
			return getRuleContext(Network6_tail_bgpContext.class,0);
		}
		public Network6_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network6_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNetwork6_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNetwork6_rb_stanza(this);
		}
	}

	public final Network6_rb_stanzaContext network6_rb_stanza() throws RecognitionException {
		Network6_rb_stanzaContext _localctx = new Network6_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_network6_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2297); network6_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network6_tail_bgpContext extends ParserRuleContext {
		public Token address;
		public Token prefix;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode IPV6_ADDRESS() { return getToken(CiscoGrammar.IPV6_ADDRESS, 0); }
		public TerminalNode IPV6_PREFIX() { return getToken(CiscoGrammar.IPV6_PREFIX, 0); }
		public TerminalNode NETWORK() { return getToken(CiscoGrammar.NETWORK, 0); }
		public Network6_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network6_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNetwork6_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNetwork6_tail_bgp(this);
		}
	}

	public final Network6_tail_bgpContext network6_tail_bgp() throws RecognitionException {
		Network6_tail_bgpContext _localctx = new Network6_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_network6_tail_bgp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2299); match(NETWORK);
			setState(2302);
			switch (_input.LA(1)) {
			case IPV6_ADDRESS:
				{
				setState(2300); ((Network6_tail_bgpContext)_localctx).address = match(IPV6_ADDRESS);
				}
				break;
			case IPV6_PREFIX:
				{
				setState(2301); ((Network6_tail_bgpContext)_localctx).prefix = match(IPV6_PREFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2304); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class No_neighbor_activate_af_stanzaContext extends ParserRuleContext {
		public Token pg;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public TerminalNode ACTIVATE() { return getToken(CiscoGrammar.ACTIVATE, 0); }
		public No_neighbor_activate_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_no_neighbor_activate_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNo_neighbor_activate_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNo_neighbor_activate_af_stanza(this);
		}
	}

	public final No_neighbor_activate_af_stanzaContext no_neighbor_activate_af_stanza() throws RecognitionException {
		No_neighbor_activate_af_stanzaContext _localctx = new No_neighbor_activate_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_no_neighbor_activate_af_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2306); match(NO);
			setState(2307); match(NEIGHBOR);
			setState(2308);
			((No_neighbor_activate_af_stanzaContext)_localctx).pg = _input.LT(1);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
				((No_neighbor_activate_af_stanzaContext)_localctx).pg = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(2309); match(ACTIVATE);
			setState(2310); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_af_stanzaContext extends ParserRuleContext {
		public Neighbor_remove_private_as_af_stanzaContext neighbor_remove_private_as_af_stanza() {
			return getRuleContext(Neighbor_remove_private_as_af_stanzaContext.class,0);
		}
		public No_neighbor_activate_af_stanzaContext no_neighbor_activate_af_stanza() {
			return getRuleContext(No_neighbor_activate_af_stanzaContext.class,0);
		}
		public Null_standalone_af_stanzaContext null_standalone_af_stanza() {
			return getRuleContext(Null_standalone_af_stanzaContext.class,0);
		}
		public Null_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_af_stanza(this);
		}
	}

	public final Null_af_stanzaContext null_af_stanza() throws RecognitionException {
		Null_af_stanzaContext _localctx = new Null_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_null_af_stanza);
		try {
			setState(2315);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2312); neighbor_remove_private_as_af_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2313); no_neighbor_activate_af_stanza();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2314); null_standalone_af_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_rb_stanzaContext extends ParserRuleContext {
		public Null_standalone_rb_stanzaContext null_standalone_rb_stanza() {
			return getRuleContext(Null_standalone_rb_stanzaContext.class,0);
		}
		public Template_peer_stanzaContext template_peer_stanza() {
			return getRuleContext(Template_peer_stanzaContext.class,0);
		}
		public Null_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_rb_stanza(this);
		}
	}

	public final Null_rb_stanzaContext null_rb_stanza() throws RecognitionException {
		Null_rb_stanzaContext _localctx = new Null_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_null_rb_stanza);
		try {
			setState(2319);
			switch (_input.LA(1)) {
			case TEMPLATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2317); template_peer_stanza();
				}
				break;
			case AUTO_SUMMARY:
			case BESTPATH:
			case BGP:
			case LOG_NEIGHBOR_CHANGES:
			case MAXIMUM_PATHS:
			case NEIGHBOR:
			case NO:
			case SYNCHRONIZATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(2318); null_standalone_rb_stanza();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_standalone_af_stanzaContext extends ParserRuleContext {
		public TerminalNode SOFT_RECONFIGURATION() { return getToken(CiscoGrammar.SOFT_RECONFIGURATION, 0); }
		public TerminalNode ROUTE_MAP() { return getToken(CiscoGrammar.ROUTE_MAP, 0); }
		public TerminalNode IPV6_ADDRESS() { return getToken(CiscoGrammar.IPV6_ADDRESS, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode ALLOWAS_IN() { return getToken(CiscoGrammar.ALLOWAS_IN, 0); }
		public TerminalNode TIMERS() { return getToken(CiscoGrammar.TIMERS, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public TerminalNode MAXIMUM_PREFIX() { return getToken(CiscoGrammar.MAXIMUM_PREFIX, 0); }
		public TerminalNode PASSWORD() { return getToken(CiscoGrammar.PASSWORD, 0); }
		public TerminalNode AGGREGATE_ADDRESS() { return getToken(CiscoGrammar.AGGREGATE_ADDRESS, 0); }
		public TerminalNode SEND_COMMUNITY() { return getToken(CiscoGrammar.SEND_COMMUNITY, 0); }
		public TerminalNode SYNCHRONIZATION() { return getToken(CiscoGrammar.SYNCHRONIZATION, 0); }
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode SEND_LABEL() { return getToken(CiscoGrammar.SEND_LABEL, 0); }
		public TerminalNode BGP() { return getToken(CiscoGrammar.BGP, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode MAXIMUM_PATHS() { return getToken(CiscoGrammar.MAXIMUM_PATHS, 0); }
		public TerminalNode AUTO_SUMMARY() { return getToken(CiscoGrammar.AUTO_SUMMARY, 0); }
		public TerminalNode NEXT_HOP_SELF() { return getToken(CiscoGrammar.NEXT_HOP_SELF, 0); }
		public Null_standalone_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_standalone_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_standalone_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_standalone_af_stanza(this);
		}
	}

	public final Null_standalone_af_stanzaContext null_standalone_af_stanza() throws RecognitionException {
		Null_standalone_af_stanzaContext _localctx = new Null_standalone_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_null_standalone_af_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2322);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(2321); match(NO);
				}
			}

			setState(2338);
			switch (_input.LA(1)) {
			case AGGREGATE_ADDRESS:
				{
				{
				setState(2324); match(AGGREGATE_ADDRESS);
				setState(2325); match(IPV6_ADDRESS);
				}
				}
				break;
			case ALLOWAS_IN:
				{
				setState(2326); match(ALLOWAS_IN);
				}
				break;
			case AUTO_SUMMARY:
				{
				setState(2327); match(AUTO_SUMMARY);
				}
				break;
			case BGP:
				{
				setState(2328); match(BGP);
				}
				break;
			case MAXIMUM_PATHS:
				{
				setState(2329); match(MAXIMUM_PATHS);
				}
				break;
			case SEND_COMMUNITY:
				{
				setState(2330); match(SEND_COMMUNITY);
				}
				break;
			case SOFT_RECONFIGURATION:
				{
				setState(2331); match(SOFT_RECONFIGURATION);
				}
				break;
			case ROUTE_MAP:
				{
				setState(2332); match(ROUTE_MAP);
				}
				break;
			case MAXIMUM_PREFIX:
				{
				setState(2333); match(MAXIMUM_PREFIX);
				}
				break;
			case NEIGHBOR:
				{
				{
				setState(2334); match(NEIGHBOR);
				setState(2335);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2336);
				_la = _input.LA(1);
				if ( !(_la==MAXIMUM_PREFIX || _la==NEXT_HOP_SELF || _la==PASSWORD || _la==SEND_LABEL || _la==SOFT_RECONFIGURATION || _la==TIMERS) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				break;
			case SYNCHRONIZATION:
				{
				setState(2337); match(SYNCHRONIZATION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(2340);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2345);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2346); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_standalone_rb_stanzaContext extends ParserRuleContext {
		public TerminalNode DETERMINISTIC_MED() { return getToken(CiscoGrammar.DETERMINISTIC_MED, 0); }
		public TerminalNode MAXIMUM_ROUTES() { return getToken(CiscoGrammar.MAXIMUM_ROUTES, 0); }
		public TerminalNode REMOVE_PRIVATE_AS() { return getToken(CiscoGrammar.REMOVE_PRIVATE_AS, 0); }
		public TerminalNode VERSION() { return getToken(CiscoGrammar.VERSION, 0); }
		public TerminalNode TIMERS() { return getToken(CiscoGrammar.TIMERS, 0); }
		public TerminalNode FALL_OVER() { return getToken(CiscoGrammar.FALL_OVER, 0); }
		public TerminalNode DONT_CAPABILITY_NEGOTIATE() { return getToken(CiscoGrammar.DONT_CAPABILITY_NEGOTIATE, 0); }
		public TerminalNode SYNCHRONIZATION() { return getToken(CiscoGrammar.SYNCHRONIZATION, 0); }
		public TerminalNode DEFAULT() { return getToken(CiscoGrammar.DEFAULT, 0); }
		public TerminalNode DAMPENING() { return getToken(CiscoGrammar.DAMPENING, 0); }
		public TerminalNode LOG_NEIGHBOR_CHANGES() { return getToken(CiscoGrammar.LOG_NEIGHBOR_CHANGES, 0); }
		public TerminalNode MAXIMUM_PATHS() { return getToken(CiscoGrammar.MAXIMUM_PATHS, 0); }
		public TerminalNode LISTEN() { return getToken(CiscoGrammar.LISTEN, 0); }
		public TerminalNode DESCRIPTION() { return getToken(CiscoGrammar.DESCRIPTION, 0); }
		public TerminalNode SOFT_RECONFIGURATION() { return getToken(CiscoGrammar.SOFT_RECONFIGURATION, 0); }
		public TerminalNode ALWAYS_COMPARE_MED() { return getToken(CiscoGrammar.ALWAYS_COMPARE_MED, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public TerminalNode BESTPATH() { return getToken(CiscoGrammar.BESTPATH, 0); }
		public TerminalNode MAXIMUM_PREFIX() { return getToken(CiscoGrammar.MAXIMUM_PREFIX, 0); }
		public TerminalNode PASSWORD() { return getToken(CiscoGrammar.PASSWORD, 0); }
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode TRANSPORT() { return getToken(CiscoGrammar.TRANSPORT, 0); }
		public TerminalNode BGP() { return getToken(CiscoGrammar.BGP, 0); }
		public TerminalNode NEIGHBOR() { return getToken(CiscoGrammar.NEIGHBOR, 0); }
		public TerminalNode AUTO_SUMMARY() { return getToken(CiscoGrammar.AUTO_SUMMARY, 0); }
		public TerminalNode GRACEFUL_RESTART() { return getToken(CiscoGrammar.GRACEFUL_RESTART, 0); }
		public Null_standalone_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_standalone_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_standalone_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_standalone_rb_stanza(this);
		}
	}

	public final Null_standalone_rb_stanzaContext null_standalone_rb_stanza() throws RecognitionException {
		Null_standalone_rb_stanzaContext _localctx = new Null_standalone_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_null_standalone_rb_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2349);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(2348); match(NO);
				}
			}

			setState(2361);
			switch (_input.LA(1)) {
			case AUTO_SUMMARY:
				{
				setState(2351); match(AUTO_SUMMARY);
				}
				break;
			case BESTPATH:
				{
				setState(2352); match(BESTPATH);
				}
				break;
			case BGP:
				{
				{
				setState(2353); match(BGP);
				setState(2354);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS_COMPARE_MED || _la==BESTPATH || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (DAMPENING - 150)) | (1L << (DEFAULT - 150)) | (1L << (DETERMINISTIC_MED - 150)))) != 0) || _la==GRACEFUL_RESTART || _la==LISTEN || _la==LOG_NEIGHBOR_CHANGES) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				break;
			case LOG_NEIGHBOR_CHANGES:
				{
				setState(2355); match(LOG_NEIGHBOR_CHANGES);
				}
				break;
			case MAXIMUM_PATHS:
				{
				setState(2356); match(MAXIMUM_PATHS);
				}
				break;
			case NEIGHBOR:
				{
				{
				setState(2357); match(NEIGHBOR);
				setState(2358);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2359);
				_la = _input.LA(1);
				if ( !(_la==DESCRIPTION || _la==DONT_CAPABILITY_NEGOTIATE || _la==FALL_OVER || _la==MAXIMUM_PREFIX || _la==MAXIMUM_ROUTES || _la==PASSWORD || _la==REMOVE_PRIVATE_AS || _la==SOFT_RECONFIGURATION || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (TIMERS - 719)) | (1L << (TRANSPORT - 719)) | (1L << (VERSION - 719)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				break;
			case SYNCHRONIZATION:
				{
				setState(2360); match(SYNCHRONIZATION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(2363);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2368);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2369); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_template_peer_stanzaContext extends ParserRuleContext {
		public Address_family_rb_stanzaContext address_family_rb_stanza() {
			return getRuleContext(Address_family_rb_stanzaContext.class,0);
		}
		public Null_template_peer_standalone_stanzaContext null_template_peer_standalone_stanza() {
			return getRuleContext(Null_template_peer_standalone_stanzaContext.class,0);
		}
		public Null_template_peer_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_template_peer_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_template_peer_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_template_peer_stanza(this);
		}
	}

	public final Null_template_peer_stanzaContext null_template_peer_stanza() throws RecognitionException {
		Null_template_peer_stanzaContext _localctx = new Null_template_peer_stanzaContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_null_template_peer_stanza);
		try {
			setState(2373);
			switch (_input.LA(1)) {
			case ADDRESS_FAMILY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2371); address_family_rb_stanza();
				}
				break;
			case DESCRIPTION:
			case EBGP_MULTIHOP:
			case PASSWORD:
			case REMOVE_PRIVATE_AS:
			case SHUTDOWN:
			case TIMERS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2372); null_template_peer_standalone_stanza();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_template_peer_standalone_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode SHUTDOWN() { return getToken(CiscoGrammar.SHUTDOWN, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode REMOVE_PRIVATE_AS() { return getToken(CiscoGrammar.REMOVE_PRIVATE_AS, 0); }
		public TerminalNode TIMERS() { return getToken(CiscoGrammar.TIMERS, 0); }
		public TerminalNode EBGP_MULTIHOP() { return getToken(CiscoGrammar.EBGP_MULTIHOP, 0); }
		public TerminalNode PASSWORD() { return getToken(CiscoGrammar.PASSWORD, 0); }
		public TerminalNode DESCRIPTION() { return getToken(CiscoGrammar.DESCRIPTION, 0); }
		public Null_template_peer_standalone_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_template_peer_standalone_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_template_peer_standalone_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_template_peer_standalone_stanza(this);
		}
	}

	public final Null_template_peer_standalone_stanzaContext null_template_peer_standalone_stanza() throws RecognitionException {
		Null_template_peer_standalone_stanzaContext _localctx = new Null_template_peer_standalone_stanzaContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_null_template_peer_standalone_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2375);
			_la = _input.LA(1);
			if ( !(_la==DESCRIPTION || _la==EBGP_MULTIHOP || _la==PASSWORD || _la==REMOVE_PRIVATE_AS || _la==SHUTDOWN || _la==TIMERS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(2376);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2381);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2382); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rb_stanzaContext extends ParserRuleContext {
		public Router_id_bgp_rb_stanzaContext router_id_bgp_rb_stanza() {
			return getRuleContext(Router_id_bgp_rb_stanzaContext.class,0);
		}
		public Null_rb_stanzaContext null_rb_stanza() {
			return getRuleContext(Null_rb_stanzaContext.class,0);
		}
		public Default_metric_rb_stanzaContext default_metric_rb_stanza() {
			return getRuleContext(Default_metric_rb_stanzaContext.class,0);
		}
		public Network6_rb_stanzaContext network6_rb_stanza() {
			return getRuleContext(Network6_rb_stanzaContext.class,0);
		}
		public Neighbor_next_hop_self_rb_stanzaContext neighbor_next_hop_self_rb_stanza() {
			return getRuleContext(Neighbor_next_hop_self_rb_stanzaContext.class,0);
		}
		public Redistribute_static_rb_stanzaContext redistribute_static_rb_stanza() {
			return getRuleContext(Redistribute_static_rb_stanzaContext.class,0);
		}
		public Neighbor_ebgp_multihop_rb_stanzaContext neighbor_ebgp_multihop_rb_stanza() {
			return getRuleContext(Neighbor_ebgp_multihop_rb_stanzaContext.class,0);
		}
		public Redistribute_aggregate_rb_stanzaContext redistribute_aggregate_rb_stanza() {
			return getRuleContext(Redistribute_aggregate_rb_stanzaContext.class,0);
		}
		public Neighbor_remote_as_rb_stanzaContext neighbor_remote_as_rb_stanza() {
			return getRuleContext(Neighbor_remote_as_rb_stanzaContext.class,0);
		}
		public Redistribute_ospf_rb_stanzaContext redistribute_ospf_rb_stanza() {
			return getRuleContext(Redistribute_ospf_rb_stanzaContext.class,0);
		}
		public Aggregate_address_rb_stanzaContext aggregate_address_rb_stanza() {
			return getRuleContext(Aggregate_address_rb_stanzaContext.class,0);
		}
		public Network_rb_stanzaContext network_rb_stanza() {
			return getRuleContext(Network_rb_stanzaContext.class,0);
		}
		public Neighbor_shutdown_rb_stanzaContext neighbor_shutdown_rb_stanza() {
			return getRuleContext(Neighbor_shutdown_rb_stanzaContext.class,0);
		}
		public Neighbor_default_originate_rb_stanzaContext neighbor_default_originate_rb_stanza() {
			return getRuleContext(Neighbor_default_originate_rb_stanzaContext.class,0);
		}
		public Neighbor_update_source_rb_stanzaContext neighbor_update_source_rb_stanza() {
			return getRuleContext(Neighbor_update_source_rb_stanzaContext.class,0);
		}
		public Neighbor_description_rb_stanzaContext neighbor_description_rb_stanza() {
			return getRuleContext(Neighbor_description_rb_stanzaContext.class,0);
		}
		public Neighbor_prefix_list_rb_stanzaContext neighbor_prefix_list_rb_stanza() {
			return getRuleContext(Neighbor_prefix_list_rb_stanzaContext.class,0);
		}
		public Redistribute_connected_rb_stanzaContext redistribute_connected_rb_stanza() {
			return getRuleContext(Redistribute_connected_rb_stanzaContext.class,0);
		}
		public Neighbor_distribute_list_rb_stanzaContext neighbor_distribute_list_rb_stanza() {
			return getRuleContext(Neighbor_distribute_list_rb_stanzaContext.class,0);
		}
		public Cluster_id_bgp_rb_stanzaContext cluster_id_bgp_rb_stanza() {
			return getRuleContext(Cluster_id_bgp_rb_stanzaContext.class,0);
		}
		public Neighbor_peer_group_assignment_rb_stanzaContext neighbor_peer_group_assignment_rb_stanza() {
			return getRuleContext(Neighbor_peer_group_assignment_rb_stanzaContext.class,0);
		}
		public Neighbor_route_map_rb_stanzaContext neighbor_route_map_rb_stanza() {
			return getRuleContext(Neighbor_route_map_rb_stanzaContext.class,0);
		}
		public Neighbor_peer_group_creation_rb_stanzaContext neighbor_peer_group_creation_rb_stanza() {
			return getRuleContext(Neighbor_peer_group_creation_rb_stanzaContext.class,0);
		}
		public Neighbor_filter_list_rb_stanzaContext neighbor_filter_list_rb_stanza() {
			return getRuleContext(Neighbor_filter_list_rb_stanzaContext.class,0);
		}
		public Neighbor_send_community_rb_stanzaContext neighbor_send_community_rb_stanza() {
			return getRuleContext(Neighbor_send_community_rb_stanzaContext.class,0);
		}
		public Vrf_rb_stanzaContext vrf_rb_stanza() {
			return getRuleContext(Vrf_rb_stanzaContext.class,0);
		}
		public Neighbor_nexus_stanzaContext neighbor_nexus_stanza() {
			return getRuleContext(Neighbor_nexus_stanzaContext.class,0);
		}
		public Rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRb_stanza(this);
		}
	}

	public final Rb_stanzaContext rb_stanza() throws RecognitionException {
		Rb_stanzaContext _localctx = new Rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_rb_stanza);
		try {
			setState(2411);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2384); aggregate_address_rb_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2385); cluster_id_bgp_rb_stanza();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2386); default_metric_rb_stanza();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2387); neighbor_default_originate_rb_stanza();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2388); neighbor_description_rb_stanza();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2389); neighbor_distribute_list_rb_stanza();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2390); neighbor_ebgp_multihop_rb_stanza();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2391); neighbor_filter_list_rb_stanza();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2392); neighbor_next_hop_self_rb_stanza();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2393); neighbor_nexus_stanza();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2394); neighbor_peer_group_creation_rb_stanza();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2395); neighbor_peer_group_assignment_rb_stanza();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2396); neighbor_prefix_list_rb_stanza();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2397); neighbor_remote_as_rb_stanza();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2398); neighbor_route_map_rb_stanza();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2399); neighbor_send_community_rb_stanza();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2400); neighbor_shutdown_rb_stanza();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2401); neighbor_update_source_rb_stanza();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2402); network_rb_stanza();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2403); network6_rb_stanza();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2404); null_rb_stanza();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2405); redistribute_aggregate_rb_stanza();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2406); redistribute_connected_rb_stanza();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2407); redistribute_ospf_rb_stanza();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2408); redistribute_static_rb_stanza();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2409); router_id_bgp_rb_stanza();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2410); vrf_rb_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_aggregate_af_stanzaContext extends ParserRuleContext {
		public Redistribute_aggregate_tail_bgpContext redistribute_aggregate_tail_bgp() {
			return getRuleContext(Redistribute_aggregate_tail_bgpContext.class,0);
		}
		public Redistribute_aggregate_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_aggregate_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_aggregate_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_aggregate_af_stanza(this);
		}
	}

	public final Redistribute_aggregate_af_stanzaContext redistribute_aggregate_af_stanza() throws RecognitionException {
		Redistribute_aggregate_af_stanzaContext _localctx = new Redistribute_aggregate_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_redistribute_aggregate_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2413); redistribute_aggregate_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_aggregate_rb_stanzaContext extends ParserRuleContext {
		public Redistribute_aggregate_tail_bgpContext redistribute_aggregate_tail_bgp() {
			return getRuleContext(Redistribute_aggregate_tail_bgpContext.class,0);
		}
		public Redistribute_aggregate_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_aggregate_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_aggregate_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_aggregate_rb_stanza(this);
		}
	}

	public final Redistribute_aggregate_rb_stanzaContext redistribute_aggregate_rb_stanza() throws RecognitionException {
		Redistribute_aggregate_rb_stanzaContext _localctx = new Redistribute_aggregate_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_redistribute_aggregate_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2415); redistribute_aggregate_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_aggregate_tail_bgpContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode REDISTRIBUTE() { return getToken(CiscoGrammar.REDISTRIBUTE, 0); }
		public TerminalNode AGGREGATE() { return getToken(CiscoGrammar.AGGREGATE, 0); }
		public Redistribute_aggregate_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_aggregate_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_aggregate_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_aggregate_tail_bgp(this);
		}
	}

	public final Redistribute_aggregate_tail_bgpContext redistribute_aggregate_tail_bgp() throws RecognitionException {
		Redistribute_aggregate_tail_bgpContext _localctx = new Redistribute_aggregate_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_redistribute_aggregate_tail_bgp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2417); match(REDISTRIBUTE);
			setState(2418); match(AGGREGATE);
			setState(2419); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_connected_af_stanzaContext extends ParserRuleContext {
		public Redistribute_connected_tail_bgpContext redistribute_connected_tail_bgp() {
			return getRuleContext(Redistribute_connected_tail_bgpContext.class,0);
		}
		public Redistribute_connected_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_connected_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_connected_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_connected_af_stanza(this);
		}
	}

	public final Redistribute_connected_af_stanzaContext redistribute_connected_af_stanza() throws RecognitionException {
		Redistribute_connected_af_stanzaContext _localctx = new Redistribute_connected_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_redistribute_connected_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2421); redistribute_connected_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_connected_rb_stanzaContext extends ParserRuleContext {
		public Redistribute_connected_tail_bgpContext redistribute_connected_tail_bgp() {
			return getRuleContext(Redistribute_connected_tail_bgpContext.class,0);
		}
		public Redistribute_connected_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_connected_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_connected_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_connected_rb_stanza(this);
		}
	}

	public final Redistribute_connected_rb_stanzaContext redistribute_connected_rb_stanza() throws RecognitionException {
		Redistribute_connected_rb_stanzaContext _localctx = new Redistribute_connected_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_redistribute_connected_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2423); redistribute_connected_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_connected_tail_bgpContext extends ParserRuleContext {
		public Token map;
		public Token metric;
		public List<TerminalNode> ROUTE_MAP() { return getTokens(CiscoGrammar.ROUTE_MAP); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode REDISTRIBUTE() { return getToken(CiscoGrammar.REDISTRIBUTE, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<TerminalNode> VARIABLE() { return getTokens(CiscoGrammar.VARIABLE); }
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode METRIC(int i) {
			return getToken(CiscoGrammar.METRIC, i);
		}
		public List<TerminalNode> METRIC() { return getTokens(CiscoGrammar.METRIC); }
		public TerminalNode VARIABLE(int i) {
			return getToken(CiscoGrammar.VARIABLE, i);
		}
		public TerminalNode CONNECTED() { return getToken(CiscoGrammar.CONNECTED, 0); }
		public TerminalNode ROUTE_MAP(int i) {
			return getToken(CiscoGrammar.ROUTE_MAP, i);
		}
		public Redistribute_connected_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_connected_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_connected_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_connected_tail_bgp(this);
		}
	}

	public final Redistribute_connected_tail_bgpContext redistribute_connected_tail_bgp() throws RecognitionException {
		Redistribute_connected_tail_bgpContext _localctx = new Redistribute_connected_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_redistribute_connected_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2425); match(REDISTRIBUTE);
			setState(2426); match(CONNECTED);
			setState(2433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==METRIC || _la==ROUTE_MAP) {
				{
				setState(2431);
				switch (_input.LA(1)) {
				case ROUTE_MAP:
					{
					{
					setState(2427); match(ROUTE_MAP);
					setState(2428); ((Redistribute_connected_tail_bgpContext)_localctx).map = match(VARIABLE);
					}
					}
					break;
				case METRIC:
					{
					{
					setState(2429); match(METRIC);
					setState(2430); ((Redistribute_connected_tail_bgpContext)_localctx).metric = match(DEC);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2435);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2436); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_ospf_rb_stanzaContext extends ParserRuleContext {
		public Redistribute_ospf_tail_bgpContext redistribute_ospf_tail_bgp() {
			return getRuleContext(Redistribute_ospf_tail_bgpContext.class,0);
		}
		public Redistribute_ospf_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_ospf_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_ospf_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_ospf_rb_stanza(this);
		}
	}

	public final Redistribute_ospf_rb_stanzaContext redistribute_ospf_rb_stanza() throws RecognitionException {
		Redistribute_ospf_rb_stanzaContext _localctx = new Redistribute_ospf_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_redistribute_ospf_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2438); redistribute_ospf_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_ospf_af_stanzaContext extends ParserRuleContext {
		public Redistribute_ospf_tail_bgpContext redistribute_ospf_tail_bgp() {
			return getRuleContext(Redistribute_ospf_tail_bgpContext.class,0);
		}
		public Redistribute_ospf_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_ospf_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_ospf_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_ospf_af_stanza(this);
		}
	}

	public final Redistribute_ospf_af_stanzaContext redistribute_ospf_af_stanza() throws RecognitionException {
		Redistribute_ospf_af_stanzaContext _localctx = new Redistribute_ospf_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_redistribute_ospf_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2440); redistribute_ospf_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_ospf_tail_bgpContext extends ParserRuleContext {
		public Token procnum;
		public Token map;
		public Token metric;
		public List<TerminalNode> ROUTE_MAP() { return getTokens(CiscoGrammar.ROUTE_MAP); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode OSPF() { return getToken(CiscoGrammar.OSPF, 0); }
		public TerminalNode REDISTRIBUTE() { return getToken(CiscoGrammar.REDISTRIBUTE, 0); }
		public List<TerminalNode> VARIABLE() { return getTokens(CiscoGrammar.VARIABLE); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public TerminalNode METRIC(int i) {
			return getToken(CiscoGrammar.METRIC, i);
		}
		public List<TerminalNode> METRIC() { return getTokens(CiscoGrammar.METRIC); }
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode VARIABLE(int i) {
			return getToken(CiscoGrammar.VARIABLE, i);
		}
		public TerminalNode ROUTE_MAP(int i) {
			return getToken(CiscoGrammar.ROUTE_MAP, i);
		}
		public Redistribute_ospf_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_ospf_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_ospf_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_ospf_tail_bgp(this);
		}
	}

	public final Redistribute_ospf_tail_bgpContext redistribute_ospf_tail_bgp() throws RecognitionException {
		Redistribute_ospf_tail_bgpContext _localctx = new Redistribute_ospf_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_redistribute_ospf_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2442); match(REDISTRIBUTE);
			setState(2443); match(OSPF);
			setState(2444); ((Redistribute_ospf_tail_bgpContext)_localctx).procnum = match(DEC);
			setState(2451);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==METRIC || _la==ROUTE_MAP) {
				{
				setState(2449);
				switch (_input.LA(1)) {
				case ROUTE_MAP:
					{
					{
					setState(2445); match(ROUTE_MAP);
					setState(2446); ((Redistribute_ospf_tail_bgpContext)_localctx).map = match(VARIABLE);
					}
					}
					break;
				case METRIC:
					{
					{
					setState(2447); match(METRIC);
					setState(2448); ((Redistribute_ospf_tail_bgpContext)_localctx).metric = match(DEC);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2453);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2454); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_static_af_stanzaContext extends ParserRuleContext {
		public Redistribute_static_tail_bgpContext redistribute_static_tail_bgp() {
			return getRuleContext(Redistribute_static_tail_bgpContext.class,0);
		}
		public Redistribute_static_af_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_static_af_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_static_af_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_static_af_stanza(this);
		}
	}

	public final Redistribute_static_af_stanzaContext redistribute_static_af_stanza() throws RecognitionException {
		Redistribute_static_af_stanzaContext _localctx = new Redistribute_static_af_stanzaContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_redistribute_static_af_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2456); redistribute_static_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_static_rb_stanzaContext extends ParserRuleContext {
		public Redistribute_static_tail_bgpContext redistribute_static_tail_bgp() {
			return getRuleContext(Redistribute_static_tail_bgpContext.class,0);
		}
		public Redistribute_static_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_static_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_static_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_static_rb_stanza(this);
		}
	}

	public final Redistribute_static_rb_stanzaContext redistribute_static_rb_stanza() throws RecognitionException {
		Redistribute_static_rb_stanzaContext _localctx = new Redistribute_static_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_redistribute_static_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2458); redistribute_static_tail_bgp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_static_tail_bgpContext extends ParserRuleContext {
		public Token map;
		public Token metric;
		public List<TerminalNode> ROUTE_MAP() { return getTokens(CiscoGrammar.ROUTE_MAP); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode REDISTRIBUTE() { return getToken(CiscoGrammar.REDISTRIBUTE, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<TerminalNode> VARIABLE() { return getTokens(CiscoGrammar.VARIABLE); }
		public TerminalNode DIRECT() { return getToken(CiscoGrammar.DIRECT, 0); }
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode METRIC(int i) {
			return getToken(CiscoGrammar.METRIC, i);
		}
		public List<TerminalNode> METRIC() { return getTokens(CiscoGrammar.METRIC); }
		public TerminalNode VARIABLE(int i) {
			return getToken(CiscoGrammar.VARIABLE, i);
		}
		public TerminalNode STATIC() { return getToken(CiscoGrammar.STATIC, 0); }
		public TerminalNode ROUTE_MAP(int i) {
			return getToken(CiscoGrammar.ROUTE_MAP, i);
		}
		public Redistribute_static_tail_bgpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_static_tail_bgp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_static_tail_bgp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_static_tail_bgp(this);
		}
	}

	public final Redistribute_static_tail_bgpContext redistribute_static_tail_bgp() throws RecognitionException {
		Redistribute_static_tail_bgpContext _localctx = new Redistribute_static_tail_bgpContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_redistribute_static_tail_bgp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2460); match(REDISTRIBUTE);
			setState(2461);
			_la = _input.LA(1);
			if ( !(_la==DIRECT || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==METRIC || _la==ROUTE_MAP) {
				{
				setState(2466);
				switch (_input.LA(1)) {
				case ROUTE_MAP:
					{
					{
					setState(2462); match(ROUTE_MAP);
					setState(2463); ((Redistribute_static_tail_bgpContext)_localctx).map = match(VARIABLE);
					}
					}
					break;
				case METRIC:
					{
					{
					setState(2464); match(METRIC);
					setState(2465); ((Redistribute_static_tail_bgpContext)_localctx).metric = match(DEC);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2470);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2471); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Router_bgp_stanzaContext extends ParserRuleContext {
		public Token procnum;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode ROUTER() { return getToken(CiscoGrammar.ROUTER, 0); }
		public TerminalNode BGP() { return getToken(CiscoGrammar.BGP, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Router_bgp_stanza_tailContext router_bgp_stanza_tail() {
			return getRuleContext(Router_bgp_stanza_tailContext.class,0);
		}
		public Router_bgp_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_router_bgp_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRouter_bgp_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRouter_bgp_stanza(this);
		}
	}

	public final Router_bgp_stanzaContext router_bgp_stanza() throws RecognitionException {
		Router_bgp_stanzaContext _localctx = new Router_bgp_stanzaContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_router_bgp_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2473); match(ROUTER);
			setState(2474); match(BGP);
			setState(2475); ((Router_bgp_stanzaContext)_localctx).procnum = match(DEC);
			setState(2476); match(NEWLINE);
			setState(2477); router_bgp_stanza_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Router_bgp_stanza_tailContext extends ParserRuleContext {
		public Rb_stanzaContext rb_stanza;
		public List<Rb_stanzaContext> rbsl = new ArrayList<Rb_stanzaContext>();
		public Address_family_rb_stanzaContext address_family_rb_stanza;
		public List<Address_family_rb_stanzaContext> afrbsl = new ArrayList<Address_family_rb_stanzaContext>();
		public List<Rb_stanzaContext> rb_stanza() {
			return getRuleContexts(Rb_stanzaContext.class);
		}
		public List<Address_family_rb_stanzaContext> address_family_rb_stanza() {
			return getRuleContexts(Address_family_rb_stanzaContext.class);
		}
		public Rb_stanzaContext rb_stanza(int i) {
			return getRuleContext(Rb_stanzaContext.class,i);
		}
		public Address_family_rb_stanzaContext address_family_rb_stanza(int i) {
			return getRuleContext(Address_family_rb_stanzaContext.class,i);
		}
		public Router_bgp_stanza_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_router_bgp_stanza_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRouter_bgp_stanza_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRouter_bgp_stanza_tail(this);
		}
	}

	public final Router_bgp_stanza_tailContext router_bgp_stanza_tail() throws RecognitionException {
		Router_bgp_stanza_tailContext _localctx = new Router_bgp_stanza_tailContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_router_bgp_stanza_tail);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2483);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,164,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2481);
					switch (_input.LA(1)) {
					case AGGREGATE_ADDRESS:
					case AUTO_SUMMARY:
					case BESTPATH:
					case BGP:
					case DEFAULT_METRIC:
					case LOG_NEIGHBOR_CHANGES:
					case MAXIMUM_PATHS:
					case NEIGHBOR:
					case NETWORK:
					case NO:
					case REDISTRIBUTE:
					case SYNCHRONIZATION:
					case TEMPLATE:
					case VRF:
						{
						setState(2479); ((Router_bgp_stanza_tailContext)_localctx).rb_stanza = rb_stanza();
						((Router_bgp_stanza_tailContext)_localctx).rbsl.add(((Router_bgp_stanza_tailContext)_localctx).rb_stanza);
						}
						break;
					case ADDRESS_FAMILY:
						{
						setState(2480); ((Router_bgp_stanza_tailContext)_localctx).address_family_rb_stanza = address_family_rb_stanza();
						((Router_bgp_stanza_tailContext)_localctx).afrbsl.add(((Router_bgp_stanza_tailContext)_localctx).address_family_rb_stanza);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2485);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,164,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Router_id_bgp_rb_stanzaContext extends ParserRuleContext {
		public Token routerid;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode BGP() { return getToken(CiscoGrammar.BGP, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode ROUTER_ID() { return getToken(CiscoGrammar.ROUTER_ID, 0); }
		public Router_id_bgp_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_router_id_bgp_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRouter_id_bgp_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRouter_id_bgp_rb_stanza(this);
		}
	}

	public final Router_id_bgp_rb_stanzaContext router_id_bgp_rb_stanza() throws RecognitionException {
		Router_id_bgp_rb_stanzaContext _localctx = new Router_id_bgp_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_router_id_bgp_rb_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2486); match(BGP);
			setState(2487); match(ROUTER_ID);
			setState(2488); ((Router_id_bgp_rb_stanzaContext)_localctx).routerid = match(IP_ADDRESS);
			setState(2489); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Template_peer_remote_asContext extends ParserRuleContext {
		public Token asnum;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode REMOTE_AS() { return getToken(CiscoGrammar.REMOTE_AS, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Template_peer_remote_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_template_peer_remote_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterTemplate_peer_remote_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitTemplate_peer_remote_as(this);
		}
	}

	public final Template_peer_remote_asContext template_peer_remote_as() throws RecognitionException {
		Template_peer_remote_asContext _localctx = new Template_peer_remote_asContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_template_peer_remote_as);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2491); match(REMOTE_AS);
			setState(2492); ((Template_peer_remote_asContext)_localctx).asnum = match(DEC);
			setState(2493); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Template_peer_inheritContext extends ParserRuleContext {
		public Token peer;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode INHERIT() { return getToken(CiscoGrammar.INHERIT, 0); }
		public TerminalNode PEER_SESSION() { return getToken(CiscoGrammar.PEER_SESSION, 0); }
		public Template_peer_inheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_template_peer_inherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterTemplate_peer_inherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitTemplate_peer_inherit(this);
		}
	}

	public final Template_peer_inheritContext template_peer_inherit() throws RecognitionException {
		Template_peer_inheritContext _localctx = new Template_peer_inheritContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_template_peer_inherit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2495); match(INHERIT);
			setState(2496); match(PEER_SESSION);
			setState(2497); ((Template_peer_inheritContext)_localctx).peer = match(VARIABLE);
			setState(2498); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Template_peer_stanzaContext extends ParserRuleContext {
		public Token name;
		public Template_peer_stanza_tailContext template_peer_stanza_tail() {
			return getRuleContext(Template_peer_stanza_tailContext.class,0);
		}
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode PEER() { return getToken(CiscoGrammar.PEER, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode TEMPLATE() { return getToken(CiscoGrammar.TEMPLATE, 0); }
		public Template_peer_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_template_peer_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterTemplate_peer_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitTemplate_peer_stanza(this);
		}
	}

	public final Template_peer_stanzaContext template_peer_stanza() throws RecognitionException {
		Template_peer_stanzaContext _localctx = new Template_peer_stanzaContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_template_peer_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2500); match(TEMPLATE);
			setState(2501); match(PEER);
			setState(2502); ((Template_peer_stanzaContext)_localctx).name = match(VARIABLE);
			setState(2503); match(NEWLINE);
			setState(2504); template_peer_stanza_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Template_peer_stanza_tailContext extends ParserRuleContext {
		public Null_template_peer_stanzaContext null_template_peer_stanza(int i) {
			return getRuleContext(Null_template_peer_stanzaContext.class,i);
		}
		public List<Template_peer_update_sourceContext> template_peer_update_source() {
			return getRuleContexts(Template_peer_update_sourceContext.class);
		}
		public List<Template_peer_inheritContext> template_peer_inherit() {
			return getRuleContexts(Template_peer_inheritContext.class);
		}
		public Template_peer_update_sourceContext template_peer_update_source(int i) {
			return getRuleContext(Template_peer_update_sourceContext.class,i);
		}
		public List<Null_template_peer_stanzaContext> null_template_peer_stanza() {
			return getRuleContexts(Null_template_peer_stanzaContext.class);
		}
		public Template_peer_remote_asContext template_peer_remote_as(int i) {
			return getRuleContext(Template_peer_remote_asContext.class,i);
		}
		public List<Template_peer_remote_asContext> template_peer_remote_as() {
			return getRuleContexts(Template_peer_remote_asContext.class);
		}
		public Template_peer_inheritContext template_peer_inherit(int i) {
			return getRuleContext(Template_peer_inheritContext.class,i);
		}
		public Template_peer_stanza_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_template_peer_stanza_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterTemplate_peer_stanza_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitTemplate_peer_stanza_tail(this);
		}
	}

	public final Template_peer_stanza_tailContext template_peer_stanza_tail() throws RecognitionException {
		Template_peer_stanza_tailContext _localctx = new Template_peer_stanza_tailContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_template_peer_stanza_tail);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2510); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2510);
					switch (_input.LA(1)) {
					case INHERIT:
						{
						setState(2506); template_peer_inherit();
						}
						break;
					case REMOTE_AS:
						{
						setState(2507); template_peer_remote_as();
						}
						break;
					case UPDATE_SOURCE:
						{
						setState(2508); template_peer_update_source();
						}
						break;
					case ADDRESS_FAMILY:
					case DESCRIPTION:
					case EBGP_MULTIHOP:
					case PASSWORD:
					case REMOVE_PRIVATE_AS:
					case SHUTDOWN:
					case TIMERS:
						{
						setState(2509); null_template_peer_stanza();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2512); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Template_peer_update_sourceContext extends ParserRuleContext {
		public Token source;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode UPDATE_SOURCE() { return getToken(CiscoGrammar.UPDATE_SOURCE, 0); }
		public Template_peer_update_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_template_peer_update_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterTemplate_peer_update_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitTemplate_peer_update_source(this);
		}
	}

	public final Template_peer_update_sourceContext template_peer_update_source() throws RecognitionException {
		Template_peer_update_sourceContext _localctx = new Template_peer_update_sourceContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_template_peer_update_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2514); match(UPDATE_SOURCE);
			setState(2515); ((Template_peer_update_sourceContext)_localctx).source = match(VARIABLE);
			setState(2516); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vrf_rb_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public Vrf_rb_substanzaContext vrf_rb_substanza(int i) {
			return getRuleContext(Vrf_rb_substanzaContext.class,i);
		}
		public List<Vrf_rb_substanzaContext> vrf_rb_substanza() {
			return getRuleContexts(Vrf_rb_substanzaContext.class);
		}
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode VRF() { return getToken(CiscoGrammar.VRF, 0); }
		public Vrf_rb_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vrf_rb_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterVrf_rb_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitVrf_rb_stanza(this);
		}
	}

	public final Vrf_rb_stanzaContext vrf_rb_stanza() throws RecognitionException {
		Vrf_rb_stanzaContext _localctx = new Vrf_rb_stanzaContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_vrf_rb_stanza);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2518); match(VRF);
			setState(2519); match(VARIABLE);
			setState(2520); match(NEWLINE);
			setState(2522); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2521); vrf_rb_substanza();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2524); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,167,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vrf_rb_substanzaContext extends ParserRuleContext {
		public Af_vrf_rb_substanzaContext af_vrf_rb_substanza() {
			return getRuleContext(Af_vrf_rb_substanzaContext.class,0);
		}
		public Neighbor_nexus_vrf_rb_substanzaContext neighbor_nexus_vrf_rb_substanza() {
			return getRuleContext(Neighbor_nexus_vrf_rb_substanzaContext.class,0);
		}
		public Vrf_rb_substanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vrf_rb_substanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterVrf_rb_substanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitVrf_rb_substanza(this);
		}
	}

	public final Vrf_rb_substanzaContext vrf_rb_substanza() throws RecognitionException {
		Vrf_rb_substanzaContext _localctx = new Vrf_rb_substanzaContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_vrf_rb_substanza);
		try {
			setState(2528);
			switch (_input.LA(1)) {
			case ADDRESS_FAMILY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2526); af_vrf_rb_substanza();
				}
				break;
			case NEIGHBOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(2527); neighbor_nexus_vrf_rb_substanza();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Description_if_stanzaContext extends ParserRuleContext {
		public Description_lineContext description_line() {
			return getRuleContext(Description_lineContext.class,0);
		}
		public Description_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_description_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterDescription_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitDescription_if_stanza(this);
		}
	}

	public final Description_if_stanzaContext description_if_stanza() throws RecognitionException {
		Description_if_stanzaContext _localctx = new Description_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_description_if_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2530); description_line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hsrp_stanzaContext extends ParserRuleContext {
		public Token group;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode HSRP() { return getToken(CiscoGrammar.HSRP, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Hsrp_stanza_tailContext hsrp_stanza_tail() {
			return getRuleContext(Hsrp_stanza_tailContext.class,0);
		}
		public Hsrp_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hsrp_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterHsrp_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitHsrp_stanza(this);
		}
	}

	public final Hsrp_stanzaContext hsrp_stanza() throws RecognitionException {
		Hsrp_stanzaContext _localctx = new Hsrp_stanzaContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_hsrp_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2532); match(HSRP);
			setState(2533); ((Hsrp_stanzaContext)_localctx).group = match(DEC);
			setState(2534); match(NEWLINE);
			setState(2535); hsrp_stanza_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hsrp_stanza_tailContext extends ParserRuleContext {
		public Hsrpc_stanzaContext hsrpc_stanza;
		public List<Hsrpc_stanzaContext> hsrpcl = new ArrayList<Hsrpc_stanzaContext>();
		public Hsrpc_stanzaContext hsrpc_stanza(int i) {
			return getRuleContext(Hsrpc_stanzaContext.class,i);
		}
		public List<Hsrpc_stanzaContext> hsrpc_stanza() {
			return getRuleContexts(Hsrpc_stanzaContext.class);
		}
		public Hsrp_stanza_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hsrp_stanza_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterHsrp_stanza_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitHsrp_stanza_tail(this);
		}
	}

	public final Hsrp_stanza_tailContext hsrp_stanza_tail() throws RecognitionException {
		Hsrp_stanza_tailContext _localctx = new Hsrp_stanza_tailContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_hsrp_stanza_tail);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2540);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2537); ((Hsrp_stanza_tailContext)_localctx).hsrpc_stanza = hsrpc_stanza();
					((Hsrp_stanza_tailContext)_localctx).hsrpcl.add(((Hsrp_stanza_tailContext)_localctx).hsrpc_stanza);
					}
					} 
				}
				setState(2542);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hsrpc_stanzaContext extends ParserRuleContext {
		public Priority_stanzaContext priority_stanza() {
			return getRuleContext(Priority_stanzaContext.class,0);
		}
		public Preempt_stanzaContext preempt_stanza() {
			return getRuleContext(Preempt_stanzaContext.class,0);
		}
		public Ip_address_stanzaContext ip_address_stanza() {
			return getRuleContext(Ip_address_stanzaContext.class,0);
		}
		public Hsrpc_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hsrpc_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterHsrpc_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitHsrpc_stanza(this);
		}
	}

	public final Hsrpc_stanzaContext hsrpc_stanza() throws RecognitionException {
		Hsrpc_stanzaContext _localctx = new Hsrpc_stanzaContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_hsrpc_stanza);
		try {
			setState(2546);
			switch (_input.LA(1)) {
			case PREEMPT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2543); preempt_stanza();
				}
				break;
			case PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(2544); priority_stanza();
				}
				break;
			case IP:
				enterOuterAlt(_localctx, 3);
				{
				setState(2545); ip_address_stanza();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_stanzaContext extends ParserRuleContext {
		public Switchport_mode_dynamic_auto_stanzaContext switchport_mode_dynamic_auto_stanza() {
			return getRuleContext(Switchport_mode_dynamic_auto_stanzaContext.class,0);
		}
		public Switchport_mode_access_stanzaContext switchport_mode_access_stanza() {
			return getRuleContext(Switchport_mode_access_stanzaContext.class,0);
		}
		public Switchport_trunk_native_if_stanzaContext switchport_trunk_native_if_stanza() {
			return getRuleContext(Switchport_trunk_native_if_stanzaContext.class,0);
		}
		public Ip_access_group_if_stanzaContext ip_access_group_if_stanza() {
			return getRuleContext(Ip_access_group_if_stanzaContext.class,0);
		}
		public Ip_address_if_stanzaContext ip_address_if_stanza() {
			return getRuleContext(Ip_address_if_stanzaContext.class,0);
		}
		public Ip_ospf_cost_if_stanzaContext ip_ospf_cost_if_stanza() {
			return getRuleContext(Ip_ospf_cost_if_stanzaContext.class,0);
		}
		public Ip_address_secondary_if_stanzaContext ip_address_secondary_if_stanza() {
			return getRuleContext(Ip_address_secondary_if_stanzaContext.class,0);
		}
		public Switchport_mode_trunk_stanzaContext switchport_mode_trunk_stanza() {
			return getRuleContext(Switchport_mode_trunk_stanzaContext.class,0);
		}
		public Ip_ospf_dead_interval_minimal_if_stanzaContext ip_ospf_dead_interval_minimal_if_stanza() {
			return getRuleContext(Ip_ospf_dead_interval_minimal_if_stanzaContext.class,0);
		}
		public No_ip_address_if_stanzaContext no_ip_address_if_stanza() {
			return getRuleContext(No_ip_address_if_stanzaContext.class,0);
		}
		public Null_if_stanzaContext null_if_stanza() {
			return getRuleContext(Null_if_stanzaContext.class,0);
		}
		public Switchport_access_if_stanzaContext switchport_access_if_stanza() {
			return getRuleContext(Switchport_access_if_stanzaContext.class,0);
		}
		public Switchport_trunk_encapsulation_if_stanzaContext switchport_trunk_encapsulation_if_stanza() {
			return getRuleContext(Switchport_trunk_encapsulation_if_stanzaContext.class,0);
		}
		public Description_if_stanzaContext description_if_stanza() {
			return getRuleContext(Description_if_stanzaContext.class,0);
		}
		public Ip_ospf_dead_interval_if_stanzaContext ip_ospf_dead_interval_if_stanza() {
			return getRuleContext(Ip_ospf_dead_interval_if_stanzaContext.class,0);
		}
		public Switchport_trunk_allowed_if_stanzaContext switchport_trunk_allowed_if_stanza() {
			return getRuleContext(Switchport_trunk_allowed_if_stanzaContext.class,0);
		}
		public Switchport_mode_dynamic_desirable_stanzaContext switchport_mode_dynamic_desirable_stanza() {
			return getRuleContext(Switchport_mode_dynamic_desirable_stanzaContext.class,0);
		}
		public Ip_policy_if_stanzaContext ip_policy_if_stanza() {
			return getRuleContext(Ip_policy_if_stanzaContext.class,0);
		}
		public Shutdown_if_stanzaContext shutdown_if_stanza() {
			return getRuleContext(Shutdown_if_stanzaContext.class,0);
		}
		public If_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIf_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIf_stanza(this);
		}
	}

	public final If_stanzaContext if_stanza() throws RecognitionException {
		If_stanzaContext _localctx = new If_stanzaContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_if_stanza);
		try {
			setState(2567);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2548); description_if_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2549); ip_access_group_if_stanza();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2550); ip_address_if_stanza();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2551); ip_address_secondary_if_stanza();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2552); ip_ospf_cost_if_stanza();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2553); ip_ospf_dead_interval_if_stanza();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2554); ip_ospf_dead_interval_minimal_if_stanza();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2555); ip_policy_if_stanza();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2556); no_ip_address_if_stanza();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2557); null_if_stanza();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2558); shutdown_if_stanza();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2559); switchport_access_if_stanza();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2560); switchport_trunk_native_if_stanza();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2561); switchport_trunk_encapsulation_if_stanza();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2562); switchport_trunk_allowed_if_stanza();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2563); switchport_mode_access_stanza();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2564); switchport_mode_dynamic_auto_stanza();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2565); switchport_mode_dynamic_desirable_stanza();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2566); switchport_mode_trunk_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_stanzaContext extends ParserRuleContext {
		public Interface_nameContext iname;
		public Token inum;
		public TerminalNode MODULE() { return getToken(CiscoGrammar.MODULE, 0); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public Interface_stanza_tailContext interface_stanza_tail() {
			return getRuleContext(Interface_stanza_tailContext.class,0);
		}
		public TerminalNode MULTIPOINT() { return getToken(CiscoGrammar.MULTIPOINT, 0); }
		public Interface_nameContext interface_name() {
			return getRuleContext(Interface_nameContext.class,0);
		}
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode INTERFACE() { return getToken(CiscoGrammar.INTERFACE, 0); }
		public Interface_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterInterface_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitInterface_stanza(this);
		}
	}

	public final Interface_stanzaContext interface_stanza() throws RecognitionException {
		Interface_stanzaContext _localctx = new Interface_stanzaContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_interface_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2569); match(INTERFACE);
			setState(2570); ((Interface_stanzaContext)_localctx).iname = interface_name();
			setState(2572);
			_la = _input.LA(1);
			if (_la==MULTIPOINT) {
				{
				setState(2571); match(MULTIPOINT);
				}
			}

			setState(2576);
			_la = _input.LA(1);
			if (_la==MODULE) {
				{
				setState(2574); match(MODULE);
				setState(2575); ((Interface_stanzaContext)_localctx).inum = match(DEC);
				}
			}

			setState(2578); match(NEWLINE);
			setState(2579); interface_stanza_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interface_stanza_tailContext extends ParserRuleContext {
		public If_stanzaContext if_stanza;
		public List<If_stanzaContext> ifsl = new ArrayList<If_stanzaContext>();
		public If_stanzaContext if_stanza(int i) {
			return getRuleContext(If_stanzaContext.class,i);
		}
		public List<If_stanzaContext> if_stanza() {
			return getRuleContexts(If_stanzaContext.class);
		}
		public Interface_stanza_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interface_stanza_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterInterface_stanza_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitInterface_stanza_tail(this);
		}
	}

	public final Interface_stanza_tailContext interface_stanza_tail() throws RecognitionException {
		Interface_stanza_tailContext _localctx = new Interface_stanza_tailContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_interface_stanza_tail);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2584);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,174,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2581); ((Interface_stanza_tailContext)_localctx).if_stanza = if_stanza();
					((Interface_stanza_tailContext)_localctx).ifsl.add(((Interface_stanza_tailContext)_localctx).if_stanza);
					}
					} 
				}
				setState(2586);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,174,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_access_group_if_stanzaContext extends ParserRuleContext {
		public Token name;
		public TerminalNode IN() { return getToken(CiscoGrammar.IN, 0); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode PORT() { return getToken(CiscoGrammar.PORT, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode ACCESS_GROUP() { return getToken(CiscoGrammar.ACCESS_GROUP, 0); }
		public TerminalNode OUT() { return getToken(CiscoGrammar.OUT, 0); }
		public Ip_access_group_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_access_group_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_access_group_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_access_group_if_stanza(this);
		}
	}

	public final Ip_access_group_if_stanzaContext ip_access_group_if_stanza() throws RecognitionException {
		Ip_access_group_if_stanzaContext _localctx = new Ip_access_group_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_ip_access_group_if_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2587); match(IP);
			setState(2589);
			_la = _input.LA(1);
			if (_la==PORT) {
				{
				setState(2588); match(PORT);
				}
			}

			setState(2591); match(ACCESS_GROUP);
			setState(2592);
			((Ip_access_group_if_stanzaContext)_localctx).name = matchWildcard();
			setState(2593);
			_la = _input.LA(1);
			if ( !(_la==IN || _la==OUT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2594); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_address_stanzaContext extends ParserRuleContext {
		public Token ip;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public Ip_address_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_address_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_address_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_address_stanza(this);
		}
	}

	public final Ip_address_stanzaContext ip_address_stanza() throws RecognitionException {
		Ip_address_stanzaContext _localctx = new Ip_address_stanzaContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_ip_address_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2596); match(IP);
			setState(2597); ((Ip_address_stanzaContext)_localctx).ip = match(IP_ADDRESS);
			setState(2598); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_address_if_stanzaContext extends ParserRuleContext {
		public Token ip;
		public Token subnet;
		public Token prefix;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public List<TerminalNode> IP_ADDRESS() { return getTokens(CiscoGrammar.IP_ADDRESS); }
		public TerminalNode IP_ADDRESS(int i) {
			return getToken(CiscoGrammar.IP_ADDRESS, i);
		}
		public TerminalNode STANDBY() { return getToken(CiscoGrammar.STANDBY, 0); }
		public TerminalNode IP_PREFIX() { return getToken(CiscoGrammar.IP_PREFIX, 0); }
		public TerminalNode ADDRESS() { return getToken(CiscoGrammar.ADDRESS, 0); }
		public Ip_address_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_address_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_address_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_address_if_stanza(this);
		}
	}

	public final Ip_address_if_stanzaContext ip_address_if_stanza() throws RecognitionException {
		Ip_address_if_stanzaContext _localctx = new Ip_address_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_ip_address_if_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2600); match(IP);
			setState(2601); match(ADDRESS);
			setState(2605);
			switch (_input.LA(1)) {
			case IP_ADDRESS:
				{
				setState(2602); ((Ip_address_if_stanzaContext)_localctx).ip = match(IP_ADDRESS);
				setState(2603); ((Ip_address_if_stanzaContext)_localctx).subnet = match(IP_ADDRESS);
				}
				break;
			case IP_PREFIX:
				{
				setState(2604); ((Ip_address_if_stanzaContext)_localctx).prefix = match(IP_PREFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2609);
			_la = _input.LA(1);
			if (_la==STANDBY) {
				{
				setState(2607); match(STANDBY);
				setState(2608); match(IP_ADDRESS);
				}
			}

			setState(2611); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_address_secondary_if_stanzaContext extends ParserRuleContext {
		public Token ip;
		public Token subnet;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SECONDARY() { return getToken(CiscoGrammar.SECONDARY, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public List<TerminalNode> IP_ADDRESS() { return getTokens(CiscoGrammar.IP_ADDRESS); }
		public TerminalNode IP_ADDRESS(int i) {
			return getToken(CiscoGrammar.IP_ADDRESS, i);
		}
		public TerminalNode ADDRESS() { return getToken(CiscoGrammar.ADDRESS, 0); }
		public Ip_address_secondary_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_address_secondary_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_address_secondary_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_address_secondary_if_stanza(this);
		}
	}

	public final Ip_address_secondary_if_stanzaContext ip_address_secondary_if_stanza() throws RecognitionException {
		Ip_address_secondary_if_stanzaContext _localctx = new Ip_address_secondary_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_ip_address_secondary_if_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2613); match(IP);
			setState(2614); match(ADDRESS);
			setState(2615); ((Ip_address_secondary_if_stanzaContext)_localctx).ip = match(IP_ADDRESS);
			setState(2616); ((Ip_address_secondary_if_stanzaContext)_localctx).subnet = match(IP_ADDRESS);
			setState(2617); match(SECONDARY);
			setState(2618); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_ospf_cost_if_stanzaContext extends ParserRuleContext {
		public Token cost;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode OSPF() { return getToken(CiscoGrammar.OSPF, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode COST() { return getToken(CiscoGrammar.COST, 0); }
		public Ip_ospf_cost_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_ospf_cost_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_ospf_cost_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_ospf_cost_if_stanza(this);
		}
	}

	public final Ip_ospf_cost_if_stanzaContext ip_ospf_cost_if_stanza() throws RecognitionException {
		Ip_ospf_cost_if_stanzaContext _localctx = new Ip_ospf_cost_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_ip_ospf_cost_if_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2620); match(IP);
			setState(2621); match(OSPF);
			setState(2622); match(COST);
			setState(2623); ((Ip_ospf_cost_if_stanzaContext)_localctx).cost = match(DEC);
			setState(2624); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_ospf_dead_interval_if_stanzaContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode DEAD_INTERVAL() { return getToken(CiscoGrammar.DEAD_INTERVAL, 0); }
		public TerminalNode OSPF() { return getToken(CiscoGrammar.OSPF, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Ip_ospf_dead_interval_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_ospf_dead_interval_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_ospf_dead_interval_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_ospf_dead_interval_if_stanza(this);
		}
	}

	public final Ip_ospf_dead_interval_if_stanzaContext ip_ospf_dead_interval_if_stanza() throws RecognitionException {
		Ip_ospf_dead_interval_if_stanzaContext _localctx = new Ip_ospf_dead_interval_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_ip_ospf_dead_interval_if_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2626); match(IP);
			setState(2627); match(OSPF);
			setState(2628); match(DEAD_INTERVAL);
			setState(2629); ((Ip_ospf_dead_interval_if_stanzaContext)_localctx).seconds = match(DEC);
			setState(2630); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_ospf_dead_interval_minimal_if_stanzaContext extends ParserRuleContext {
		public Token mult;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode DEAD_INTERVAL() { return getToken(CiscoGrammar.DEAD_INTERVAL, 0); }
		public TerminalNode OSPF() { return getToken(CiscoGrammar.OSPF, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode MINIMAL() { return getToken(CiscoGrammar.MINIMAL, 0); }
		public TerminalNode HELLO_MULTIPLIER() { return getToken(CiscoGrammar.HELLO_MULTIPLIER, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Ip_ospf_dead_interval_minimal_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_ospf_dead_interval_minimal_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_ospf_dead_interval_minimal_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_ospf_dead_interval_minimal_if_stanza(this);
		}
	}

	public final Ip_ospf_dead_interval_minimal_if_stanzaContext ip_ospf_dead_interval_minimal_if_stanza() throws RecognitionException {
		Ip_ospf_dead_interval_minimal_if_stanzaContext _localctx = new Ip_ospf_dead_interval_minimal_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_ip_ospf_dead_interval_minimal_if_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2632); match(IP);
			setState(2633); match(OSPF);
			setState(2634); match(DEAD_INTERVAL);
			setState(2635); match(MINIMAL);
			setState(2636); match(HELLO_MULTIPLIER);
			setState(2637); ((Ip_ospf_dead_interval_minimal_if_stanzaContext)_localctx).mult = match(DEC);
			setState(2638); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_policy_if_stanzaContext extends ParserRuleContext {
		public Token name;
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode ROUTE_MAP() { return getToken(CiscoGrammar.ROUTE_MAP, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode POLICY() { return getToken(CiscoGrammar.POLICY, 0); }
		public Ip_policy_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_policy_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIp_policy_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIp_policy_if_stanza(this);
		}
	}

	public final Ip_policy_if_stanzaContext ip_policy_if_stanza() throws RecognitionException {
		Ip_policy_if_stanzaContext _localctx = new Ip_policy_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_ip_policy_if_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2640); match(IP);
			setState(2641); match(POLICY);
			setState(2642); match(ROUTE_MAP);
			setState(2643);
			((Ip_policy_if_stanzaContext)_localctx).name = _input.LT(1);
			_la = _input.LA(1);
			if ( _la <= 0 || (_la==NEWLINE) ) {
				((Ip_policy_if_stanzaContext)_localctx).name = (Token)_errHandler.recoverInline(this);
			}
			consume();
			setState(2644); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class No_ip_address_if_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public TerminalNode ADDRESS() { return getToken(CiscoGrammar.ADDRESS, 0); }
		public No_ip_address_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_no_ip_address_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNo_ip_address_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNo_ip_address_if_stanza(this);
		}
	}

	public final No_ip_address_if_stanzaContext no_ip_address_if_stanza() throws RecognitionException {
		No_ip_address_if_stanzaContext _localctx = new No_ip_address_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_no_ip_address_if_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2646); match(NO);
			setState(2647); match(IP);
			setState(2648); match(ADDRESS);
			setState(2649); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_if_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public Hsrp_stanzaContext hsrp_stanza() {
			return getRuleContext(Hsrp_stanzaContext.class,0);
		}
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public Null_standalone_if_stanzaContext null_standalone_if_stanza() {
			return getRuleContext(Null_standalone_if_stanzaContext.class,0);
		}
		public TerminalNode SWITCHPORT() { return getToken(CiscoGrammar.SWITCHPORT, 0); }
		public Null_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_if_stanza(this);
		}
	}

	public final Null_if_stanzaContext null_if_stanza() throws RecognitionException {
		Null_if_stanzaContext _localctx = new Null_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_null_if_stanza);
		int _la;
		try {
			setState(2658);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2651); hsrp_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2653);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2652); match(NO);
					}
				}

				setState(2655); match(SWITCHPORT);
				setState(2656); match(NEWLINE);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2657); null_standalone_if_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_standalone_if_stanzaContext extends ParserRuleContext {
		public TerminalNode BANDWIDTH() { return getToken(CiscoGrammar.BANDWIDTH, 0); }
		public TerminalNode STACK_MIB() { return getToken(CiscoGrammar.STACK_MIB, 0); }
		public TerminalNode SWITCHPORT() { return getToken(CiscoGrammar.SWITCHPORT, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(CiscoGrammar.AUTHENTICATION, 0); }
		public TerminalNode VOICE() { return getToken(CiscoGrammar.VOICE, 0); }
		public TerminalNode EMPTY() { return getToken(CiscoGrammar.EMPTY, 0); }
		public TerminalNode MOP() { return getToken(CiscoGrammar.MOP, 0); }
		public TerminalNode MULTICAST() { return getToken(CiscoGrammar.MULTICAST, 0); }
		public TerminalNode PRIORITY() { return getToken(CiscoGrammar.PRIORITY, 0); }
		public TerminalNode PIM() { return getToken(CiscoGrammar.PIM, 0); }
		public TerminalNode ENCAPSULATION() { return getToken(CiscoGrammar.ENCAPSULATION, 0); }
		public TerminalNode SPEED() { return getToken(CiscoGrammar.SPEED, 0); }
		public TerminalNode TRUST() { return getToken(CiscoGrammar.TRUST, 0); }
		public TerminalNode AUTO() { return getToken(CiscoGrammar.AUTO, 0); }
		public TerminalNode KEEPALIVE() { return getToken(CiscoGrammar.KEEPALIVE, 0); }
		public TerminalNode PORT_SECURITY() { return getToken(CiscoGrammar.PORT_SECURITY, 0); }
		public TerminalNode ROUTE_CACHE() { return getToken(CiscoGrammar.ROUTE_CACHE, 0); }
		public TerminalNode DHCP() { return getToken(CiscoGrammar.DHCP, 0); }
		public TerminalNode X25() { return getToken(CiscoGrammar.X25, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public TerminalNode ACCOUNTING() { return getToken(CiscoGrammar.ACCOUNTING, 0); }
		public TerminalNode VRRP() { return getToken(CiscoGrammar.VRRP, 0); }
		public TerminalNode RCV_QUEUE() { return getToken(CiscoGrammar.RCV_QUEUE, 0); }
		public TerminalNode CLNS() { return getToken(CiscoGrammar.CLNS, 0); }
		public TerminalNode LRE() { return getToken(CiscoGrammar.LRE, 0); }
		public TerminalNode VRF() { return getToken(CiscoGrammar.VRF, 0); }
		public TerminalNode UNNUMBERED() { return getToken(CiscoGrammar.UNNUMBERED, 0); }
		public TerminalNode ISDN() { return getToken(CiscoGrammar.ISDN, 0); }
		public TerminalNode BROADCAST() { return getToken(CiscoGrammar.BROADCAST, 0); }
		public TerminalNode NETWORK() { return getToken(CiscoGrammar.NETWORK, 0); }
		public TerminalNode LOAD_INTERVAL() { return getToken(CiscoGrammar.LOAD_INTERVAL, 0); }
		public TerminalNode LACP() { return getToken(CiscoGrammar.LACP, 0); }
		public TerminalNode MOBILITY() { return getToken(CiscoGrammar.MOBILITY, 0); }
		public TerminalNode FULL_DUPLEX() { return getToken(CiscoGrammar.FULL_DUPLEX, 0); }
		public TerminalNode HELPER_ADDRESS() { return getToken(CiscoGrammar.HELPER_ADDRESS, 0); }
		public TerminalNode STANDBY() { return getToken(CiscoGrammar.STANDBY, 0); }
		public TerminalNode NAT() { return getToken(CiscoGrammar.NAT, 0); }
		public TerminalNode ATM() { return getToken(CiscoGrammar.ATM, 0); }
		public TerminalNode STORM_CONTROL() { return getToken(CiscoGrammar.STORM_CONTROL, 0); }
		public TerminalNode QOS() { return getToken(CiscoGrammar.QOS, 0); }
		public TerminalNode NTP() { return getToken(CiscoGrammar.NTP, 0); }
		public TerminalNode MPLS() { return getToken(CiscoGrammar.MPLS, 0); }
		public TerminalNode FAIR_QUEUE() { return getToken(CiscoGrammar.FAIR_QUEUE, 0); }
		public TerminalNode MAC_ADDRESS() { return getToken(CiscoGrammar.MAC_ADDRESS, 0); }
		public TerminalNode TAG_SWITCHING() { return getToken(CiscoGrammar.TAG_SWITCHING, 0); }
		public TerminalNode SERVICE_POLICY() { return getToken(CiscoGrammar.SERVICE_POLICY, 0); }
		public TerminalNode NEGOTIATION() { return getToken(CiscoGrammar.NEGOTIATION, 0); }
		public TerminalNode VERIFY() { return getToken(CiscoGrammar.VERIFY, 0); }
		public TerminalNode SERIAL() { return getToken(CiscoGrammar.SERIAL, 0); }
		public TerminalNode VLAN() { return getToken(CiscoGrammar.VLAN, 0); }
		public TerminalNode CABLELENGTH() { return getToken(CiscoGrammar.CABLELENGTH, 0); }
		public TerminalNode REDIRECTS() { return getToken(CiscoGrammar.REDIRECTS, 0); }
		public TerminalNode LLDP() { return getToken(CiscoGrammar.LLDP, 0); }
		public TerminalNode NONEGOTIATE() { return getToken(CiscoGrammar.NONEGOTIATE, 0); }
		public TerminalNode LANE() { return getToken(CiscoGrammar.LANE, 0); }
		public TerminalNode CLOCK() { return getToken(CiscoGrammar.CLOCK, 0); }
		public TerminalNode PHYSICAL_LAYER() { return getToken(CiscoGrammar.PHYSICAL_LAYER, 0); }
		public TerminalNode SRR_QUEUE() { return getToken(CiscoGrammar.SRR_QUEUE, 0); }
		public TerminalNode CHANNEL_GROUP() { return getToken(CiscoGrammar.CHANNEL_GROUP, 0); }
		public TerminalNode PEER() { return getToken(CiscoGrammar.PEER, 0); }
		public TerminalNode FLOW() { return getToken(CiscoGrammar.FLOW, 0); }
		public TerminalNode PRIORITY_QUEUE() { return getToken(CiscoGrammar.PRIORITY_QUEUE, 0); }
		public TerminalNode QUEUE_SET() { return getToken(CiscoGrammar.QUEUE_SET, 0); }
		public TerminalNode LAPB() { return getToken(CiscoGrammar.LAPB, 0); }
		public TerminalNode DSU() { return getToken(CiscoGrammar.DSU, 0); }
		public TerminalNode CDP() { return getToken(CiscoGrammar.CDP, 0); }
		public TerminalNode CGMP() { return getToken(CiscoGrammar.CGMP, 0); }
		public TerminalNode POWER() { return getToken(CiscoGrammar.POWER, 0); }
		public TerminalNode ASYNC() { return getToken(CiscoGrammar.ASYNC, 0); }
		public TerminalNode CHANNEL() { return getToken(CiscoGrammar.CHANNEL, 0); }
		public TerminalNode UNREACHABLES() { return getToken(CiscoGrammar.UNREACHABLES, 0); }
		public TerminalNode LOGGING() { return getToken(CiscoGrammar.LOGGING, 0); }
		public TerminalNode RATE_MODE() { return getToken(CiscoGrammar.RATE_MODE, 0); }
		public TerminalNode TCAM() { return getToken(CiscoGrammar.TCAM, 0); }
		public TerminalNode MTU() { return getToken(CiscoGrammar.MTU, 0); }
		public TerminalNode LOAD_SHARING() { return getToken(CiscoGrammar.LOAD_SHARING, 0); }
		public TerminalNode PPP() { return getToken(CiscoGrammar.PPP, 0); }
		public TerminalNode GROUP_RANGE() { return getToken(CiscoGrammar.GROUP_RANGE, 0); }
		public TerminalNode MLS() { return getToken(CiscoGrammar.MLS, 0); }
		public TerminalNode SECURITY_LEVEL() { return getToken(CiscoGrammar.SECURITY_LEVEL, 0); }
		public TerminalNode MAP_GROUP() { return getToken(CiscoGrammar.MAP_GROUP, 0); }
		public TerminalNode MAC() { return getToken(CiscoGrammar.MAC, 0); }
		public TerminalNode FLOWCONTROL() { return getToken(CiscoGrammar.FLOWCONTROL, 0); }
		public TerminalNode MODE() { return getToken(CiscoGrammar.MODE, 0); }
		public TerminalNode TUNNEL() { return getToken(CiscoGrammar.TUNNEL, 0); }
		public TerminalNode XCONNECT() { return getToken(CiscoGrammar.XCONNECT, 0); }
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public TerminalNode WRR_QUEUE() { return getToken(CiscoGrammar.WRR_QUEUE, 0); }
		public TerminalNode DVMRP() { return getToken(CiscoGrammar.DVMRP, 0); }
		public TerminalNode SONET() { return getToken(CiscoGrammar.SONET, 0); }
		public TerminalNode ARP() { return getToken(CiscoGrammar.ARP, 0); }
		public TerminalNode SNMP() { return getToken(CiscoGrammar.SNMP, 0); }
		public TerminalNode OSPF() { return getToken(CiscoGrammar.OSPF, 0); }
		public TerminalNode SPANNING_TREE() { return getToken(CiscoGrammar.SPANNING_TREE, 0); }
		public TerminalNode PORT_CHANNEL() { return getToken(CiscoGrammar.PORT_CHANNEL, 0); }
		public TerminalNode IGMP() { return getToken(CiscoGrammar.IGMP, 0); }
		public TerminalNode MEMBER() { return getToken(CiscoGrammar.MEMBER, 0); }
		public TerminalNode NEGOTIATE() { return getToken(CiscoGrammar.NEGOTIATE, 0); }
		public TerminalNode SERVICE_MODULE() { return getToken(CiscoGrammar.SERVICE_MODULE, 0); }
		public TerminalNode UDLD() { return getToken(CiscoGrammar.UDLD, 0); }
		public TerminalNode IRDP() { return getToken(CiscoGrammar.IRDP, 0); }
		public TerminalNode NAMEIF() { return getToken(CiscoGrammar.NAMEIF, 0); }
		public TerminalNode ROUTER() { return getToken(CiscoGrammar.ROUTER, 0); }
		public TerminalNode RIP() { return getToken(CiscoGrammar.RIP, 0); }
		public TerminalNode MROUTE_CACHE() { return getToken(CiscoGrammar.MROUTE_CACHE, 0); }
		public TerminalNode DIRECTED_BROADCAST() { return getToken(CiscoGrammar.DIRECTED_BROADCAST, 0); }
		public TerminalNode MEDIA_TYPE() { return getToken(CiscoGrammar.MEDIA_TYPE, 0); }
		public TerminalNode PRIVATE_VLAN() { return getToken(CiscoGrammar.PRIVATE_VLAN, 0); }
		public TerminalNode HALF_DUPLEX() { return getToken(CiscoGrammar.HALF_DUPLEX, 0); }
		public TerminalNode MESSAGE_DIGEST_KEY() { return getToken(CiscoGrammar.MESSAGE_DIGEST_KEY, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode TCP() { return getToken(CiscoGrammar.TCP, 0); }
		public TerminalNode CRYPTO() { return getToken(CiscoGrammar.CRYPTO, 0); }
		public TerminalNode VPC() { return getToken(CiscoGrammar.VPC, 0); }
		public TerminalNode MDIX() { return getToken(CiscoGrammar.MDIX, 0); }
		public TerminalNode CHANNEL_PROTOCOL() { return getToken(CiscoGrammar.CHANNEL_PROTOCOL, 0); }
		public TerminalNode FRAMING() { return getToken(CiscoGrammar.FRAMING, 0); }
		public TerminalNode PROXY_ARP() { return getToken(CiscoGrammar.PROXY_ARP, 0); }
		public TerminalNode MANAGEMENT_ONLY() { return getToken(CiscoGrammar.MANAGEMENT_ONLY, 0); }
		public TerminalNode MACRO() { return getToken(CiscoGrammar.MACRO, 0); }
		public TerminalNode HOLD_QUEUE() { return getToken(CiscoGrammar.HOLD_QUEUE, 0); }
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode DUPLEX() { return getToken(CiscoGrammar.DUPLEX, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode COUNTER() { return getToken(CiscoGrammar.COUNTER, 0); }
		public TerminalNode VIRTUAL_REASSEMBLY() { return getToken(CiscoGrammar.VIRTUAL_REASSEMBLY, 0); }
		public Null_standalone_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_standalone_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_standalone_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_standalone_if_stanza(this);
		}
	}

	public final Null_standalone_if_stanzaContext null_standalone_if_stanza() throws RecognitionException {
		Null_standalone_if_stanzaContext _localctx = new Null_standalone_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_null_standalone_if_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2661);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(2660); match(NO);
				}
			}

			setState(2792);
			switch (_input.LA(1)) {
			case ARP:
				{
				setState(2663); match(ARP);
				}
				break;
			case ASYNC:
				{
				setState(2664); match(ASYNC);
				}
				break;
			case ATM:
				{
				setState(2665); match(ATM);
				}
				break;
			case AUTO:
				{
				setState(2666); match(AUTO);
				}
				break;
			case BANDWIDTH:
				{
				setState(2667); match(BANDWIDTH);
				}
				break;
			case CABLELENGTH:
				{
				setState(2668); match(CABLELENGTH);
				}
				break;
			case CDP:
				{
				setState(2669); match(CDP);
				}
				break;
			case CHANNEL:
				{
				setState(2670); match(CHANNEL);
				}
				break;
			case CHANNEL_GROUP:
				{
				setState(2671); match(CHANNEL_GROUP);
				}
				break;
			case CHANNEL_PROTOCOL:
				{
				setState(2672); match(CHANNEL_PROTOCOL);
				}
				break;
			case CLNS:
				{
				setState(2673); match(CLNS);
				}
				break;
			case CLOCK:
				{
				setState(2674); match(CLOCK);
				}
				break;
			case COUNTER:
				{
				setState(2675); match(COUNTER);
				}
				break;
			case CRYPTO:
				{
				setState(2676); match(CRYPTO);
				}
				break;
			case DSU:
				{
				{
				setState(2677); match(DSU);
				setState(2678); match(BANDWIDTH);
				}
				}
				break;
			case DUPLEX:
				{
				setState(2679); match(DUPLEX);
				}
				break;
			case ENCAPSULATION:
				{
				setState(2680); match(ENCAPSULATION);
				}
				break;
			case FAIR_QUEUE:
				{
				setState(2681); match(FAIR_QUEUE);
				}
				break;
			case FLOWCONTROL:
				{
				setState(2682); match(FLOWCONTROL);
				}
				break;
			case FRAMING:
				{
				setState(2683); match(FRAMING);
				}
				break;
			case FULL_DUPLEX:
				{
				setState(2684); match(FULL_DUPLEX);
				}
				break;
			case GROUP_RANGE:
				{
				setState(2685); match(GROUP_RANGE);
				}
				break;
			case HALF_DUPLEX:
				{
				setState(2686); match(HALF_DUPLEX);
				}
				break;
			case HOLD_QUEUE:
				{
				setState(2687); match(HOLD_QUEUE);
				}
				break;
			case IP:
				{
				{
				setState(2688); match(IP);
				setState(2718);
				switch (_input.LA(1)) {
				case ACCOUNTING:
					{
					setState(2689); match(ACCOUNTING);
					}
					break;
				case ARP:
					{
					setState(2690); match(ARP);
					}
					break;
				case CGMP:
					{
					setState(2691); match(CGMP);
					}
					break;
				case DHCP:
					{
					setState(2692); match(DHCP);
					}
					break;
				case DVMRP:
					{
					setState(2693); match(DVMRP);
					}
					break;
				case DIRECTED_BROADCAST:
					{
					{
					setState(2694); match(DIRECTED_BROADCAST);
					}
					}
					break;
				case FLOW:
					{
					setState(2695); match(FLOW);
					}
					break;
				case HELPER_ADDRESS:
					{
					setState(2696); match(HELPER_ADDRESS);
					}
					break;
				case IGMP:
					{
					setState(2697); match(IGMP);
					}
					break;
				case IRDP:
					{
					setState(2698); match(IRDP);
					}
					break;
				case LOAD_SHARING:
					{
					setState(2699); match(LOAD_SHARING);
					}
					break;
				case MROUTE_CACHE:
					{
					setState(2700); match(MROUTE_CACHE);
					}
					break;
				case MTU:
					{
					setState(2701); match(MTU);
					}
					break;
				case MULTICAST:
					{
					setState(2702); match(MULTICAST);
					}
					break;
				case OSPF:
					{
					{
					setState(2703); match(OSPF);
					setState(2704);
					_la = _input.LA(1);
					if ( !(_la==AUTHENTICATION || _la==MESSAGE_DIGEST_KEY || _la==NETWORK || _la==PRIORITY) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					}
					break;
				case NAT:
					{
					setState(2705); match(NAT);
					}
					break;
				case PIM:
					{
					setState(2706); match(PIM);
					}
					break;
				case PROXY_ARP:
					{
					setState(2707); match(PROXY_ARP);
					}
					break;
				case REDIRECTS:
					{
					setState(2708); match(REDIRECTS);
					}
					break;
				case RIP:
					{
					setState(2709); match(RIP);
					}
					break;
				case ROUTE_CACHE:
					{
					setState(2710); match(ROUTE_CACHE);
					}
					break;
				case ROUTER:
					{
					setState(2711); match(ROUTER);
					}
					break;
				case TCP:
					{
					setState(2712); match(TCP);
					}
					break;
				case UNNUMBERED:
					{
					setState(2713); match(UNNUMBERED);
					}
					break;
				case UNREACHABLES:
					{
					setState(2714); match(UNREACHABLES);
					}
					break;
				case VERIFY:
					{
					setState(2715); match(VERIFY);
					}
					break;
				case VIRTUAL_REASSEMBLY:
					{
					setState(2716); match(VIRTUAL_REASSEMBLY);
					}
					break;
				case VRF:
					{
					setState(2717); match(VRF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case IPV6:
				{
				setState(2720); match(IPV6);
				}
				break;
			case ISDN:
				{
				setState(2721); match(ISDN);
				}
				break;
			case KEEPALIVE:
				{
				setState(2722); match(KEEPALIVE);
				}
				break;
			case LANE:
				{
				setState(2723); match(LANE);
				}
				break;
			case LAPB:
				{
				setState(2724); match(LAPB);
				}
				break;
			case LACP:
				{
				setState(2725); match(LACP);
				}
				break;
			case LLDP:
				{
				setState(2726); match(LLDP);
				}
				break;
			case LOAD_INTERVAL:
				{
				setState(2727); match(LOAD_INTERVAL);
				}
				break;
			case LOGGING:
				{
				setState(2728); match(LOGGING);
				}
				break;
			case LRE:
				{
				setState(2729); match(LRE);
				}
				break;
			case MAC:
				{
				setState(2730); match(MAC);
				}
				break;
			case MAC_ADDRESS:
				{
				setState(2731); match(MAC_ADDRESS);
				}
				break;
			case MACRO:
				{
				setState(2732); match(MACRO);
				}
				break;
			case MANAGEMENT_ONLY:
				{
				setState(2733); match(MANAGEMENT_ONLY);
				}
				break;
			case MAP_GROUP:
				{
				setState(2734); match(MAP_GROUP);
				}
				break;
			case MDIX:
				{
				setState(2735); match(MDIX);
				}
				break;
			case MEDIA_TYPE:
				{
				setState(2736); match(MEDIA_TYPE);
				}
				break;
			case MEMBER:
				{
				setState(2737); match(MEMBER);
				}
				break;
			case MLS:
				{
				setState(2738); match(MLS);
				}
				break;
			case MOBILITY:
				{
				setState(2739); match(MOBILITY);
				}
				break;
			case MOP:
				{
				setState(2740); match(MOP);
				}
				break;
			case MPLS:
				{
				setState(2741); match(MPLS);
				}
				break;
			case MTU:
				{
				setState(2742); match(MTU);
				}
				break;
			case NAMEIF:
				{
				setState(2743); match(NAMEIF);
				}
				break;
			case NEGOTIATE:
				{
				setState(2744); match(NEGOTIATE);
				}
				break;
			case NEGOTIATION:
				{
				setState(2745); match(NEGOTIATION);
				}
				break;
			case NTP:
				{
				{
				setState(2746); match(NTP);
				setState(2747); match(BROADCAST);
				}
				}
				break;
			case PEER:
				{
				setState(2748); match(PEER);
				}
				break;
			case PHYSICAL_LAYER:
				{
				setState(2749); match(PHYSICAL_LAYER);
				}
				break;
			case PORT_CHANNEL:
				{
				setState(2750); match(PORT_CHANNEL);
				}
				break;
			case POWER:
				{
				setState(2751); match(POWER);
				}
				break;
			case PPP:
				{
				setState(2752); match(PPP);
				}
				break;
			case PRIORITY_QUEUE:
				{
				setState(2753); match(PRIORITY_QUEUE);
				}
				break;
			case QOS:
				{
				setState(2754); match(QOS);
				}
				break;
			case QUEUE_SET:
				{
				setState(2755); match(QUEUE_SET);
				}
				break;
			case RATE_MODE:
				{
				setState(2756); match(RATE_MODE);
				}
				break;
			case RCV_QUEUE:
				{
				setState(2757); match(RCV_QUEUE);
				}
				break;
			case ROUTE_CACHE:
				{
				setState(2758); match(ROUTE_CACHE);
				}
				break;
			case SECURITY_LEVEL:
				{
				setState(2759); match(SECURITY_LEVEL);
				}
				break;
			case SERIAL:
				{
				setState(2760); match(SERIAL);
				}
				break;
			case SERVICE_MODULE:
				{
				setState(2761); match(SERVICE_MODULE);
				}
				break;
			case SERVICE_POLICY:
				{
				setState(2762); match(SERVICE_POLICY);
				}
				break;
			case SONET:
				{
				setState(2763); match(SONET);
				}
				break;
			case SPANNING_TREE:
				{
				setState(2764); match(SPANNING_TREE);
				}
				break;
			case SPEED:
				{
				setState(2765); match(SPEED);
				}
				break;
			case SNMP:
				{
				setState(2766); match(SNMP);
				}
				break;
			case SRR_QUEUE:
				{
				setState(2767); match(SRR_QUEUE);
				}
				break;
			case STACK_MIB:
				{
				setState(2768); match(STACK_MIB);
				}
				break;
			case STANDBY:
				{
				setState(2769); match(STANDBY);
				}
				break;
			case STORM_CONTROL:
				{
				setState(2770); match(STORM_CONTROL);
				}
				break;
			case SWITCHPORT:
				{
				{
				setState(2771); match(SWITCHPORT);
				setState(2779);
				switch (_input.LA(1)) {
				case EMPTY:
					{
					setState(2772); match(EMPTY);
					}
					break;
				case MODE:
					{
					{
					setState(2773); match(MODE);
					setState(2774); match(PRIVATE_VLAN);
					}
					}
					break;
				case NONEGOTIATE:
					{
					setState(2775); match(NONEGOTIATE);
					}
					break;
				case PORT_SECURITY:
					{
					setState(2776); match(PORT_SECURITY);
					}
					break;
				case VOICE:
					{
					setState(2777); match(VOICE);
					}
					break;
				case VLAN:
					{
					setState(2778); match(VLAN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case TAG_SWITCHING:
				{
				setState(2781); match(TAG_SWITCHING);
				}
				break;
			case TCAM:
				{
				setState(2782); match(TCAM);
				}
				break;
			case TRUST:
				{
				setState(2783); match(TRUST);
				}
				break;
			case TUNNEL:
				{
				setState(2784); match(TUNNEL);
				}
				break;
			case UDLD:
				{
				setState(2785); match(UDLD);
				}
				break;
			case VPC:
				{
				setState(2786); match(VPC);
				}
				break;
			case VRF:
				{
				setState(2787); match(VRF);
				}
				break;
			case VRRP:
				{
				setState(2788); match(VRRP);
				}
				break;
			case WRR_QUEUE:
				{
				setState(2789); match(WRR_QUEUE);
				}
				break;
			case X25:
				{
				setState(2790); match(X25);
				}
				break;
			case XCONNECT:
				{
				setState(2791); match(XCONNECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(2794);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2799);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2800); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Preempt_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode PREEMPT() { return getToken(CiscoGrammar.PREEMPT, 0); }
		public Preempt_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preempt_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterPreempt_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitPreempt_stanza(this);
		}
	}

	public final Preempt_stanzaContext preempt_stanza() throws RecognitionException {
		Preempt_stanzaContext _localctx = new Preempt_stanzaContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_preempt_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2802); match(PREEMPT);
			setState(2803); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Priority_stanzaContext extends ParserRuleContext {
		public Token value;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode PRIORITY() { return getToken(CiscoGrammar.PRIORITY, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Priority_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_priority_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterPriority_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitPriority_stanza(this);
		}
	}

	public final Priority_stanzaContext priority_stanza() throws RecognitionException {
		Priority_stanzaContext _localctx = new Priority_stanzaContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_priority_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2805); match(PRIORITY);
			setState(2806); ((Priority_stanzaContext)_localctx).value = match(DEC);
			setState(2807); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shutdown_if_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SHUTDOWN() { return getToken(CiscoGrammar.SHUTDOWN, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public Shutdown_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdown_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterShutdown_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitShutdown_if_stanza(this);
		}
	}

	public final Shutdown_if_stanzaContext shutdown_if_stanza() throws RecognitionException {
		Shutdown_if_stanzaContext _localctx = new Shutdown_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_shutdown_if_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2810);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(2809); match(NO);
				}
			}

			setState(2812); match(SHUTDOWN);
			setState(2813); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchport_access_if_stanzaContext extends ParserRuleContext {
		public Token vlan;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode VLAN() { return getToken(CiscoGrammar.VLAN, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode ACCESS() { return getToken(CiscoGrammar.ACCESS, 0); }
		public TerminalNode SWITCHPORT() { return getToken(CiscoGrammar.SWITCHPORT, 0); }
		public Switchport_access_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchport_access_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSwitchport_access_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSwitchport_access_if_stanza(this);
		}
	}

	public final Switchport_access_if_stanzaContext switchport_access_if_stanza() throws RecognitionException {
		Switchport_access_if_stanzaContext _localctx = new Switchport_access_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_switchport_access_if_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2815); match(SWITCHPORT);
			setState(2816); match(ACCESS);
			setState(2817); match(VLAN);
			setState(2818); ((Switchport_access_if_stanzaContext)_localctx).vlan = match(DEC);
			setState(2819); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchport_mode_access_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode MODE() { return getToken(CiscoGrammar.MODE, 0); }
		public TerminalNode ACCESS() { return getToken(CiscoGrammar.ACCESS, 0); }
		public TerminalNode SWITCHPORT() { return getToken(CiscoGrammar.SWITCHPORT, 0); }
		public Switchport_mode_access_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchport_mode_access_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSwitchport_mode_access_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSwitchport_mode_access_stanza(this);
		}
	}

	public final Switchport_mode_access_stanzaContext switchport_mode_access_stanza() throws RecognitionException {
		Switchport_mode_access_stanzaContext _localctx = new Switchport_mode_access_stanzaContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_switchport_mode_access_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2821); match(SWITCHPORT);
			setState(2822); match(MODE);
			setState(2823); match(ACCESS);
			setState(2824); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchport_mode_dynamic_auto_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode DYNAMIC() { return getToken(CiscoGrammar.DYNAMIC, 0); }
		public TerminalNode MODE() { return getToken(CiscoGrammar.MODE, 0); }
		public TerminalNode SWITCHPORT() { return getToken(CiscoGrammar.SWITCHPORT, 0); }
		public TerminalNode AUTO() { return getToken(CiscoGrammar.AUTO, 0); }
		public Switchport_mode_dynamic_auto_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchport_mode_dynamic_auto_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSwitchport_mode_dynamic_auto_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSwitchport_mode_dynamic_auto_stanza(this);
		}
	}

	public final Switchport_mode_dynamic_auto_stanzaContext switchport_mode_dynamic_auto_stanza() throws RecognitionException {
		Switchport_mode_dynamic_auto_stanzaContext _localctx = new Switchport_mode_dynamic_auto_stanzaContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_switchport_mode_dynamic_auto_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2826); match(SWITCHPORT);
			setState(2827); match(MODE);
			setState(2828); match(DYNAMIC);
			setState(2829); match(AUTO);
			setState(2830); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchport_mode_dynamic_desirable_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode DESIRABLE() { return getToken(CiscoGrammar.DESIRABLE, 0); }
		public TerminalNode DYNAMIC() { return getToken(CiscoGrammar.DYNAMIC, 0); }
		public TerminalNode MODE() { return getToken(CiscoGrammar.MODE, 0); }
		public TerminalNode SWITCHPORT() { return getToken(CiscoGrammar.SWITCHPORT, 0); }
		public Switchport_mode_dynamic_desirable_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchport_mode_dynamic_desirable_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSwitchport_mode_dynamic_desirable_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSwitchport_mode_dynamic_desirable_stanza(this);
		}
	}

	public final Switchport_mode_dynamic_desirable_stanzaContext switchport_mode_dynamic_desirable_stanza() throws RecognitionException {
		Switchport_mode_dynamic_desirable_stanzaContext _localctx = new Switchport_mode_dynamic_desirable_stanzaContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_switchport_mode_dynamic_desirable_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2832); match(SWITCHPORT);
			setState(2833); match(MODE);
			setState(2834); match(DYNAMIC);
			setState(2835); match(DESIRABLE);
			setState(2836); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchport_mode_trunk_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode MODE() { return getToken(CiscoGrammar.MODE, 0); }
		public TerminalNode SWITCHPORT() { return getToken(CiscoGrammar.SWITCHPORT, 0); }
		public TerminalNode TRUNK() { return getToken(CiscoGrammar.TRUNK, 0); }
		public Switchport_mode_trunk_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchport_mode_trunk_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSwitchport_mode_trunk_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSwitchport_mode_trunk_stanza(this);
		}
	}

	public final Switchport_mode_trunk_stanzaContext switchport_mode_trunk_stanza() throws RecognitionException {
		Switchport_mode_trunk_stanzaContext _localctx = new Switchport_mode_trunk_stanzaContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_switchport_mode_trunk_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2838); match(SWITCHPORT);
			setState(2839); match(MODE);
			setState(2840); match(TRUNK);
			setState(2841); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchport_trunk_allowed_if_stanzaContext extends ParserRuleContext {
		public RangeContext r;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode ALLOWED() { return getToken(CiscoGrammar.ALLOWED, 0); }
		public TerminalNode VLAN() { return getToken(CiscoGrammar.VLAN, 0); }
		public RangeContext range() {
			return getRuleContext(RangeContext.class,0);
		}
		public TerminalNode SWITCHPORT() { return getToken(CiscoGrammar.SWITCHPORT, 0); }
		public TerminalNode TRUNK() { return getToken(CiscoGrammar.TRUNK, 0); }
		public TerminalNode ADD() { return getToken(CiscoGrammar.ADD, 0); }
		public Switchport_trunk_allowed_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchport_trunk_allowed_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSwitchport_trunk_allowed_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSwitchport_trunk_allowed_if_stanza(this);
		}
	}

	public final Switchport_trunk_allowed_if_stanzaContext switchport_trunk_allowed_if_stanza() throws RecognitionException {
		Switchport_trunk_allowed_if_stanzaContext _localctx = new Switchport_trunk_allowed_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_switchport_trunk_allowed_if_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2843); match(SWITCHPORT);
			setState(2844); match(TRUNK);
			setState(2845); match(ALLOWED);
			setState(2846); match(VLAN);
			setState(2848);
			_la = _input.LA(1);
			if (_la==ADD) {
				{
				setState(2847); match(ADD);
				}
			}

			setState(2850); ((Switchport_trunk_allowed_if_stanzaContext)_localctx).r = range();
			setState(2851); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchport_trunk_encapsulation_if_stanzaContext extends ParserRuleContext {
		public Switchport_trunk_encapsulationContext e;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode ENCAPSULATION() { return getToken(CiscoGrammar.ENCAPSULATION, 0); }
		public TerminalNode SWITCHPORT() { return getToken(CiscoGrammar.SWITCHPORT, 0); }
		public Switchport_trunk_encapsulationContext switchport_trunk_encapsulation() {
			return getRuleContext(Switchport_trunk_encapsulationContext.class,0);
		}
		public TerminalNode TRUNK() { return getToken(CiscoGrammar.TRUNK, 0); }
		public Switchport_trunk_encapsulation_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchport_trunk_encapsulation_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSwitchport_trunk_encapsulation_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSwitchport_trunk_encapsulation_if_stanza(this);
		}
	}

	public final Switchport_trunk_encapsulation_if_stanzaContext switchport_trunk_encapsulation_if_stanza() throws RecognitionException {
		Switchport_trunk_encapsulation_if_stanzaContext _localctx = new Switchport_trunk_encapsulation_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_switchport_trunk_encapsulation_if_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2853); match(SWITCHPORT);
			setState(2854); match(TRUNK);
			setState(2855); match(ENCAPSULATION);
			setState(2856); ((Switchport_trunk_encapsulation_if_stanzaContext)_localctx).e = switchport_trunk_encapsulation();
			setState(2857); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switchport_trunk_native_if_stanzaContext extends ParserRuleContext {
		public Token vlan;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode VLAN() { return getToken(CiscoGrammar.VLAN, 0); }
		public TerminalNode NATIVE() { return getToken(CiscoGrammar.NATIVE, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode SWITCHPORT() { return getToken(CiscoGrammar.SWITCHPORT, 0); }
		public TerminalNode TRUNK() { return getToken(CiscoGrammar.TRUNK, 0); }
		public Switchport_trunk_native_if_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switchport_trunk_native_if_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSwitchport_trunk_native_if_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSwitchport_trunk_native_if_stanza(this);
		}
	}

	public final Switchport_trunk_native_if_stanzaContext switchport_trunk_native_if_stanza() throws RecognitionException {
		Switchport_trunk_native_if_stanzaContext _localctx = new Switchport_trunk_native_if_stanzaContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_switchport_trunk_native_if_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2859); match(SWITCHPORT);
			setState(2860); match(TRUNK);
			setState(2861); match(NATIVE);
			setState(2862); match(VLAN);
			setState(2863); ((Switchport_trunk_native_if_stanzaContext)_localctx).vlan = match(DEC);
			setState(2864); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Area_ipv6_ro_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode AREA() { return getToken(CiscoGrammar.AREA, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Area_ipv6_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_area_ipv6_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterArea_ipv6_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitArea_ipv6_ro_stanza(this);
		}
	}

	public final Area_ipv6_ro_stanzaContext area_ipv6_ro_stanza() throws RecognitionException {
		Area_ipv6_ro_stanzaContext _localctx = new Area_ipv6_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_area_ipv6_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2866); match(AREA);
			setState(2870);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(2867);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2872);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2873); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Area_nssa_ro_stanzaContext extends ParserRuleContext {
		public Token area_int;
		public Token area_ip;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode AREA() { return getToken(CiscoGrammar.AREA, 0); }
		public TerminalNode NO_SUMMARY(int i) {
			return getToken(CiscoGrammar.NO_SUMMARY, i);
		}
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode DEFAULT_INFORMATION_ORIGINATE(int i) {
			return getToken(CiscoGrammar.DEFAULT_INFORMATION_ORIGINATE, i);
		}
		public List<TerminalNode> DEFAULT_INFORMATION_ORIGINATE() { return getTokens(CiscoGrammar.DEFAULT_INFORMATION_ORIGINATE); }
		public List<TerminalNode> NO_SUMMARY() { return getTokens(CiscoGrammar.NO_SUMMARY); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode NSSA() { return getToken(CiscoGrammar.NSSA, 0); }
		public Area_nssa_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_area_nssa_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterArea_nssa_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitArea_nssa_ro_stanza(this);
		}
	}

	public final Area_nssa_ro_stanzaContext area_nssa_ro_stanza() throws RecognitionException {
		Area_nssa_ro_stanzaContext _localctx = new Area_nssa_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_area_nssa_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2875); match(AREA);
			setState(2878);
			switch (_input.LA(1)) {
			case DEC:
				{
				setState(2876); ((Area_nssa_ro_stanzaContext)_localctx).area_int = match(DEC);
				}
				break;
			case IP_ADDRESS:
				{
				setState(2877); ((Area_nssa_ro_stanzaContext)_localctx).area_ip = match(IP_ADDRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2880); match(NSSA);
			setState(2884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_INFORMATION_ORIGINATE || _la==NO_SUMMARY) {
				{
				{
				setState(2881);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT_INFORMATION_ORIGINATE || _la==NO_SUMMARY) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2886);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2887); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_information_ipv6_ro_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode DEFAULT_INFORMATION() { return getToken(CiscoGrammar.DEFAULT_INFORMATION, 0); }
		public Default_information_ipv6_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_information_ipv6_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterDefault_information_ipv6_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitDefault_information_ipv6_ro_stanza(this);
		}
	}

	public final Default_information_ipv6_ro_stanzaContext default_information_ipv6_ro_stanza() throws RecognitionException {
		Default_information_ipv6_ro_stanzaContext _localctx = new Default_information_ipv6_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_default_information_ipv6_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2889); match(DEFAULT_INFORMATION);
			setState(2893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(2890);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2895);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2896); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_information_ro_stanzaContext extends ParserRuleContext {
		public Token metric;
		public Token metric_type;
		public Token map;
		public List<TerminalNode> ROUTE_MAP() { return getTokens(CiscoGrammar.ROUTE_MAP); }
		public List<TerminalNode> VARIABLE() { return getTokens(CiscoGrammar.VARIABLE); }
		public List<TerminalNode> METRIC_TYPE() { return getTokens(CiscoGrammar.METRIC_TYPE); }
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode ALWAYS(int i) {
			return getToken(CiscoGrammar.ALWAYS, i);
		}
		public List<TerminalNode> ALWAYS() { return getTokens(CiscoGrammar.ALWAYS); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode METRIC_TYPE(int i) {
			return getToken(CiscoGrammar.METRIC_TYPE, i);
		}
		public TerminalNode ORIGINATE() { return getToken(CiscoGrammar.ORIGINATE, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<TerminalNode> METRIC() { return getTokens(CiscoGrammar.METRIC); }
		public TerminalNode METRIC(int i) {
			return getToken(CiscoGrammar.METRIC, i);
		}
		public TerminalNode VARIABLE(int i) {
			return getToken(CiscoGrammar.VARIABLE, i);
		}
		public TerminalNode DEFAULT_INFORMATION() { return getToken(CiscoGrammar.DEFAULT_INFORMATION, 0); }
		public TerminalNode ROUTE_MAP(int i) {
			return getToken(CiscoGrammar.ROUTE_MAP, i);
		}
		public Default_information_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_information_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterDefault_information_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitDefault_information_ro_stanza(this);
		}
	}

	public final Default_information_ro_stanzaContext default_information_ro_stanza() throws RecognitionException {
		Default_information_ro_stanzaContext _localctx = new Default_information_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_default_information_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2898); match(DEFAULT_INFORMATION);
			setState(2899); match(ORIGINATE);
			setState(2909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALWAYS || _la==METRIC || _la==METRIC_TYPE || _la==ROUTE_MAP) {
				{
				setState(2907);
				switch (_input.LA(1)) {
				case METRIC:
					{
					{
					setState(2900); match(METRIC);
					setState(2901); ((Default_information_ro_stanzaContext)_localctx).metric = match(DEC);
					}
					}
					break;
				case METRIC_TYPE:
					{
					{
					setState(2902); match(METRIC_TYPE);
					setState(2903); ((Default_information_ro_stanzaContext)_localctx).metric_type = match(DEC);
					}
					}
					break;
				case ALWAYS:
					{
					setState(2904); match(ALWAYS);
					}
					break;
				case ROUTE_MAP:
					{
					{
					setState(2905); match(ROUTE_MAP);
					setState(2906); ((Default_information_ro_stanzaContext)_localctx).map = match(VARIABLE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2911);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2912); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ipv6_ro_stanzaContext extends ParserRuleContext {
		public Passive_interface_ipv6_ro_stanzaContext passive_interface_ipv6_ro_stanza() {
			return getRuleContext(Passive_interface_ipv6_ro_stanzaContext.class,0);
		}
		public Null_ipv6_ro_stanzaContext null_ipv6_ro_stanza() {
			return getRuleContext(Null_ipv6_ro_stanzaContext.class,0);
		}
		public Redistribute_ipv6_ro_stanzaContext redistribute_ipv6_ro_stanza() {
			return getRuleContext(Redistribute_ipv6_ro_stanzaContext.class,0);
		}
		public Ipv6_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ipv6_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIpv6_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIpv6_ro_stanza(this);
		}
	}

	public final Ipv6_ro_stanzaContext ipv6_ro_stanza() throws RecognitionException {
		Ipv6_ro_stanzaContext _localctx = new Ipv6_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_ipv6_ro_stanza);
		try {
			setState(2917);
			switch (_input.LA(1)) {
			case AREA:
			case DEFAULT_INFORMATION:
			case LOG_ADJACENCY_CHANGES:
			case ROUTER_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2914); null_ipv6_ro_stanza();
				}
				break;
			case NO:
			case PASSIVE_INTERFACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2915); passive_interface_ipv6_ro_stanza();
				}
				break;
			case REDISTRIBUTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2916); redistribute_ipv6_ro_stanza();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ipv6_router_ospf_stanzaContext extends ParserRuleContext {
		public Token procnum;
		public Ipv6_ro_stanzaContext ipv6_ro_stanza;
		public List<Ipv6_ro_stanzaContext> rosl = new ArrayList<Ipv6_ro_stanzaContext>();
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode OSPF() { return getToken(CiscoGrammar.OSPF, 0); }
		public Ipv6_ro_stanzaContext ipv6_ro_stanza(int i) {
			return getRuleContext(Ipv6_ro_stanzaContext.class,i);
		}
		public TerminalNode ROUTER() { return getToken(CiscoGrammar.ROUTER, 0); }
		public List<Ipv6_ro_stanzaContext> ipv6_ro_stanza() {
			return getRuleContexts(Ipv6_ro_stanzaContext.class);
		}
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public Ipv6_router_ospf_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ipv6_router_ospf_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterIpv6_router_ospf_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitIpv6_router_ospf_stanza(this);
		}
	}

	public final Ipv6_router_ospf_stanzaContext ipv6_router_ospf_stanza() throws RecognitionException {
		Ipv6_router_ospf_stanzaContext _localctx = new Ipv6_router_ospf_stanzaContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_ipv6_router_ospf_stanza);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2919); match(IPV6);
			setState(2920); match(ROUTER);
			setState(2921); match(OSPF);
			setState(2922); ((Ipv6_router_ospf_stanzaContext)_localctx).procnum = match(DEC);
			setState(2923); match(NEWLINE);
			setState(2925); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2924); ((Ipv6_router_ospf_stanzaContext)_localctx).ipv6_ro_stanza = ipv6_ro_stanza();
					((Ipv6_router_ospf_stanzaContext)_localctx).rosl.add(((Ipv6_router_ospf_stanzaContext)_localctx).ipv6_ro_stanza);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2927); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,194,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Log_adjacency_changes_ipv6_ro_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode LOG_ADJACENCY_CHANGES() { return getToken(CiscoGrammar.LOG_ADJACENCY_CHANGES, 0); }
		public Log_adjacency_changes_ipv6_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_log_adjacency_changes_ipv6_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterLog_adjacency_changes_ipv6_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitLog_adjacency_changes_ipv6_ro_stanza(this);
		}
	}

	public final Log_adjacency_changes_ipv6_ro_stanzaContext log_adjacency_changes_ipv6_ro_stanza() throws RecognitionException {
		Log_adjacency_changes_ipv6_ro_stanzaContext _localctx = new Log_adjacency_changes_ipv6_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_log_adjacency_changes_ipv6_ro_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2929); match(LOG_ADJACENCY_CHANGES);
			setState(2930); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Maximum_paths_ro_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode MAXIMUM_PATHS() { return getToken(CiscoGrammar.MAXIMUM_PATHS, 0); }
		public Maximum_paths_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maximum_paths_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMaximum_paths_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMaximum_paths_ro_stanza(this);
		}
	}

	public final Maximum_paths_ro_stanzaContext maximum_paths_ro_stanza() throws RecognitionException {
		Maximum_paths_ro_stanzaContext _localctx = new Maximum_paths_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_maximum_paths_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2932); match(MAXIMUM_PATHS);
			setState(2936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(2933);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2938);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2939); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_ro_stanzaContext extends ParserRuleContext {
		public Token ip;
		public Token wildcard;
		public Token area_int;
		public Token area_ip;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode AREA() { return getToken(CiscoGrammar.AREA, 0); }
		public List<TerminalNode> IP_ADDRESS() { return getTokens(CiscoGrammar.IP_ADDRESS); }
		public TerminalNode IP_ADDRESS(int i) {
			return getToken(CiscoGrammar.IP_ADDRESS, i);
		}
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode NETWORK() { return getToken(CiscoGrammar.NETWORK, 0); }
		public Network_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNetwork_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNetwork_ro_stanza(this);
		}
	}

	public final Network_ro_stanzaContext network_ro_stanza() throws RecognitionException {
		Network_ro_stanzaContext _localctx = new Network_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_network_ro_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2941); match(NETWORK);
			setState(2942); ((Network_ro_stanzaContext)_localctx).ip = match(IP_ADDRESS);
			setState(2943); ((Network_ro_stanzaContext)_localctx).wildcard = match(IP_ADDRESS);
			setState(2944); match(AREA);
			setState(2947);
			switch (_input.LA(1)) {
			case DEC:
				{
				setState(2945); ((Network_ro_stanzaContext)_localctx).area_int = match(DEC);
				}
				break;
			case IP_ADDRESS:
				{
				setState(2946); ((Network_ro_stanzaContext)_localctx).area_ip = match(IP_ADDRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2949); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_ipv6_ro_stanzaContext extends ParserRuleContext {
		public Log_adjacency_changes_ipv6_ro_stanzaContext log_adjacency_changes_ipv6_ro_stanza() {
			return getRuleContext(Log_adjacency_changes_ipv6_ro_stanzaContext.class,0);
		}
		public Router_id_ipv6_ro_stanzaContext router_id_ipv6_ro_stanza() {
			return getRuleContext(Router_id_ipv6_ro_stanzaContext.class,0);
		}
		public Default_information_ipv6_ro_stanzaContext default_information_ipv6_ro_stanza() {
			return getRuleContext(Default_information_ipv6_ro_stanzaContext.class,0);
		}
		public Area_ipv6_ro_stanzaContext area_ipv6_ro_stanza() {
			return getRuleContext(Area_ipv6_ro_stanzaContext.class,0);
		}
		public Null_ipv6_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_ipv6_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_ipv6_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_ipv6_ro_stanza(this);
		}
	}

	public final Null_ipv6_ro_stanzaContext null_ipv6_ro_stanza() throws RecognitionException {
		Null_ipv6_ro_stanzaContext _localctx = new Null_ipv6_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_null_ipv6_ro_stanza);
		try {
			setState(2955);
			switch (_input.LA(1)) {
			case AREA:
				enterOuterAlt(_localctx, 1);
				{
				setState(2951); area_ipv6_ro_stanza();
				}
				break;
			case DEFAULT_INFORMATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(2952); default_information_ipv6_ro_stanza();
				}
				break;
			case LOG_ADJACENCY_CHANGES:
				enterOuterAlt(_localctx, 3);
				{
				setState(2953); log_adjacency_changes_ipv6_ro_stanza();
				}
				break;
			case ROUTER_ID:
				enterOuterAlt(_localctx, 4);
				{
				setState(2954); router_id_ipv6_ro_stanza();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_ro_stanzaContext extends ParserRuleContext {
		public Null_standalone_ro_stanzaContext null_standalone_ro_stanza() {
			return getRuleContext(Null_standalone_ro_stanzaContext.class,0);
		}
		public Null_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_ro_stanza(this);
		}
	}

	public final Null_ro_stanzaContext null_ro_stanza() throws RecognitionException {
		Null_ro_stanzaContext _localctx = new Null_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_null_ro_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2957); null_standalone_ro_stanza();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_standalone_ro_stanzaContext extends ParserRuleContext {
		public TerminalNode AREA() { return getToken(CiscoGrammar.AREA, 0); }
		public TerminalNode BFD() { return getToken(CiscoGrammar.BFD, 0); }
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode LOG_ADJACENCY_CHANGES() { return getToken(CiscoGrammar.LOG_ADJACENCY_CHANGES, 0); }
		public TerminalNode AUTO_COST() { return getToken(CiscoGrammar.AUTO_COST, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode NSF() { return getToken(CiscoGrammar.NSF, 0); }
		public TerminalNode DISTRIBUTE_LIST() { return getToken(CiscoGrammar.DISTRIBUTE_LIST, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(CiscoGrammar.AUTHENTICATION, 0); }
		public Null_standalone_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_standalone_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_standalone_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_standalone_ro_stanza(this);
		}
	}

	public final Null_standalone_ro_stanzaContext null_standalone_ro_stanza() throws RecognitionException {
		Null_standalone_ro_stanzaContext _localctx = new Null_standalone_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_null_standalone_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(2959); match(NO);
				}
			}

			setState(2970);
			switch (_input.LA(1)) {
			case AREA:
				{
				{
				setState(2962); match(AREA);
				setState(2963);
				_la = _input.LA(1);
				if ( !(_la==DEC || _la==IP_ADDRESS) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2964); match(AUTHENTICATION);
				}
				}
				break;
			case AUTO_COST:
				{
				setState(2965); match(AUTO_COST);
				}
				break;
			case BFD:
				{
				setState(2966); match(BFD);
				}
				break;
			case DISTRIBUTE_LIST:
				{
				setState(2967); match(DISTRIBUTE_LIST);
				}
				break;
			case LOG_ADJACENCY_CHANGES:
				{
				setState(2968); match(LOG_ADJACENCY_CHANGES);
				}
				break;
			case NSF:
				{
				setState(2969); match(NSF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(2972);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2977);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2978); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Passive_interface_ipv6_ro_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode PASSIVE_INTERFACE() { return getToken(CiscoGrammar.PASSIVE_INTERFACE, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public Passive_interface_ipv6_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passive_interface_ipv6_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterPassive_interface_ipv6_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitPassive_interface_ipv6_ro_stanza(this);
		}
	}

	public final Passive_interface_ipv6_ro_stanzaContext passive_interface_ipv6_ro_stanza() throws RecognitionException {
		Passive_interface_ipv6_ro_stanzaContext _localctx = new Passive_interface_ipv6_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_passive_interface_ipv6_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2981);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(2980); match(NO);
				}
			}

			setState(2983); match(PASSIVE_INTERFACE);
			setState(2987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(2984);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(2989);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2990); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Passive_interface_default_ro_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode DEFAULT() { return getToken(CiscoGrammar.DEFAULT, 0); }
		public TerminalNode PASSIVE_INTERFACE() { return getToken(CiscoGrammar.PASSIVE_INTERFACE, 0); }
		public Passive_interface_default_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passive_interface_default_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterPassive_interface_default_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitPassive_interface_default_ro_stanza(this);
		}
	}

	public final Passive_interface_default_ro_stanzaContext passive_interface_default_ro_stanza() throws RecognitionException {
		Passive_interface_default_ro_stanzaContext _localctx = new Passive_interface_default_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_passive_interface_default_ro_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2992); match(PASSIVE_INTERFACE);
			setState(2993); match(DEFAULT);
			setState(2994); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Passive_interface_ro_stanzaContext extends ParserRuleContext {
		public Token i;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode PASSIVE_INTERFACE() { return getToken(CiscoGrammar.PASSIVE_INTERFACE, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public Passive_interface_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passive_interface_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterPassive_interface_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitPassive_interface_ro_stanza(this);
		}
	}

	public final Passive_interface_ro_stanzaContext passive_interface_ro_stanza() throws RecognitionException {
		Passive_interface_ro_stanzaContext _localctx = new Passive_interface_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_passive_interface_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2997);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(2996); match(NO);
				}
			}

			setState(2999); match(PASSIVE_INTERFACE);
			setState(3000); ((Passive_interface_ro_stanzaContext)_localctx).i = match(VARIABLE);
			setState(3001); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_bgp_ro_stanzaContext extends ParserRuleContext {
		public Token as;
		public Token metric;
		public Token type;
		public Token map;
		public Token subnets;
		public Token tag;
		public List<TerminalNode> ROUTE_MAP() { return getTokens(CiscoGrammar.ROUTE_MAP); }
		public List<TerminalNode> VARIABLE() { return getTokens(CiscoGrammar.VARIABLE); }
		public TerminalNode SUBNETS(int i) {
			return getToken(CiscoGrammar.SUBNETS, i);
		}
		public TerminalNode TAG(int i) {
			return getToken(CiscoGrammar.TAG, i);
		}
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public List<TerminalNode> METRIC_TYPE() { return getTokens(CiscoGrammar.METRIC_TYPE); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode METRIC_TYPE(int i) {
			return getToken(CiscoGrammar.METRIC_TYPE, i);
		}
		public TerminalNode REDISTRIBUTE() { return getToken(CiscoGrammar.REDISTRIBUTE, 0); }
		public TerminalNode BGP() { return getToken(CiscoGrammar.BGP, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<TerminalNode> METRIC() { return getTokens(CiscoGrammar.METRIC); }
		public TerminalNode METRIC(int i) {
			return getToken(CiscoGrammar.METRIC, i);
		}
		public TerminalNode VARIABLE(int i) {
			return getToken(CiscoGrammar.VARIABLE, i);
		}
		public List<TerminalNode> TAG() { return getTokens(CiscoGrammar.TAG); }
		public List<TerminalNode> SUBNETS() { return getTokens(CiscoGrammar.SUBNETS); }
		public TerminalNode ROUTE_MAP(int i) {
			return getToken(CiscoGrammar.ROUTE_MAP, i);
		}
		public Redistribute_bgp_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_bgp_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_bgp_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_bgp_ro_stanza(this);
		}
	}

	public final Redistribute_bgp_ro_stanzaContext redistribute_bgp_ro_stanza() throws RecognitionException {
		Redistribute_bgp_ro_stanzaContext _localctx = new Redistribute_bgp_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_redistribute_bgp_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3003); match(REDISTRIBUTE);
			setState(3004); match(BGP);
			setState(3005); ((Redistribute_bgp_ro_stanzaContext)_localctx).as = match(DEC);
			setState(3017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==METRIC || _la==METRIC_TYPE || _la==ROUTE_MAP || _la==SUBNETS || _la==TAG) {
				{
				setState(3015);
				switch (_input.LA(1)) {
				case METRIC:
					{
					{
					setState(3006); match(METRIC);
					setState(3007); ((Redistribute_bgp_ro_stanzaContext)_localctx).metric = match(DEC);
					}
					}
					break;
				case METRIC_TYPE:
					{
					{
					setState(3008); match(METRIC_TYPE);
					setState(3009); ((Redistribute_bgp_ro_stanzaContext)_localctx).type = match(DEC);
					}
					}
					break;
				case ROUTE_MAP:
					{
					{
					setState(3010); match(ROUTE_MAP);
					setState(3011); ((Redistribute_bgp_ro_stanzaContext)_localctx).map = match(VARIABLE);
					}
					}
					break;
				case SUBNETS:
					{
					setState(3012); ((Redistribute_bgp_ro_stanzaContext)_localctx).subnets = match(SUBNETS);
					}
					break;
				case TAG:
					{
					{
					setState(3013); match(TAG);
					setState(3014); ((Redistribute_bgp_ro_stanzaContext)_localctx).tag = match(DEC);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3019);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3020); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_ipv6_ro_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode REDISTRIBUTE() { return getToken(CiscoGrammar.REDISTRIBUTE, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Redistribute_ipv6_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_ipv6_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_ipv6_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_ipv6_ro_stanza(this);
		}
	}

	public final Redistribute_ipv6_ro_stanzaContext redistribute_ipv6_ro_stanza() throws RecognitionException {
		Redistribute_ipv6_ro_stanzaContext _localctx = new Redistribute_ipv6_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_redistribute_ipv6_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3022); match(REDISTRIBUTE);
			setState(3026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3023);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3028);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3029); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_connected_ro_stanzaContext extends ParserRuleContext {
		public Token metric;
		public Token type;
		public Token map;
		public Token subnets;
		public Token tag;
		public List<TerminalNode> ROUTE_MAP() { return getTokens(CiscoGrammar.ROUTE_MAP); }
		public List<TerminalNode> VARIABLE() { return getTokens(CiscoGrammar.VARIABLE); }
		public TerminalNode SUBNETS(int i) {
			return getToken(CiscoGrammar.SUBNETS, i);
		}
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode TAG(int i) {
			return getToken(CiscoGrammar.TAG, i);
		}
		public List<TerminalNode> METRIC_TYPE() { return getTokens(CiscoGrammar.METRIC_TYPE); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode METRIC_TYPE(int i) {
			return getToken(CiscoGrammar.METRIC_TYPE, i);
		}
		public TerminalNode REDISTRIBUTE() { return getToken(CiscoGrammar.REDISTRIBUTE, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<TerminalNode> METRIC() { return getTokens(CiscoGrammar.METRIC); }
		public TerminalNode METRIC(int i) {
			return getToken(CiscoGrammar.METRIC, i);
		}
		public TerminalNode VARIABLE(int i) {
			return getToken(CiscoGrammar.VARIABLE, i);
		}
		public TerminalNode CONNECTED() { return getToken(CiscoGrammar.CONNECTED, 0); }
		public List<TerminalNode> TAG() { return getTokens(CiscoGrammar.TAG); }
		public List<TerminalNode> SUBNETS() { return getTokens(CiscoGrammar.SUBNETS); }
		public TerminalNode ROUTE_MAP(int i) {
			return getToken(CiscoGrammar.ROUTE_MAP, i);
		}
		public Redistribute_connected_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_connected_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_connected_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_connected_ro_stanza(this);
		}
	}

	public final Redistribute_connected_ro_stanzaContext redistribute_connected_ro_stanza() throws RecognitionException {
		Redistribute_connected_ro_stanzaContext _localctx = new Redistribute_connected_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_redistribute_connected_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3031); match(REDISTRIBUTE);
			setState(3032); match(CONNECTED);
			setState(3044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==METRIC || _la==METRIC_TYPE || _la==ROUTE_MAP || _la==SUBNETS || _la==TAG) {
				{
				setState(3042);
				switch (_input.LA(1)) {
				case METRIC:
					{
					{
					setState(3033); match(METRIC);
					setState(3034); ((Redistribute_connected_ro_stanzaContext)_localctx).metric = match(DEC);
					}
					}
					break;
				case METRIC_TYPE:
					{
					{
					setState(3035); match(METRIC_TYPE);
					setState(3036); ((Redistribute_connected_ro_stanzaContext)_localctx).type = match(DEC);
					}
					}
					break;
				case ROUTE_MAP:
					{
					{
					setState(3037); match(ROUTE_MAP);
					setState(3038); ((Redistribute_connected_ro_stanzaContext)_localctx).map = match(VARIABLE);
					}
					}
					break;
				case SUBNETS:
					{
					setState(3039); ((Redistribute_connected_ro_stanzaContext)_localctx).subnets = match(SUBNETS);
					}
					break;
				case TAG:
					{
					{
					setState(3040); match(TAG);
					setState(3041); ((Redistribute_connected_ro_stanzaContext)_localctx).tag = match(DEC);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3046);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3047); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_rip_ro_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode REDISTRIBUTE() { return getToken(CiscoGrammar.REDISTRIBUTE, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode RIP() { return getToken(CiscoGrammar.RIP, 0); }
		public Redistribute_rip_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_rip_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_rip_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_rip_ro_stanza(this);
		}
	}

	public final Redistribute_rip_ro_stanzaContext redistribute_rip_ro_stanza() throws RecognitionException {
		Redistribute_rip_ro_stanzaContext _localctx = new Redistribute_rip_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_redistribute_rip_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3049); match(REDISTRIBUTE);
			setState(3050); match(RIP);
			setState(3054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3051);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3056);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3057); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_static_ro_stanzaContext extends ParserRuleContext {
		public Token metric;
		public Token type;
		public Token map;
		public Token subnets;
		public Token tag;
		public List<TerminalNode> ROUTE_MAP() { return getTokens(CiscoGrammar.ROUTE_MAP); }
		public List<TerminalNode> VARIABLE() { return getTokens(CiscoGrammar.VARIABLE); }
		public TerminalNode SUBNETS(int i) {
			return getToken(CiscoGrammar.SUBNETS, i);
		}
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode TAG(int i) {
			return getToken(CiscoGrammar.TAG, i);
		}
		public List<TerminalNode> METRIC_TYPE() { return getTokens(CiscoGrammar.METRIC_TYPE); }
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode METRIC_TYPE(int i) {
			return getToken(CiscoGrammar.METRIC_TYPE, i);
		}
		public TerminalNode REDISTRIBUTE() { return getToken(CiscoGrammar.REDISTRIBUTE, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<TerminalNode> METRIC() { return getTokens(CiscoGrammar.METRIC); }
		public TerminalNode METRIC(int i) {
			return getToken(CiscoGrammar.METRIC, i);
		}
		public TerminalNode VARIABLE(int i) {
			return getToken(CiscoGrammar.VARIABLE, i);
		}
		public TerminalNode STATIC() { return getToken(CiscoGrammar.STATIC, 0); }
		public List<TerminalNode> TAG() { return getTokens(CiscoGrammar.TAG); }
		public List<TerminalNode> SUBNETS() { return getTokens(CiscoGrammar.SUBNETS); }
		public TerminalNode ROUTE_MAP(int i) {
			return getToken(CiscoGrammar.ROUTE_MAP, i);
		}
		public Redistribute_static_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_static_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_static_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_static_ro_stanza(this);
		}
	}

	public final Redistribute_static_ro_stanzaContext redistribute_static_ro_stanza() throws RecognitionException {
		Redistribute_static_ro_stanzaContext _localctx = new Redistribute_static_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_redistribute_static_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3059); match(REDISTRIBUTE);
			setState(3060); match(STATIC);
			setState(3072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==METRIC || _la==METRIC_TYPE || _la==ROUTE_MAP || _la==SUBNETS || _la==TAG) {
				{
				setState(3070);
				switch (_input.LA(1)) {
				case METRIC:
					{
					{
					setState(3061); match(METRIC);
					setState(3062); ((Redistribute_static_ro_stanzaContext)_localctx).metric = match(DEC);
					}
					}
					break;
				case METRIC_TYPE:
					{
					{
					setState(3063); match(METRIC_TYPE);
					setState(3064); ((Redistribute_static_ro_stanzaContext)_localctx).type = match(DEC);
					}
					}
					break;
				case ROUTE_MAP:
					{
					{
					setState(3065); match(ROUTE_MAP);
					setState(3066); ((Redistribute_static_ro_stanzaContext)_localctx).map = match(VARIABLE);
					}
					}
					break;
				case SUBNETS:
					{
					setState(3067); ((Redistribute_static_ro_stanzaContext)_localctx).subnets = match(SUBNETS);
					}
					break;
				case TAG:
					{
					{
					setState(3068); match(TAG);
					setState(3069); ((Redistribute_static_ro_stanzaContext)_localctx).tag = match(DEC);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3074);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3075); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ro_stanzaContext extends ParserRuleContext {
		public Redistribute_rip_ro_stanzaContext redistribute_rip_ro_stanza() {
			return getRuleContext(Redistribute_rip_ro_stanzaContext.class,0);
		}
		public Area_nssa_ro_stanzaContext area_nssa_ro_stanza() {
			return getRuleContext(Area_nssa_ro_stanzaContext.class,0);
		}
		public Redistribute_static_ro_stanzaContext redistribute_static_ro_stanza() {
			return getRuleContext(Redistribute_static_ro_stanzaContext.class,0);
		}
		public Redistribute_connected_ro_stanzaContext redistribute_connected_ro_stanza() {
			return getRuleContext(Redistribute_connected_ro_stanzaContext.class,0);
		}
		public Network_ro_stanzaContext network_ro_stanza() {
			return getRuleContext(Network_ro_stanzaContext.class,0);
		}
		public Router_id_ro_stanzaContext router_id_ro_stanza() {
			return getRuleContext(Router_id_ro_stanzaContext.class,0);
		}
		public Redistribute_bgp_ro_stanzaContext redistribute_bgp_ro_stanza() {
			return getRuleContext(Redistribute_bgp_ro_stanzaContext.class,0);
		}
		public Passive_interface_default_ro_stanzaContext passive_interface_default_ro_stanza() {
			return getRuleContext(Passive_interface_default_ro_stanzaContext.class,0);
		}
		public Maximum_paths_ro_stanzaContext maximum_paths_ro_stanza() {
			return getRuleContext(Maximum_paths_ro_stanzaContext.class,0);
		}
		public Passive_interface_ro_stanzaContext passive_interface_ro_stanza() {
			return getRuleContext(Passive_interface_ro_stanzaContext.class,0);
		}
		public Null_ro_stanzaContext null_ro_stanza() {
			return getRuleContext(Null_ro_stanzaContext.class,0);
		}
		public Default_information_ro_stanzaContext default_information_ro_stanza() {
			return getRuleContext(Default_information_ro_stanzaContext.class,0);
		}
		public Ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRo_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRo_stanza(this);
		}
	}

	public final Ro_stanzaContext ro_stanza() throws RecognitionException {
		Ro_stanzaContext _localctx = new Ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_ro_stanza);
		try {
			setState(3089);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3077); area_nssa_ro_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3078); default_information_ro_stanza();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3079); maximum_paths_ro_stanza();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3080); network_ro_stanza();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3081); null_ro_stanza();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3082); passive_interface_default_ro_stanza();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3083); passive_interface_ro_stanza();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3084); redistribute_bgp_ro_stanza();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3085); redistribute_connected_ro_stanza();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3086); redistribute_rip_ro_stanza();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3087); redistribute_static_ro_stanza();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3088); router_id_ro_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Router_id_ipv6_ro_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode ROUTER_ID() { return getToken(CiscoGrammar.ROUTER_ID, 0); }
		public Router_id_ipv6_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_router_id_ipv6_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRouter_id_ipv6_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRouter_id_ipv6_ro_stanza(this);
		}
	}

	public final Router_id_ipv6_ro_stanzaContext router_id_ipv6_ro_stanza() throws RecognitionException {
		Router_id_ipv6_ro_stanzaContext _localctx = new Router_id_ipv6_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_router_id_ipv6_ro_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3091); match(ROUTER_ID);
			setState(3095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3092);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3097);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3098); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Router_id_ro_stanzaContext extends ParserRuleContext {
		public Token ip;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode ROUTER_ID() { return getToken(CiscoGrammar.ROUTER_ID, 0); }
		public Router_id_ro_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_router_id_ro_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRouter_id_ro_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRouter_id_ro_stanza(this);
		}
	}

	public final Router_id_ro_stanzaContext router_id_ro_stanza() throws RecognitionException {
		Router_id_ro_stanzaContext _localctx = new Router_id_ro_stanzaContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_router_id_ro_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3100); match(ROUTER_ID);
			setState(3101); ((Router_id_ro_stanzaContext)_localctx).ip = match(IP_ADDRESS);
			setState(3102); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Router_ospf_stanzaContext extends ParserRuleContext {
		public Token procnum;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode OSPF() { return getToken(CiscoGrammar.OSPF, 0); }
		public TerminalNode ROUTER() { return getToken(CiscoGrammar.ROUTER, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Router_ospf_stanza_tailContext router_ospf_stanza_tail() {
			return getRuleContext(Router_ospf_stanza_tailContext.class,0);
		}
		public Router_ospf_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_router_ospf_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRouter_ospf_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRouter_ospf_stanza(this);
		}
	}

	public final Router_ospf_stanzaContext router_ospf_stanza() throws RecognitionException {
		Router_ospf_stanzaContext _localctx = new Router_ospf_stanzaContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_router_ospf_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3104); match(ROUTER);
			setState(3105); match(OSPF);
			setState(3106); ((Router_ospf_stanzaContext)_localctx).procnum = match(DEC);
			setState(3107); match(NEWLINE);
			setState(3108); router_ospf_stanza_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Router_ospf_stanza_tailContext extends ParserRuleContext {
		public Ro_stanzaContext ro_stanza;
		public List<Ro_stanzaContext> rosl = new ArrayList<Ro_stanzaContext>();
		public Ro_stanzaContext ro_stanza(int i) {
			return getRuleContext(Ro_stanzaContext.class,i);
		}
		public List<Ro_stanzaContext> ro_stanza() {
			return getRuleContexts(Ro_stanzaContext.class);
		}
		public Router_ospf_stanza_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_router_ospf_stanza_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRouter_ospf_stanza_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRouter_ospf_stanza_tail(this);
		}
	}

	public final Router_ospf_stanza_tailContext router_ospf_stanza_tail() throws RecognitionException {
		Router_ospf_stanza_tailContext _localctx = new Router_ospf_stanza_tailContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_router_ospf_stanza_tail);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3111); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3110); ((Router_ospf_stanza_tailContext)_localctx).ro_stanza = ro_stanza();
					((Router_ospf_stanza_tailContext)_localctx).rosl.add(((Router_ospf_stanza_tailContext)_localctx).ro_stanza);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3113); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,214,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Distance_rr_stanzaContext extends ParserRuleContext {
		public Token distance;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode DISTANCE() { return getToken(CiscoGrammar.DISTANCE, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Distance_rr_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distance_rr_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterDistance_rr_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitDistance_rr_stanza(this);
		}
	}

	public final Distance_rr_stanzaContext distance_rr_stanza() throws RecognitionException {
		Distance_rr_stanzaContext _localctx = new Distance_rr_stanzaContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_distance_rr_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3115); match(DISTANCE);
			setState(3116); ((Distance_rr_stanzaContext)_localctx).distance = match(DEC);
			setState(3117); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Distribute_list_rr_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode DISTRIBUTE_LIST() { return getToken(CiscoGrammar.DISTRIBUTE_LIST, 0); }
		public Distribute_list_rr_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distribute_list_rr_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterDistribute_list_rr_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitDistribute_list_rr_stanza(this);
		}
	}

	public final Distribute_list_rr_stanzaContext distribute_list_rr_stanza() throws RecognitionException {
		Distribute_list_rr_stanzaContext _localctx = new Distribute_list_rr_stanzaContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_distribute_list_rr_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3119); match(DISTRIBUTE_LIST);
			setState(3123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3120);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3125);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3126); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_rr_stanzaContext extends ParserRuleContext {
		public Token network;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode IP_ADDRESS() { return getToken(CiscoGrammar.IP_ADDRESS, 0); }
		public TerminalNode NETWORK() { return getToken(CiscoGrammar.NETWORK, 0); }
		public Network_rr_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_rr_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNetwork_rr_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNetwork_rr_stanza(this);
		}
	}

	public final Network_rr_stanzaContext network_rr_stanza() throws RecognitionException {
		Network_rr_stanzaContext _localctx = new Network_rr_stanzaContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_network_rr_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3128); match(NETWORK);
			setState(3129); ((Network_rr_stanzaContext)_localctx).network = match(IP_ADDRESS);
			setState(3130); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Passive_interface_rr_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode PASSIVE_INTERFACE() { return getToken(CiscoGrammar.PASSIVE_INTERFACE, 0); }
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public Passive_interface_rr_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passive_interface_rr_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterPassive_interface_rr_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitPassive_interface_rr_stanza(this);
		}
	}

	public final Passive_interface_rr_stanzaContext passive_interface_rr_stanza() throws RecognitionException {
		Passive_interface_rr_stanzaContext _localctx = new Passive_interface_rr_stanzaContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_passive_interface_rr_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3133);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(3132); match(NO);
				}
			}

			setState(3135); match(PASSIVE_INTERFACE);
			setState(3139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3136);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3141);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3142); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redistribute_rr_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode REDISTRIBUTE() { return getToken(CiscoGrammar.REDISTRIBUTE, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public Redistribute_rr_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redistribute_rr_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRedistribute_rr_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRedistribute_rr_stanza(this);
		}
	}

	public final Redistribute_rr_stanzaContext redistribute_rr_stanza() throws RecognitionException {
		Redistribute_rr_stanzaContext _localctx = new Redistribute_rr_stanzaContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_redistribute_rr_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3144); match(REDISTRIBUTE);
			setState(3148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3145);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3150);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3151); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Router_rip_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode ROUTER() { return getToken(CiscoGrammar.ROUTER, 0); }
		public List<Rr_stanzaContext> rr_stanza() {
			return getRuleContexts(Rr_stanzaContext.class);
		}
		public TerminalNode RIP() { return getToken(CiscoGrammar.RIP, 0); }
		public Rr_stanzaContext rr_stanza(int i) {
			return getRuleContext(Rr_stanzaContext.class,i);
		}
		public Router_rip_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_router_rip_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRouter_rip_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRouter_rip_stanza(this);
		}
	}

	public final Router_rip_stanzaContext router_rip_stanza() throws RecognitionException {
		Router_rip_stanzaContext _localctx = new Router_rip_stanzaContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_router_rip_stanza);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3153); match(ROUTER);
			setState(3154); match(RIP);
			setState(3155); match(NEWLINE);
			setState(3159);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3156); rr_stanza();
					}
					} 
				}
				setState(3161);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rr_stanzaContext extends ParserRuleContext {
		public Distribute_list_rr_stanzaContext distribute_list_rr_stanza() {
			return getRuleContext(Distribute_list_rr_stanzaContext.class,0);
		}
		public Distance_rr_stanzaContext distance_rr_stanza() {
			return getRuleContext(Distance_rr_stanzaContext.class,0);
		}
		public Network_rr_stanzaContext network_rr_stanza() {
			return getRuleContext(Network_rr_stanzaContext.class,0);
		}
		public Redistribute_rr_stanzaContext redistribute_rr_stanza() {
			return getRuleContext(Redistribute_rr_stanzaContext.class,0);
		}
		public Passive_interface_rr_stanzaContext passive_interface_rr_stanza() {
			return getRuleContext(Passive_interface_rr_stanzaContext.class,0);
		}
		public Rr_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rr_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRr_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRr_stanza(this);
		}
	}

	public final Rr_stanzaContext rr_stanza() throws RecognitionException {
		Rr_stanzaContext _localctx = new Rr_stanzaContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_rr_stanza);
		try {
			setState(3167);
			switch (_input.LA(1)) {
			case DISTANCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3162); distance_rr_stanza();
				}
				break;
			case DISTRIBUTE_LIST:
				enterOuterAlt(_localctx, 2);
				{
				setState(3163); distribute_list_rr_stanza();
				}
				break;
			case NETWORK:
				enterOuterAlt(_localctx, 3);
				{
				setState(3164); network_rr_stanza();
				}
				break;
			case NO:
			case PASSIVE_INTERFACE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3165); passive_interface_rr_stanza();
				}
				break;
			case REDISTRIBUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3166); redistribute_rr_stanza();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_as_path_access_list_rm_stanzaContext extends ParserRuleContext {
		public Token DEC;
		public List<Token> name_list = new ArrayList<Token>();
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode MATCH() { return getToken(CiscoGrammar.MATCH, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode AS_PATH() { return getToken(CiscoGrammar.AS_PATH, 0); }
		public Match_as_path_access_list_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_as_path_access_list_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMatch_as_path_access_list_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMatch_as_path_access_list_rm_stanza(this);
		}
	}

	public final Match_as_path_access_list_rm_stanzaContext match_as_path_access_list_rm_stanza() throws RecognitionException {
		Match_as_path_access_list_rm_stanzaContext _localctx = new Match_as_path_access_list_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_match_as_path_access_list_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3169); match(MATCH);
			setState(3170); match(AS_PATH);
			setState(3172); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3171); ((Match_as_path_access_list_rm_stanzaContext)_localctx).DEC = match(DEC);
				((Match_as_path_access_list_rm_stanzaContext)_localctx).name_list.add(((Match_as_path_access_list_rm_stanzaContext)_localctx).DEC);
				}
				}
				setState(3174); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DEC );
			setState(3176); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_community_list_rm_stanzaContext extends ParserRuleContext {
		public Token VARIABLE;
		public List<Token> name_list = new ArrayList<Token>();
		public Token DEC;
		public Token _tset60;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode MATCH() { return getToken(CiscoGrammar.MATCH, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<TerminalNode> VARIABLE() { return getTokens(CiscoGrammar.VARIABLE); }
		public TerminalNode COMMUNITY() { return getToken(CiscoGrammar.COMMUNITY, 0); }
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode VARIABLE(int i) {
			return getToken(CiscoGrammar.VARIABLE, i);
		}
		public Match_community_list_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_community_list_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMatch_community_list_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMatch_community_list_rm_stanza(this);
		}
	}

	public final Match_community_list_rm_stanzaContext match_community_list_rm_stanza() throws RecognitionException {
		Match_community_list_rm_stanzaContext _localctx = new Match_community_list_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_match_community_list_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3178); match(MATCH);
			setState(3179); match(COMMUNITY);
			setState(3181); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3180);
				((Match_community_list_rm_stanzaContext)_localctx)._tset60 = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VARIABLE || _la==DEC) ) {
					((Match_community_list_rm_stanzaContext)_localctx)._tset60 = (Token)_errHandler.recoverInline(this);
				}
				consume();
				((Match_community_list_rm_stanzaContext)_localctx).name_list.add(((Match_community_list_rm_stanzaContext)_localctx)._tset60);
				}
				}
				setState(3183); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==VARIABLE || _la==DEC );
			setState(3185); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_ip_access_list_rm_stanzaContext extends ParserRuleContext {
		public Token VARIABLE;
		public List<Token> name_list = new ArrayList<Token>();
		public Token DEC;
		public Token _tset93;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode MATCH() { return getToken(CiscoGrammar.MATCH, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<TerminalNode> VARIABLE() { return getTokens(CiscoGrammar.VARIABLE); }
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode VARIABLE(int i) {
			return getToken(CiscoGrammar.VARIABLE, i);
		}
		public TerminalNode ADDRESS() { return getToken(CiscoGrammar.ADDRESS, 0); }
		public Match_ip_access_list_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_ip_access_list_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMatch_ip_access_list_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMatch_ip_access_list_rm_stanza(this);
		}
	}

	public final Match_ip_access_list_rm_stanzaContext match_ip_access_list_rm_stanza() throws RecognitionException {
		Match_ip_access_list_rm_stanzaContext _localctx = new Match_ip_access_list_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_match_ip_access_list_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3187); match(MATCH);
			setState(3188); match(IP);
			setState(3189); match(ADDRESS);
			setState(3191); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3190);
				((Match_ip_access_list_rm_stanzaContext)_localctx)._tset93 = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VARIABLE || _la==DEC) ) {
					((Match_ip_access_list_rm_stanzaContext)_localctx)._tset93 = (Token)_errHandler.recoverInline(this);
				}
				consume();
				((Match_ip_access_list_rm_stanzaContext)_localctx).name_list.add(((Match_ip_access_list_rm_stanzaContext)_localctx)._tset93);
				}
				}
				setState(3193); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==VARIABLE || _la==DEC );
			setState(3195); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_ip_prefix_list_rm_stanzaContext extends ParserRuleContext {
		public Token VARIABLE;
		public List<Token> name_list = new ArrayList<Token>();
		public Token DEC;
		public Token _tset128;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode MATCH() { return getToken(CiscoGrammar.MATCH, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<TerminalNode> VARIABLE() { return getTokens(CiscoGrammar.VARIABLE); }
		public TerminalNode PREFIX_LIST() { return getToken(CiscoGrammar.PREFIX_LIST, 0); }
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode VARIABLE(int i) {
			return getToken(CiscoGrammar.VARIABLE, i);
		}
		public TerminalNode ADDRESS() { return getToken(CiscoGrammar.ADDRESS, 0); }
		public Match_ip_prefix_list_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_ip_prefix_list_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMatch_ip_prefix_list_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMatch_ip_prefix_list_rm_stanza(this);
		}
	}

	public final Match_ip_prefix_list_rm_stanzaContext match_ip_prefix_list_rm_stanza() throws RecognitionException {
		Match_ip_prefix_list_rm_stanzaContext _localctx = new Match_ip_prefix_list_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_match_ip_prefix_list_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3197); match(MATCH);
			setState(3198); match(IP);
			setState(3199); match(ADDRESS);
			setState(3200); match(PREFIX_LIST);
			setState(3202); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3201);
				((Match_ip_prefix_list_rm_stanzaContext)_localctx)._tset128 = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VARIABLE || _la==DEC) ) {
					((Match_ip_prefix_list_rm_stanzaContext)_localctx)._tset128 = (Token)_errHandler.recoverInline(this);
				}
				consume();
				((Match_ip_prefix_list_rm_stanzaContext)_localctx).name_list.add(((Match_ip_prefix_list_rm_stanzaContext)_localctx)._tset128);
				}
				}
				setState(3204); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==VARIABLE || _la==DEC );
			setState(3206); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_ipv6_rm_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode MATCH() { return getToken(CiscoGrammar.MATCH, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public Match_ipv6_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_ipv6_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMatch_ipv6_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMatch_ipv6_rm_stanza(this);
		}
	}

	public final Match_ipv6_rm_stanzaContext match_ipv6_rm_stanza() throws RecognitionException {
		Match_ipv6_rm_stanzaContext _localctx = new Match_ipv6_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_match_ipv6_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3208); match(MATCH);
			setState(3209); match(IPV6);
			setState(3213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3210);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3215);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3216); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_length_rm_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode MATCH() { return getToken(CiscoGrammar.MATCH, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode LENGTH() { return getToken(CiscoGrammar.LENGTH, 0); }
		public Match_length_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_length_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMatch_length_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMatch_length_rm_stanza(this);
		}
	}

	public final Match_length_rm_stanzaContext match_length_rm_stanza() throws RecognitionException {
		Match_length_rm_stanzaContext _localctx = new Match_length_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_match_length_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3218); match(MATCH);
			setState(3219); match(LENGTH);
			setState(3223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3220);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3225);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3226); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_rm_stanzaContext extends ParserRuleContext {
		public Match_ipv6_rm_stanzaContext match_ipv6_rm_stanza() {
			return getRuleContext(Match_ipv6_rm_stanzaContext.class,0);
		}
		public Match_ip_access_list_rm_stanzaContext match_ip_access_list_rm_stanza() {
			return getRuleContext(Match_ip_access_list_rm_stanzaContext.class,0);
		}
		public Match_community_list_rm_stanzaContext match_community_list_rm_stanza() {
			return getRuleContext(Match_community_list_rm_stanzaContext.class,0);
		}
		public Match_as_path_access_list_rm_stanzaContext match_as_path_access_list_rm_stanza() {
			return getRuleContext(Match_as_path_access_list_rm_stanzaContext.class,0);
		}
		public Match_ip_prefix_list_rm_stanzaContext match_ip_prefix_list_rm_stanza() {
			return getRuleContext(Match_ip_prefix_list_rm_stanzaContext.class,0);
		}
		public Match_length_rm_stanzaContext match_length_rm_stanza() {
			return getRuleContext(Match_length_rm_stanzaContext.class,0);
		}
		public Match_tag_rm_stanzaContext match_tag_rm_stanza() {
			return getRuleContext(Match_tag_rm_stanzaContext.class,0);
		}
		public Match_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMatch_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMatch_rm_stanza(this);
		}
	}

	public final Match_rm_stanzaContext match_rm_stanza() throws RecognitionException {
		Match_rm_stanzaContext _localctx = new Match_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_match_rm_stanza);
		try {
			setState(3235);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3228); match_as_path_access_list_rm_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3229); match_community_list_rm_stanza();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3230); match_ip_access_list_rm_stanza();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3231); match_ip_prefix_list_rm_stanza();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3232); match_ipv6_rm_stanza();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3233); match_length_rm_stanza();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3234); match_tag_rm_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_tag_rm_stanzaContext extends ParserRuleContext {
		public Token DEC;
		public List<Token> tag_list = new ArrayList<Token>();
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode MATCH() { return getToken(CiscoGrammar.MATCH, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode TAG() { return getToken(CiscoGrammar.TAG, 0); }
		public Match_tag_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_tag_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterMatch_tag_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitMatch_tag_rm_stanza(this);
		}
	}

	public final Match_tag_rm_stanzaContext match_tag_rm_stanza() throws RecognitionException {
		Match_tag_rm_stanzaContext _localctx = new Match_tag_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_match_tag_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3237); match(MATCH);
			setState(3238); match(TAG);
			setState(3240); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3239); ((Match_tag_rm_stanzaContext)_localctx).DEC = match(DEC);
				((Match_tag_rm_stanzaContext)_localctx).tag_list.add(((Match_tag_rm_stanzaContext)_localctx).DEC);
				}
				}
				setState(3242); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DEC );
			setState(3244); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_rm_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode NO() { return getToken(CiscoGrammar.NO, 0); }
		public TerminalNode DESCRIPTION() { return getToken(CiscoGrammar.DESCRIPTION, 0); }
		public Null_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterNull_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitNull_rm_stanza(this);
		}
	}

	public final Null_rm_stanzaContext null_rm_stanza() throws RecognitionException {
		Null_rm_stanzaContext _localctx = new Null_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_null_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3247);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(3246); match(NO);
				}
			}

			{
			setState(3249); match(DESCRIPTION);
			}
			setState(3253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3250);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3255);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3256); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rm_stanzaContext extends ParserRuleContext {
		public Match_rm_stanzaContext match_rm_stanza() {
			return getRuleContext(Match_rm_stanzaContext.class,0);
		}
		public Set_rm_stanzaContext set_rm_stanza() {
			return getRuleContext(Set_rm_stanzaContext.class,0);
		}
		public Null_rm_stanzaContext null_rm_stanza() {
			return getRuleContext(Null_rm_stanzaContext.class,0);
		}
		public Rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRm_stanza(this);
		}
	}

	public final Rm_stanzaContext rm_stanza() throws RecognitionException {
		Rm_stanzaContext _localctx = new Rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_rm_stanza);
		try {
			setState(3261);
			switch (_input.LA(1)) {
			case MATCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3258); match_rm_stanza();
				}
				break;
			case DESCRIPTION:
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3259); null_rm_stanza();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(3260); set_rm_stanza();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Route_map_named_stanzaContext extends ParserRuleContext {
		public boolean again;
		public Token name;
		public TerminalNode ROUTE_MAP() { return getToken(CiscoGrammar.ROUTE_MAP, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public Route_map_named_stanzaContext route_map_named_stanza() {
			return getRuleContext(Route_map_named_stanzaContext.class,0);
		}
		public Route_map_tailContext route_map_tail() {
			return getRuleContext(Route_map_tailContext.class,0);
		}
		public Route_map_named_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_route_map_named_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRoute_map_named_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRoute_map_named_stanza(this);
		}
	}

	public final Route_map_named_stanzaContext route_map_named_stanza() throws RecognitionException {
		Route_map_named_stanzaContext _localctx = new Route_map_named_stanzaContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_route_map_named_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3263); match(ROUTE_MAP);
			setState(3264); ((Route_map_named_stanzaContext)_localctx).name = match(VARIABLE);
			setState(3265); route_map_tail();

					((Route_map_named_stanzaContext)_localctx).again =  _input.LT(1).getType() == ROUTE_MAP &&
					_input.LT(2).getType() == VARIABLE &&
					_input.LT(2).getText().equals((((Route_map_named_stanzaContext)_localctx).name!=null?((Route_map_named_stanzaContext)_localctx).name.getText():null));
				
			setState(3270);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(3267);
				if (!(_localctx.again)) throw new FailedPredicateException(this, "$again");
				setState(3268); route_map_named_stanza();
				}
				break;
			case 2:
				{
				setState(3269);
				if (!(!_localctx.again)) throw new FailedPredicateException(this, "!$again");
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Route_map_stanzaContext extends ParserRuleContext {
		public Route_map_named_stanzaContext named;
		public Route_map_named_stanzaContext route_map_named_stanza() {
			return getRuleContext(Route_map_named_stanzaContext.class,0);
		}
		public Route_map_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_route_map_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRoute_map_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRoute_map_stanza(this);
		}
	}

	public final Route_map_stanzaContext route_map_stanza() throws RecognitionException {
		Route_map_stanzaContext _localctx = new Route_map_stanzaContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_route_map_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3272); ((Route_map_stanzaContext)_localctx).named = route_map_named_stanza();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Route_map_tailContext extends ParserRuleContext {
		public Access_list_actionContext rmt;
		public Token num;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public Access_list_actionContext access_list_action() {
			return getRuleContext(Access_list_actionContext.class,0);
		}
		public Route_map_tail_tailContext route_map_tail_tail() {
			return getRuleContext(Route_map_tail_tailContext.class,0);
		}
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public Route_map_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_route_map_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRoute_map_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRoute_map_tail(this);
		}
	}

	public final Route_map_tailContext route_map_tail() throws RecognitionException {
		Route_map_tailContext _localctx = new Route_map_tailContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_route_map_tail);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3274); ((Route_map_tailContext)_localctx).rmt = access_list_action();
			setState(3275); ((Route_map_tailContext)_localctx).num = match(DEC);
			setState(3276); match(NEWLINE);
			setState(3277); route_map_tail_tail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Route_map_tail_tailContext extends ParserRuleContext {
		public Rm_stanzaContext rm_stanza;
		public List<Rm_stanzaContext> rms_list = new ArrayList<Rm_stanzaContext>();
		public Rm_stanzaContext rm_stanza(int i) {
			return getRuleContext(Rm_stanzaContext.class,i);
		}
		public List<Rm_stanzaContext> rm_stanza() {
			return getRuleContexts(Rm_stanzaContext.class);
		}
		public Route_map_tail_tailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_route_map_tail_tail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterRoute_map_tail_tail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitRoute_map_tail_tail(this);
		}
	}

	public final Route_map_tail_tailContext route_map_tail_tail() throws RecognitionException {
		Route_map_tail_tailContext _localctx = new Route_map_tail_tailContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_route_map_tail_tail);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3282);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,233,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3279); ((Route_map_tail_tailContext)_localctx).rm_stanza = rm_stanza();
					((Route_map_tail_tailContext)_localctx).rms_list.add(((Route_map_tail_tailContext)_localctx).rm_stanza);
					}
					} 
				}
				setState(3284);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,233,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_as_path_prepend_rm_stanzaContext extends ParserRuleContext {
		public Token DEC;
		public List<Token> as_list = new ArrayList<Token>();
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode DEC(int i) {
			return getToken(CiscoGrammar.DEC, i);
		}
		public TerminalNode PREPEND() { return getToken(CiscoGrammar.PREPEND, 0); }
		public List<TerminalNode> DEC() { return getTokens(CiscoGrammar.DEC); }
		public TerminalNode LAST_AS() { return getToken(CiscoGrammar.LAST_AS, 0); }
		public TerminalNode AS_PATH() { return getToken(CiscoGrammar.AS_PATH, 0); }
		public Set_as_path_prepend_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_as_path_prepend_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_as_path_prepend_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_as_path_prepend_rm_stanza(this);
		}
	}

	public final Set_as_path_prepend_rm_stanzaContext set_as_path_prepend_rm_stanza() throws RecognitionException {
		Set_as_path_prepend_rm_stanzaContext _localctx = new Set_as_path_prepend_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_set_as_path_prepend_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3285); match(SET);
			setState(3286); match(AS_PATH);
			setState(3287); match(PREPEND);
			setState(3289);
			_la = _input.LA(1);
			if (_la==LAST_AS) {
				{
				setState(3288); match(LAST_AS);
				}
			}

			setState(3292); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3291); ((Set_as_path_prepend_rm_stanzaContext)_localctx).DEC = match(DEC);
				((Set_as_path_prepend_rm_stanzaContext)_localctx).as_list.add(((Set_as_path_prepend_rm_stanzaContext)_localctx).DEC);
				}
				}
				setState(3294); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DEC );
			setState(3296); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_comm_list_delete_rm_stanzaContext extends ParserRuleContext {
		public Token name;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode COMM_LIST() { return getToken(CiscoGrammar.COMM_LIST, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode DELETE() { return getToken(CiscoGrammar.DELETE, 0); }
		public Set_comm_list_delete_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_comm_list_delete_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_comm_list_delete_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_comm_list_delete_rm_stanza(this);
		}
	}

	public final Set_comm_list_delete_rm_stanzaContext set_comm_list_delete_rm_stanza() throws RecognitionException {
		Set_comm_list_delete_rm_stanzaContext _localctx = new Set_comm_list_delete_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_set_comm_list_delete_rm_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3298); match(SET);
			setState(3299); match(COMM_LIST);
			setState(3302);
			switch (_input.LA(1)) {
			case DEC:
				{
				setState(3300); ((Set_comm_list_delete_rm_stanzaContext)_localctx).name = match(DEC);
				}
				break;
			case VARIABLE:
				{
				setState(3301); ((Set_comm_list_delete_rm_stanzaContext)_localctx).name = match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3304); match(DELETE);
			setState(3305); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_community_additive_rm_stanzaContext extends ParserRuleContext {
		public CommunityContext community;
		public List<CommunityContext> comm_list = new ArrayList<CommunityContext>();
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode COMMUNITY() { return getToken(CiscoGrammar.COMMUNITY, 0); }
		public List<CommunityContext> community() {
			return getRuleContexts(CommunityContext.class);
		}
		public CommunityContext community(int i) {
			return getRuleContext(CommunityContext.class,i);
		}
		public TerminalNode ADDITIVE() { return getToken(CiscoGrammar.ADDITIVE, 0); }
		public Set_community_additive_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_community_additive_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_community_additive_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_community_additive_rm_stanza(this);
		}
	}

	public final Set_community_additive_rm_stanzaContext set_community_additive_rm_stanza() throws RecognitionException {
		Set_community_additive_rm_stanzaContext _localctx = new Set_community_additive_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_set_community_additive_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3307); match(SET);
			setState(3308); match(COMMUNITY);
			setState(3310); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3309); ((Set_community_additive_rm_stanzaContext)_localctx).community = community();
				((Set_community_additive_rm_stanzaContext)_localctx).comm_list.add(((Set_community_additive_rm_stanzaContext)_localctx).community);
				}
				}
				setState(3312); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTERNET || _la==LOCAL_AS || _la==NO_ADVERTISE || _la==NO_EXPORT || _la==COMMUNITY_NUMBER || _la==DEC );
			setState(3314); match(ADDITIVE);
			setState(3315); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_community_none_rm_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode NONE() { return getToken(CiscoGrammar.NONE, 0); }
		public TerminalNode COMMUNITY() { return getToken(CiscoGrammar.COMMUNITY, 0); }
		public Set_community_none_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_community_none_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_community_none_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_community_none_rm_stanza(this);
		}
	}

	public final Set_community_none_rm_stanzaContext set_community_none_rm_stanza() throws RecognitionException {
		Set_community_none_rm_stanzaContext _localctx = new Set_community_none_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_set_community_none_rm_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3317); match(SET);
			setState(3318); match(COMMUNITY);
			setState(3319); match(NONE);
			setState(3320); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_community_rm_stanzaContext extends ParserRuleContext {
		public CommunityContext community;
		public List<CommunityContext> comm_list = new ArrayList<CommunityContext>();
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode COMMUNITY() { return getToken(CiscoGrammar.COMMUNITY, 0); }
		public List<CommunityContext> community() {
			return getRuleContexts(CommunityContext.class);
		}
		public CommunityContext community(int i) {
			return getRuleContext(CommunityContext.class,i);
		}
		public Set_community_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_community_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_community_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_community_rm_stanza(this);
		}
	}

	public final Set_community_rm_stanzaContext set_community_rm_stanza() throws RecognitionException {
		Set_community_rm_stanzaContext _localctx = new Set_community_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_set_community_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3322); match(SET);
			setState(3323); match(COMMUNITY);
			setState(3325); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3324); ((Set_community_rm_stanzaContext)_localctx).community = community();
				((Set_community_rm_stanzaContext)_localctx).comm_list.add(((Set_community_rm_stanzaContext)_localctx).community);
				}
				}
				setState(3327); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTERNET || _la==LOCAL_AS || _la==NO_ADVERTISE || _la==NO_EXPORT || _la==COMMUNITY_NUMBER || _la==DEC );
			setState(3329); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_extcomm_list_rm_stanzaContext extends ParserRuleContext {
		public CommunityContext community;
		public List<CommunityContext> comm_list = new ArrayList<CommunityContext>();
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public List<CommunityContext> community() {
			return getRuleContexts(CommunityContext.class);
		}
		public CommunityContext community(int i) {
			return getRuleContext(CommunityContext.class,i);
		}
		public TerminalNode DELETE() { return getToken(CiscoGrammar.DELETE, 0); }
		public TerminalNode EXTCOMM_LIST() { return getToken(CiscoGrammar.EXTCOMM_LIST, 0); }
		public Set_extcomm_list_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_extcomm_list_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_extcomm_list_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_extcomm_list_rm_stanza(this);
		}
	}

	public final Set_extcomm_list_rm_stanzaContext set_extcomm_list_rm_stanza() throws RecognitionException {
		Set_extcomm_list_rm_stanzaContext _localctx = new Set_extcomm_list_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_set_extcomm_list_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3331); match(SET);
			setState(3332); match(EXTCOMM_LIST);
			setState(3334); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3333); ((Set_extcomm_list_rm_stanzaContext)_localctx).community = community();
				((Set_extcomm_list_rm_stanzaContext)_localctx).comm_list.add(((Set_extcomm_list_rm_stanzaContext)_localctx).community);
				}
				}
				setState(3336); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTERNET || _la==LOCAL_AS || _la==NO_ADVERTISE || _la==NO_EXPORT || _la==COMMUNITY_NUMBER || _la==DEC );
			setState(3338); match(DELETE);
			setState(3339); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_interface_rm_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode INTERFACE() { return getToken(CiscoGrammar.INTERFACE, 0); }
		public Set_interface_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_interface_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_interface_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_interface_rm_stanza(this);
		}
	}

	public final Set_interface_rm_stanzaContext set_interface_rm_stanza() throws RecognitionException {
		Set_interface_rm_stanzaContext _localctx = new Set_interface_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_set_interface_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3341); match(SET);
			setState(3342); match(INTERFACE);
			setState(3346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3343);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3348);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3349); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_ip_df_rm_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode DF() { return getToken(CiscoGrammar.DF, 0); }
		public Set_ip_df_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_ip_df_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_ip_df_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_ip_df_rm_stanza(this);
		}
	}

	public final Set_ip_df_rm_stanzaContext set_ip_df_rm_stanza() throws RecognitionException {
		Set_ip_df_rm_stanzaContext _localctx = new Set_ip_df_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_set_ip_df_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3351); match(SET);
			setState(3352); match(IP);
			setState(3353); match(DF);
			setState(3357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3354);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3359);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3360); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_ipv6_rm_stanzaContext extends ParserRuleContext {
		public List<TerminalNode> NEWLINE() { return getTokens(CiscoGrammar.NEWLINE); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode NEWLINE(int i) {
			return getToken(CiscoGrammar.NEWLINE, i);
		}
		public TerminalNode IPV6() { return getToken(CiscoGrammar.IPV6, 0); }
		public Set_ipv6_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_ipv6_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_ipv6_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_ipv6_rm_stanza(this);
		}
	}

	public final Set_ipv6_rm_stanzaContext set_ipv6_rm_stanza() throws RecognitionException {
		Set_ipv6_rm_stanzaContext _localctx = new Set_ipv6_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_set_ipv6_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3362); match(SET);
			setState(3363); match(IPV6);
			setState(3367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACL_NUM_APPLETALK) | (1L << ACL_NUM_EXTENDED) | (1L << ACL_NUM_EXTENDED_IPX) | (1L << ACL_NUM_IPX) | (1L << ACL_NUM_IPX_SAP) | (1L << ACL_NUM_OTHER) | (1L << ACL_NUM_PROTOCOL_TYPE_CODE) | (1L << ACL_NUM_STANDARD) | (1L << COMMUNITY_LIST_NUM_EXPANDED) | (1L << COMMUNITY_LIST_NUM_STANDARD) | (1L << AAA) | (1L << AAA_SERVER) | (1L << ABSOLUTE_TIMEOUT) | (1L << ACCEPT_DIALIN) | (1L << ACCESS) | (1L << ACCESS_CLASS) | (1L << ACCESS_GROUP) | (1L << ACCESS_LIST) | (1L << ACCESS_LOG) | (1L << ACCOUNTING) | (1L << ACCOUNTING_LIST) | (1L << ACCOUNTING_PORT) | (1L << ACCOUNTING_SERVER_GROUP) | (1L << ACTION) | (1L << ACTIVATE) | (1L << ACTIVATION_CHARACTER) | (1L << ACTIVE) | (1L << ADD) | (1L << ADDITIVE) | (1L << ADDRESS) | (1L << ADDRESS_FAMILY) | (1L << ADDRESS_POOL) | (1L << ADMINISTRATIVE_WEIGHT) | (1L << ADMISSION) | (1L << AES128_SHA1) | (1L << AES256_SHA1) | (1L << AESA) | (1L << AGGREGATE) | (1L << AGGREGATE_ADDRESS) | (1L << AHP) | (1L << ALERT_GROUP) | (1L << ALIAS) | (1L << ALLOWED) | (1L << ALLOWAS_IN) | (1L << ALWAYS) | (1L << ALWAYS_COMPARE_MED) | (1L << ANY) | (1L << ANYCONNECT) | (1L << ANYCONNECT_ESSENTIALS) | (1L << AP) | (1L << AQM_REGISTER_FNF) | (1L << ARCHIVE) | (1L << AREA) | (1L << ARP) | (1L << AS_PATH) | (1L << ASA) | (1L << ASDM) | (1L << ASSOCIATE) | (1L << ASSOCIATION) | (1L << ASYNC) | (1L << ASYNC_BOOTP) | (1L << ATM) | (1L << AUDIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (AUTH_PROXY - 64)) | (1L << (AUTHENTICATION - 64)) | (1L << (AUTHENTICATION_PORT - 64)) | (1L << (AUTHENTICATION_SERVER_GROUP - 64)) | (1L << (AUTHORIZATION - 64)) | (1L << (AUTHORIZATION_REQUIRED - 64)) | (1L << (AUTHORIZATION_SERVER_GROUP - 64)) | (1L << (AUTO - 64)) | (1L << (AUTO_COST - 64)) | (1L << (AUTOSELECT - 64)) | (1L << (AUTO_SUMMARY - 64)) | (1L << (AUTO_SYNC - 64)) | (1L << (BACKGROUND_ROUTES_ENABLE - 64)) | (1L << (BACKUPCRF - 64)) | (1L << (BANDWIDTH - 64)) | (1L << (BANNER - 64)) | (1L << (BESTPATH - 64)) | (1L << (BFD - 64)) | (1L << (BGP - 64)) | (1L << (BGP_COMMUNITY - 64)) | (1L << (BIND - 64)) | (1L << (BOOT - 64)) | (1L << (BOOT_END_MARKER - 64)) | (1L << (BOOT_START_MARKER - 64)) | (1L << (BOOTP - 64)) | (1L << (BOOTPC - 64)) | (1L << (BOOTPS - 64)) | (1L << (BOTH - 64)) | (1L << (BRIDGE - 64)) | (1L << (BROADCAST - 64)) | (1L << (CA - 64)) | (1L << (CABLE_RANGE - 64)) | (1L << (CABLELENGTH - 64)) | (1L << (CACHE - 64)) | (1L << (CACHE_TIMEOUT - 64)) | (1L << (CALL - 64)) | (1L << (CALL_HOME - 64)) | (1L << (CALLER_ID - 64)) | (1L << (CARD - 64)) | (1L << (CAS_CUSTOM - 64)) | (1L << (CCM - 64)) | (1L << (CCM_GROUP - 64)) | (1L << (CCM_MANAGER - 64)) | (1L << (CDP - 64)) | (1L << (CEF - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CFS - 64)) | (1L << (CGMP - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHANNEL_GROUP - 64)) | (1L << (CHANNEL_PROTOCOL - 64)) | (1L << (CHANNELIZED - 64)) | (1L << (CHAT_SCRIPT - 64)) | (1L << (CIPC - 64)) | (1L << (CLASS - 64)) | (1L << (CLASSLESS - 64)) | (1L << (CLASS_MAP - 64)) | (1L << (CLI - 64)) | (1L << (CLNS - 64)) | (1L << (CLOCK - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTER_ID - 64)) | (1L << (CMD - 64)) | (1L << (CNS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CODEC - 128)) | (1L << (COLLECT - 128)) | (1L << (COMM_LIST - 128)) | (1L << (COMMANDER_ADDRESS - 128)) | (1L << (COMMUNITY - 128)) | (1L << (COMMUNITY_LIST - 128)) | (1L << (CONFIG_REGISTER - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (CONFORM_ACTION - 128)) | (1L << (CONNECTED - 128)) | (1L << (CONSOLE - 128)) | (1L << (CONTACT_EMAIL_ADDR - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONTROL_PLANE - 128)) | (1L << (CONTROLLER - 128)) | (1L << (COST - 128)) | (1L << (COUNTER - 128)) | (1L << (CPTONE - 128)) | (1L << (CRYPTO - 128)) | (1L << (CRL - 128)) | (1L << (CTL_FILE - 128)) | (1L << (CTS - 128)) | (1L << (DAMPENING - 128)) | (1L << (DATABITS - 128)) | (1L << (DBL - 128)) | (1L << (DEAD_INTERVAL - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULT_ACTION - 128)) | (1L << (DEFAULT_DOMAIN - 128)) | (1L << (DEFAULT_GATEWAY - 128)) | (1L << (DEFAULT_GROUP_POLICY - 128)) | (1L << (DEFAULT_INFORMATION - 128)) | (1L << (DEFAULT_INFORMATION_ORIGINATE - 128)) | (1L << (DEFAULT_METRIC - 128)) | (1L << (DEFAULT_NETWORK - 128)) | (1L << (DEFAULT_ORIGINATE - 128)) | (1L << (DEFAULT_ROUTER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY - 128)) | (1L << (DELETE - 128)) | (1L << (DENY - 128)) | (1L << (DES - 128)) | (1L << (DES_SHA1 - 128)) | (1L << (DESCRIPTION - 128)) | (1L << (DESIRABLE - 128)) | (1L << (DESTINATION - 128)) | (1L << (DETERMINISTIC_MED - 128)) | (1L << (DEVICE - 128)) | (1L << (DEVICE_SENSOR - 128)) | (1L << (DF - 128)) | (1L << (DHCP - 128)) | (1L << (DHCPD - 128)) | (1L << (DIAGNOSTIC - 128)) | (1L << (DIAL_PEER - 128)) | (1L << (DIALER_LIST - 128)) | (1L << (DIRECT - 128)) | (1L << (DIRECTED_BROADCAST - 128)) | (1L << (DISABLE - 128)) | (1L << (DISTANCE - 128)) | (1L << (DISTRIBUTE_LIST - 128)) | (1L << (DNS - 128)) | (1L << (DNS_GUARD - 128)) | (1L << (DNS_SERVER - 128)) | (1L << (DOMAIN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (DOMAIN_LIST - 192)) | (1L << (DOMAIN_LOOKUP - 192)) | (1L << (DOMAIN_NAME - 192)) | (1L << (DONT_CAPABILITY_NEGOTIATE - 192)) | (1L << (DOT11 - 192)) | (1L << (DOT1Q - 192)) | (1L << (DROP - 192)) | (1L << (DS0_GROUP - 192)) | (1L << (DSP - 192)) | (1L << (DSPFARM - 192)) | (1L << (DSS - 192)) | (1L << (DSU - 192)) | (1L << (DUPLEX - 192)) | (1L << (DVMRP - 192)) | (1L << (DYNAMIC - 192)) | (1L << (DYNAMIC_ACCESS_POLICY_RECORD - 192)) | (1L << (DYNAMIC_MAP - 192)) | (1L << (EBGP_MULTIHOP - 192)) | (1L << (ECHO - 192)) | (1L << (ECHO_REPLY - 192)) | (1L << (ECHO_REQUEST - 192)) | (1L << (EGP - 192)) | (1L << (EIGRP - 192)) | (1L << (EMPTY - 192)) | (1L << (ENABLE - 192)) | (1L << (ENCAPSULATION - 192)) | (1L << (ENCR - 192)) | (1L << (ENCRYPTION - 192)) | (1L << (END - 192)) | (1L << (ENGINEID - 192)) | (1L << (ENROLLMENT - 192)) | (1L << (ENVIRONMENT - 192)) | (1L << (EOF_LITERAL - 192)) | (1L << (EQ - 192)) | (1L << (ERRDISABLE - 192)) | (1L << (ESCAPE_CHARACTER - 192)) | (1L << (ESP - 192)) | (1L << (ESTABLISHED - 192)) | (1L << (EVALUATE - 192)) | (1L << (EVENT - 192)) | (1L << (EVENT_HANDLER - 192)) | (1L << (EXCEED_ACTION - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXEC - 192)) | (1L << (EXEC_TIMEOUT - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXIT_ADDRESS_FAMILY - 192)) | (1L << (EXPORT - 192)) | (1L << (EXPORT_PROTOCOL - 192)) | (1L << (EXPORTER - 192)) | (1L << (EXPANDED - 192)) | (1L << (EXTCOMM_LIST - 192)) | (1L << (EXTCOMMUNITY_LIST - 192)) | (1L << (EXTENDED - 192)) | (1L << (FABRIC - 192)) | (1L << (FACILITY_ALARM - 192)) | (1L << (FAILOVER - 192)) | (1L << (FAIR_QUEUE - 192)) | (1L << (FALL_OVER - 192)) | (1L << (FALLBACK_DN - 192)) | (1L << (FEATURE - 192)) | (1L << (FILE - 192)) | (1L << (FILE_BROWSING - 192)) | (1L << (FILE_ENTRY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (FILTER_LIST - 256)) | (1L << (FIREWALL - 256)) | (1L << (FINGER - 256)) | (1L << (FIRMWARE - 256)) | (1L << (FLOW - 256)) | (1L << (FLOW_CACHE - 256)) | (1L << (FLOW_EXPORT - 256)) | (1L << (FLOW_TOP_TALKERS - 256)) | (1L << (FLOWCONTROL - 256)) | (1L << (FLUSH_AT_ACTIVATION - 256)) | (1L << (FORWARD_PROTOCOL - 256)) | (1L << (FQDN - 256)) | (1L << (FRAGMENTS - 256)) | (1L << (FRAME_RELAY - 256)) | (1L << (FRAMING - 256)) | (1L << (FREQUENCY - 256)) | (1L << (FTP - 256)) | (1L << (FTP_DATA - 256)) | (1L << (FTP_SERVER - 256)) | (1L << (FULL_DUPLEX - 256)) | (1L << (GATEKEEPER - 256)) | (1L << (GATEWAY - 256)) | (1L << (GE - 256)) | (1L << (GRACEFUL_RESTART - 256)) | (1L << (GRATUITOUS_ARPS - 256)) | (1L << (GRE - 256)) | (1L << (GROUP - 256)) | (1L << (GROUP_ALIAS - 256)) | (1L << (GROUP_OBJECT - 256)) | (1L << (GROUP_POLICY - 256)) | (1L << (GROUP_RANGE - 256)) | (1L << (GROUP_URL - 256)) | (1L << (GT - 256)) | (1L << (HALF_DUPLEX - 256)) | (1L << (HARDWARE - 256)) | (1L << (HASH - 256)) | (1L << (HELLO_MULTIPLIER - 256)) | (1L << (HELPER_ADDRESS - 256)) | (1L << (HIDDEN - 256)) | (1L << (HIDDEN_SHARES - 256)) | (1L << (HIDEKEYS - 256)) | (1L << (HIGH_AVAILABILITY - 256)) | (1L << (HISTORY - 256)) | (1L << (HOLD_QUEUE - 256)) | (1L << (HOST - 256)) | (1L << (HOST_ROUTING - 256)) | (1L << (HOST_UNKNOWN - 256)) | (1L << (HOST_UNREACHABLE - 256)) | (1L << (HOSTNAME - 256)) | (1L << (HSRP - 256)) | (1L << (HTTP - 256)) | (1L << (HW_MODULE - 256)) | (1L << (ICMP - 256)) | (1L << (ICMP_ECHO - 256)) | (1L << (ICMP_OBJECT - 256)) | (1L << (IDENT - 256)) | (1L << (IDENTITY - 256)) | (1L << (IDLE_TIMEOUT - 256)) | (1L << (IGMP - 256)) | (1L << (IGP - 256)) | (1L << (IKEV1 - 256)) | (1L << (ILMI_KEEPALIVE - 256)) | (1L << (IN - 256)) | (1L << (INACTIVITY_TIMER - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INBOUND - 320)) | (1L << (INCOMPLETE - 320)) | (1L << (INHERIT - 320)) | (1L << (INSPECT - 320)) | (1L << (INSTANCE - 320)) | (1L << (INTERFACE - 320)) | (1L << (INTERNAL - 320)) | (1L << (INTERNET - 320)) | (1L << (INVALID_SPI_RECOVERY - 320)) | (1L << (IP - 320)) | (1L << (IP_ADDRESS_LITERAL - 320)) | (1L << (IPC - 320)) | (1L << (IPINIP - 320)) | (1L << (IPSEC - 320)) | (1L << (IPSEC_UDP - 320)) | (1L << (IPV4 - 320)) | (1L << (IPV6 - 320)) | (1L << (IPV6_ADDRESS_POOL - 320)) | (1L << (IPX - 320)) | (1L << (IRDP - 320)) | (1L << (ISAKMP - 320)) | (1L << (ISDN - 320)) | (1L << (ISL - 320)) | (1L << (KEEPALIVE - 320)) | (1L << (KEEPALIVE_ENABLE - 320)) | (1L << (KEEPOUT - 320)) | (1L << (KEY - 320)) | (1L << (KEYPAIR - 320)) | (1L << (KEYRING - 320)) | (1L << (LACP - 320)) | (1L << (LANE - 320)) | (1L << (LAPB - 320)) | (1L << (LAST_AS - 320)) | (1L << (LE - 320)) | (1L << (L2TP - 320)) | (1L << (L2TP_CLASS - 320)) | (1L << (LDAP_BASE_DN - 320)) | (1L << (LDAP_LOGIN - 320)) | (1L << (LDAP_LOGIN_DN - 320)) | (1L << (LDAP_NAMING_ATTRIBUTE - 320)) | (1L << (LDAP_SCOPE - 320)) | (1L << (LENGTH - 320)) | (1L << (LICENSE - 320)) | (1L << (LIFETIME - 320)) | (1L << (LIMIT_RESOURCE - 320)) | (1L << (LINE - 320)) | (1L << (LINECODE - 320)) | (1L << (LISTEN - 320)) | (1L << (LLDP - 320)) | (1L << (LOAD_INTERVAL - 320)) | (1L << (LOAD_SHARING - 320)) | (1L << (LOCAL - 320)) | (1L << (LOCAL_AS - 320)) | (1L << (LOCAL_IP - 320)) | (1L << (LOCAL_PORT - 320)) | (1L << (LOCAL_PREFERENCE - 320)) | (1L << (LOCATION - 320)) | (1L << (LOG - 320)) | (1L << (LOG_ADJACENCY_CHANGES - 320)) | (1L << (LOG_INPUT - 320)) | (1L << (LOG_NEIGHBOR_CHANGES - 320)) | (1L << (LOGGING - 320)) | (1L << (LOGIN - 320)) | (1L << (LPD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (LRE - 384)) | (1L << (LT - 384)) | (1L << (MAC - 384)) | (1L << (MAC_ADDRESS - 384)) | (1L << (MAC_ADDRESS_TABLE - 384)) | (1L << (MACRO - 384)) | (1L << (MAIL_SERVER - 384)) | (1L << (MAIN_CPU - 384)) | (1L << (MANAGEMENT - 384)) | (1L << (MANAGEMENT_ONLY - 384)) | (1L << (MAP - 384)) | (1L << (MAP_CLASS - 384)) | (1L << (MAP_GROUP - 384)) | (1L << (MAP_LIST - 384)) | (1L << (MASK - 384)) | (1L << (MATCH - 384)) | (1L << (MAXIMUM - 384)) | (1L << (MAXIMUM_PATHS - 384)) | (1L << (MAXIMUM_PEERS - 384)) | (1L << (MAXIMUM_PREFIX - 384)) | (1L << (MAXIMUM_ROUTES - 384)) | (1L << (MDIX - 384)) | (1L << (MEDIA_TERMINATION - 384)) | (1L << (MEDIA_TYPE - 384)) | (1L << (MEMBER - 384)) | (1L << (MEMORY_SIZE - 384)) | (1L << (MESSAGE_DIGEST_KEY - 384)) | (1L << (MESSAGE_LENGTH - 384)) | (1L << (METRIC - 384)) | (1L << (METRIC_TYPE - 384)) | (1L << (MFIB - 384)) | (1L << (MFIB_MODE - 384)) | (1L << (MGCP - 384)) | (1L << (MICROCODE - 384)) | (1L << (MINIMAL - 384)) | (1L << (MLAG - 384)) | (1L << (MLD - 384)) | (1L << (MLD_QUERY - 384)) | (1L << (MLD_REDUCTION - 384)) | (1L << (MLD_REPORT - 384)) | (1L << (MLS - 384)) | (1L << (MOBILITY - 384)) | (1L << (MODE - 384)) | (1L << (MODEM - 384)) | (1L << (MODULE - 384)) | (1L << (MONITOR - 384)) | (1L << (MOP - 384)) | (1L << (MOTD - 384)) | (1L << (MPLS - 384)) | (1L << (MPLS_LABEL - 384)) | (1L << (MROUTE - 384)) | (1L << (MROUTE_CACHE - 384)) | (1L << (MSDP - 384)) | (1L << (MTA - 384)) | (1L << (MTU - 384)) | (1L << (MULTICAST - 384)) | (1L << (MULTICAST_ROUTING - 384)) | (1L << (MULTILINK - 384)) | (1L << (MULTIPOINT - 384)) | (1L << (MVR - 384)) | (1L << (NAME_LOOKUP - 384)) | (1L << (NAME_SERVER - 384)) | (1L << (NAMEIF - 384)) | (1L << (NAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (NAMES - 448)) | (1L << (NAT - 448)) | (1L << (NAT_CONTROL - 448)) | (1L << (NATIVE - 448)) | (1L << (ND - 448)) | (1L << (ND_NA - 448)) | (1L << (ND_NS - 448)) | (1L << (NEGOTIATE - 448)) | (1L << (NEGOTIATION - 448)) | (1L << (NEIGHBOR - 448)) | (1L << (NEQ - 448)) | (1L << (NET_UNREACHABLE - 448)) | (1L << (NETBIOS_DGM - 448)) | (1L << (NETBIOS_NS - 448)) | (1L << (NETBIOS_SS - 448)) | (1L << (NETCONF - 448)) | (1L << (NETWORK - 448)) | (1L << (NETWORK_CLOCK_PARTICIPATE - 448)) | (1L << (NETWORK_CLOCK_SELECT - 448)) | (1L << (NETWORK_OBJECT - 448)) | (1L << (NETWORK_UNKNOWN - 448)) | (1L << (NEXT_HOP - 448)) | (1L << (NEXT_HOP_SELF - 448)) | (1L << (NNTP - 448)) | (1L << (NO - 448)) | (1L << (NO_ADVERTISE - 448)) | (1L << (NO_EXPORT - 448)) | (1L << (NO_SUMMARY - 448)) | (1L << (NODE - 448)) | (1L << (NON500_ISAKMP - 448)) | (1L << (NONE - 448)) | (1L << (NONEGOTIATE - 448)) | (1L << (NOTIFY - 448)) | (1L << (NSF - 448)) | (1L << (NSSA - 448)) | (1L << (NTP - 448)) | (1L << (OBJECT - 448)) | (1L << (OBJECT_GROUP - 448)) | (1L << (OPENFLOW - 448)) | (1L << (ORIGIN - 448)) | (1L << (ORIGINATE - 448)) | (1L << (OSPF - 448)) | (1L << (OTHER_ACCESS - 448)) | (1L << (OUI - 448)) | (1L << (OUT - 448)) | (1L << (OWNER - 448)) | (1L << (PACKET_TOO_BIG - 448)) | (1L << (PAGER - 448)) | (1L << (PARAMETER_PROBLEM - 448)) | (1L << (PARAMETERS - 448)) | (1L << (PARENT - 448)) | (1L << (PARSER - 448)) | (1L << (PARTICIPATE - 448)) | (1L << (PASSIVE_INTERFACE - 448)) | (1L << (PASSWORD - 448)) | (1L << (PASSWORD_STORAGE - 448)) | (1L << (PATH_JITTER - 448)) | (1L << (PEER - 448)) | (1L << (PEER_GROUP - 448)) | (1L << (PEER_SESSION - 448)) | (1L << (PERMANENT - 448)) | (1L << (PEER_CONFIG_CHECK_BYPASS - 448)) | (1L << (PEER_GATEWAY - 448)) | (1L << (PEER_KEEPALIVE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERMIT - 512)) | (1L << (PHONE_PROXY - 512)) | (1L << (PHYSICAL_LAYER - 512)) | (1L << (PICKUP - 512)) | (1L << (PIM - 512)) | (1L << (PIM_AUTO_RP - 512)) | (1L << (PKI - 512)) | (1L << (PLATFORM - 512)) | (1L << (POLICE - 512)) | (1L << (POLICY - 512)) | (1L << (POLICY_LIST - 512)) | (1L << (POLICY_MAP - 512)) | (1L << (POP3 - 512)) | (1L << (PORT - 512)) | (1L << (PORT_CHANNEL - 512)) | (1L << (PORT_OBJECT - 512)) | (1L << (PORT_SECURITY - 512)) | (1L << (PORT_UNREACHABLE - 512)) | (1L << (POWER - 512)) | (1L << (POWEROFF - 512)) | (1L << (PPP - 512)) | (1L << (PREEMPT - 512)) | (1L << (PREPEND - 512)) | (1L << (PRE_SHARED_KEY - 512)) | (1L << (PRI_GROUP - 512)) | (1L << (PRIORITY - 512)) | (1L << (PRIORITY_QUEUE - 512)) | (1L << (PRIVATE_VLAN - 512)) | (1L << (PREFIX - 512)) | (1L << (PREFIX_LIST - 512)) | (1L << (PRIORITY_ - 512)) | (1L << (PRIORITY_QUEUE_ - 512)) | (1L << (PRIVILEGE - 512)) | (1L << (PROCESS - 512)) | (1L << (PROFILE - 512)) | (1L << (PROMPT - 512)) | (1L << (PROTOCOL - 512)) | (1L << (PROTOCOL_OBJECT - 512)) | (1L << (PROXY_ARP - 512)) | (1L << (PSEUDOWIRE_CLASS - 512)) | (1L << (QOS - 512)) | (1L << (QUEUE_BUFFERS - 512)) | (1L << (QUEUE_LIMIT - 512)) | (1L << (QUEUE_SET - 512)) | (1L << (QUIT - 512)) | (1L << (RADIUS - 512)) | (1L << (RADIUS_COMMON_PW - 512)) | (1L << (RADIUS_SERVER - 512)) | (1L << (RANDOM_DETECT - 512)) | (1L << (RANGE - 512)) | (1L << (RATE_LIMIT - 512)) | (1L << (RATE_MODE - 512)) | (1L << (RC4_SHA1 - 512)) | (1L << (RCMD - 512)) | (1L << (RCV_QUEUE - 512)) | (1L << (RD - 512)) | (1L << (RECORD - 512)) | (1L << (RECORD_ENTRY - 512)) | (1L << (REDIRECT - 512)) | (1L << (REDIRECT_FQDN - 512)) | (1L << (REDIRECTS - 512)) | (1L << (REDISTRIBUTE - 512)) | (1L << (REDUNDANCY - 512)) | (1L << (REFLECT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (REMARK - 576)) | (1L << (REMOTE_AS - 576)) | (1L << (REMOTE_IP - 576)) | (1L << (REMOTE_PORT - 576)) | (1L << (REMOVE_PRIVATE_AS - 576)) | (1L << (REMOTE_SPAN - 576)) | (1L << (REMOVED - 576)) | (1L << (RESOURCE - 576)) | (1L << (RESOURCE_POOL - 576)) | (1L << (RETRANSMIT - 576)) | (1L << (REVERSE_ROUTE - 576)) | (1L << (REVISION - 576)) | (1L << (REVOCATION_CHECK - 576)) | (1L << (RING - 576)) | (1L << (RIP - 576)) | (1L << (RMON - 576)) | (1L << (ROLE - 576)) | (1L << (ROTARY - 576)) | (1L << (ROUTE - 576)) | (1L << (ROUTE_CACHE - 576)) | (1L << (ROUTE_MAP - 576)) | (1L << (ROUTE_REFLECTOR_CLIENT - 576)) | (1L << (ROUTE_TARGET - 576)) | (1L << (ROUTER - 576)) | (1L << (ROUTER_ADVERTISEMENT - 576)) | (1L << (ROUTER_ID - 576)) | (1L << (ROUTER_SOLICITATION - 576)) | (1L << (ROUTING - 576)) | (1L << (RSAKEYPAIR - 576)) | (1L << (RTR - 576)) | (1L << (RST - 576)) | (1L << (RULE - 576)) | (1L << (SAME_SECURITY_TRAFFIC - 576)) | (1L << (SAP - 576)) | (1L << (SCCP - 576)) | (1L << (SCHEDULE - 576)) | (1L << (SCHEDULER - 576)) | (1L << (SCHEME - 576)) | (1L << (SCP - 576)) | (1L << (SCRIPTING - 576)) | (1L << (SCTP - 576)) | (1L << (SDM - 576)) | (1L << (SECONDARY - 576)) | (1L << (SECURITY - 576)) | (1L << (SECURITY_LEVEL - 576)) | (1L << (SEND_COMMUNITY - 576)) | (1L << (SEND_LABEL - 576)) | (1L << (SENDER - 576)) | (1L << (SEQ - 576)) | (1L << (SEQUENCE - 576)) | (1L << (SERIAL - 576)) | (1L << (SERIAL_NUMBER - 576)) | (1L << (SERVER - 576)) | (1L << (SERVER_PRIVATE - 576)) | (1L << (SERVER_TYPE - 576)) | (1L << (SERVICE - 576)) | (1L << (SERVICE_MODULE - 576)) | (1L << (SERVICE_POLICY - 576)) | (1L << (SERVICE_TYPE - 576)) | (1L << (SESSION_DISCONNECT_WARNING - 576)) | (1L << (SESSION_LIMIT - 576)) | (1L << (SESSION_TIMEOUT - 576)) | (1L << (SET - 576)) | (1L << (SETUP - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFLOW - 640)) | (1L << (SHA1 - 640)) | (1L << (SHAPE - 640)) | (1L << (SHELL - 640)) | (1L << (SHUTDOWN - 640)) | (1L << (SINGLE_ROUTER_MODE - 640)) | (1L << (SLA - 640)) | (1L << (SMTP - 640)) | (1L << (SMTP_SERVER - 640)) | (1L << (SNMP - 640)) | (1L << (SNMP_SERVER - 640)) | (1L << (SNMPTRAP - 640)) | (1L << (SORT_BY - 640)) | (1L << (SPE - 640)) | (1L << (SOFT_RECONFIGURATION - 640)) | (1L << (SONET - 640)) | (1L << (SOURCE - 640)) | (1L << (SOURCE_INTERFACE - 640)) | (1L << (SOURCE_IP_ADDRESS - 640)) | (1L << (SOURCE_ROUTE - 640)) | (1L << (SOURCE_QUENCH - 640)) | (1L << (SPANNING_TREE - 640)) | (1L << (SPD - 640)) | (1L << (SPEED - 640)) | (1L << (SPLIT_TUNNEL_NETWORK_LIST - 640)) | (1L << (SPLIT_TUNNEL_POLICY - 640)) | (1L << (SRR_QUEUE - 640)) | (1L << (SSH - 640)) | (1L << (SSL - 640)) | (1L << (STACK_MIB - 640)) | (1L << (STANDARD - 640)) | (1L << (STANDBY - 640)) | (1L << (STATIC - 640)) | (1L << (STATISTICS - 640)) | (1L << (STCAPP - 640)) | (1L << (STOPBITS - 640)) | (1L << (STORM_CONTROL - 640)) | (1L << (STP - 640)) | (1L << (SUBJECT_NAME - 640)) | (1L << (SUBNET - 640)) | (1L << (SUBNETS - 640)) | (1L << (SUBNET_ZERO - 640)) | (1L << (SUBSCRIBE_TO - 640)) | (1L << (SUBSCRIBE_TO_ALERT_GROUP - 640)) | (1L << (SUBSCRIBER - 640)) | (1L << (SUMMARY_ONLY - 640)) | (1L << (SUNRPC - 640)) | (1L << (SUPPLEMENTARY_SERVICES - 640)) | (1L << (SWITCH - 640)) | (1L << (SWITCHBACK - 640)) | (1L << (SWITCHING_MODE - 640)) | (1L << (SWITCHPORT - 640)) | (1L << (SYNC - 640)) | (1L << (SYNCHRONIZATION - 640)) | (1L << (SYSLOG - 640)) | (1L << (SYSOPT - 640)) | (1L << (SYSTEM - 640)) | (1L << (TABLE_MAP - 640)) | (1L << (TACACS - 640)) | (1L << (TACACS_PLUS - 640)) | (1L << (TACACS_SERVER - 640)) | (1L << (TAG - 640)) | (1L << (TAG_SWITCHING - 640)) | (1L << (TB_VLAN1 - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (TB_VLAN2 - 704)) | (1L << (TCAM - 704)) | (1L << (TCP - 704)) | (1L << (TELNET - 704)) | (1L << (TEMPLATE - 704)) | (1L << (TERMINAL_TYPE - 704)) | (1L << (TFTP - 704)) | (1L << (TFTP_SERVER - 704)) | (1L << (THREAT_DETECTION - 704)) | (1L << (THREE_DES - 704)) | (1L << (THREE_DES_SHA1 - 704)) | (1L << (TIME_EXCEEDED - 704)) | (1L << (TIMEOUT - 704)) | (1L << (TIMEOUTS - 704)) | (1L << (TIMER - 704)) | (1L << (TIMERS - 704)) | (1L << (TIMING - 704)) | (1L << (TLS_PROXY - 704)) | (1L << (TOP - 704)) | (1L << (TRACK - 704)) | (1L << (TRACKED - 704)) | (1L << (TRANSLATE - 704)) | (1L << (TRANSPORT - 704)) | (1L << (TRIGGER - 704)) | (1L << (TRUNK - 704)) | (1L << (TRUST - 704)) | (1L << (TRUSTPOINT - 704)) | (1L << (TRUSTPOOL - 704)) | (1L << (TTL - 704)) | (1L << (TTL_EXCEEDED - 704)) | (1L << (TUNNEL - 704)) | (1L << (TUNNEL_GROUP - 704)) | (1L << (TUNNEL_GROUP_LIST - 704)) | (1L << (TYPE - 704)) | (1L << (UDLD - 704)) | (1L << (UDP - 704)) | (1L << (UNABLE - 704)) | (1L << (UNICAST_ROUTING - 704)) | (1L << (UNNUMBERED - 704)) | (1L << (UNREACHABLE - 704)) | (1L << (UNREACHABLES - 704)) | (1L << (UNICAST - 704)) | (1L << (UPDATE_SOURCE - 704)) | (1L << (UPGRADE - 704)) | (1L << (USE_VRF - 704)) | (1L << (USER_IDENTITY - 704)) | (1L << (USERNAME - 704)) | (1L << (VALIDATION_USAGE - 704)) | (1L << (VDC - 704)) | (1L << (VERIFY - 704)) | (1L << (VERSION - 704)) | (1L << (VIOLATE_ACTION - 704)) | (1L << (VIRTUAL_REASSEMBLY - 704)) | (1L << (VIRTUAL_TEMPLATE - 704)) | (1L << (VLAN - 704)) | (1L << (VMPS - 704)) | (1L << (VOICE - 704)) | (1L << (VOICE_CARD - 704)) | (1L << (VOICE_PORT - 704)) | (1L << (VPC - 704)) | (1L << (VPDN - 704)) | (1L << (VPDN_GROUP - 704)) | (1L << (VPN - 704)) | (1L << (VPNV4 - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (VPNV6 - 768)) | (1L << (VPN_FILTER - 768)) | (1L << (VPN_IDLE_TIMEOUT - 768)) | (1L << (VPN_TUNNEL_PROTOCOL - 768)) | (1L << (VRF - 768)) | (1L << (VRRP - 768)) | (1L << (VTP - 768)) | (1L << (WEBVPN - 768)) | (1L << (WEIGHT - 768)) | (1L << (WINS_SERVER - 768)) | (1L << (WITHOUT_CSD - 768)) | (1L << (WLAN - 768)) | (1L << (WRR_QUEUE - 768)) | (1L << (WSMA - 768)) | (1L << (WWW - 768)) | (1L << (X25 - 768)) | (1L << (X29 - 768)) | (1L << (XCONNECT - 768)) | (1L << (XLATE - 768)) | (1L << (XML - 768)) | (1L << (XX_HIDE - 768)) | (1L << (COMMUNITY_NUMBER - 768)) | (1L << (VARIABLE - 768)) | (1L << (ACL_NUM - 768)) | (1L << (AMPERSAND - 768)) | (1L << (ANGLE_BRACKET_LEFT - 768)) | (1L << (ANGLE_BRACKET_RIGHT - 768)) | (1L << (ASTERISK - 768)) | (1L << (AT - 768)) | (1L << (BACKSLASH - 768)) | (1L << (BRACE_LEFT - 768)) | (1L << (BRACE_RIGHT - 768)) | (1L << (BRACKET_LEFT - 768)) | (1L << (BRACKET_RIGHT - 768)) | (1L << (CARAT - 768)) | (1L << (COLON - 768)) | (1L << (COMMA - 768)) | (1L << (COMMUNITY_LIST_NUM - 768)) | (1L << (COMMENT_LINE - 768)) | (1L << (DASH - 768)) | (1L << (DOLLAR - 768)) | (1L << (DEC - 768)) | (1L << (DOUBLE_QUOTE - 768)) | (1L << (EQUALS - 768)) | (1L << (ESCAPE_C - 768)) | (1L << (FLOAT - 768)) | (1L << (FORWARD_SLASH - 768)) | (1L << (HEX - 768)) | (1L << (IP_ADDRESS - 768)) | (1L << (IP_PREFIX - 768)) | (1L << (IPV6_ADDRESS - 768)) | (1L << (IPV6_PREFIX - 768)) | (1L << (PAREN_LEFT - 768)) | (1L << (PAREN_RIGHT - 768)) | (1L << (PERCENT - 768)) | (1L << (PERIOD - 768)) | (1L << (PLUS - 768)) | (1L << (POUND - 768)) | (1L << (SEMICOLON - 768)) | (1L << (SINGLE_QUOTE - 768)) | (1L << (UNDERSCORE - 768)) | (1L << (WS - 768)) | (1L << (M_BANNER_WS - 768)))) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & ((1L << (M_CERTIFICATE_TEXT - 832)) | (1L << (M_COMMENT_NON_NEWLINE - 832)) | (1L << (M_DES_DEC_PART - 832)) | (1L << (M_DES_HEX_PART - 832)) | (1L << (M_DES_WS - 832)) | (1L << (M_DESCRIPTION_NON_NEWLINE - 832)) | (1L << (M_KEY_NON_NEWLINE - 832)) | (1L << (M_MOTD_C_MOTD - 832)) | (1L << (M_MOTD_EOF_MOTD - 832)) | (1L << (M_MOTD_HASH_MOTD - 832)) | (1L << (M_NAME_WS - 832)) | (1L << (M_NAME_NAME - 832)) | (1L << (M_NEIGHBOR_WS - 832)) | (1L << (M_REMARK_REMARK - 832)) | (1L << (M_SHA1_DEC_PART - 832)) | (1L << (M_SHA1_HEX_PART - 832)) | (1L << (M_SHA1_WS - 832)))) != 0)) {
				{
				{
				setState(3364);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(3369);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3370); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_local_preference_rm_stanzaContext extends ParserRuleContext {
		public Token pref;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode LOCAL_PREFERENCE() { return getToken(CiscoGrammar.LOCAL_PREFERENCE, 0); }
		public Set_local_preference_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_local_preference_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_local_preference_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_local_preference_rm_stanza(this);
		}
	}

	public final Set_local_preference_rm_stanzaContext set_local_preference_rm_stanza() throws RecognitionException {
		Set_local_preference_rm_stanzaContext _localctx = new Set_local_preference_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_set_local_preference_rm_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3372); match(SET);
			setState(3373); match(LOCAL_PREFERENCE);
			setState(3374); ((Set_local_preference_rm_stanzaContext)_localctx).pref = match(DEC);
			setState(3375); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_metric_rm_stanzaContext extends ParserRuleContext {
		public Token metric;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode METRIC() { return getToken(CiscoGrammar.METRIC, 0); }
		public Set_metric_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_metric_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_metric_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_metric_rm_stanza(this);
		}
	}

	public final Set_metric_rm_stanzaContext set_metric_rm_stanza() throws RecognitionException {
		Set_metric_rm_stanzaContext _localctx = new Set_metric_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_set_metric_rm_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3377); match(SET);
			setState(3378); match(METRIC);
			setState(3379); ((Set_metric_rm_stanzaContext)_localctx).metric = match(DEC);
			setState(3380); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_metric_type_rm_stanzaContext extends ParserRuleContext {
		public Token type;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode VARIABLE() { return getToken(CiscoGrammar.VARIABLE, 0); }
		public TerminalNode METRIC_TYPE() { return getToken(CiscoGrammar.METRIC_TYPE, 0); }
		public Set_metric_type_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_metric_type_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_metric_type_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_metric_type_rm_stanza(this);
		}
	}

	public final Set_metric_type_rm_stanzaContext set_metric_type_rm_stanza() throws RecognitionException {
		Set_metric_type_rm_stanzaContext _localctx = new Set_metric_type_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_set_metric_type_rm_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3382); match(SET);
			setState(3383); match(METRIC_TYPE);
			setState(3384); ((Set_metric_type_rm_stanzaContext)_localctx).type = match(VARIABLE);
			setState(3385); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_mpls_label_rm_stanzaContext extends ParserRuleContext {
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode MPLS_LABEL() { return getToken(CiscoGrammar.MPLS_LABEL, 0); }
		public Set_mpls_label_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_mpls_label_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_mpls_label_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_mpls_label_rm_stanza(this);
		}
	}

	public final Set_mpls_label_rm_stanzaContext set_mpls_label_rm_stanza() throws RecognitionException {
		Set_mpls_label_rm_stanzaContext _localctx = new Set_mpls_label_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_set_mpls_label_rm_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3387); match(SET);
			setState(3388); match(MPLS_LABEL);
			setState(3389); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_next_hop_rm_stanzaContext extends ParserRuleContext {
		public Token IP_ADDRESS;
		public List<Token> nexthop_list = new ArrayList<Token>();
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode IP() { return getToken(CiscoGrammar.IP, 0); }
		public List<TerminalNode> IP_ADDRESS() { return getTokens(CiscoGrammar.IP_ADDRESS); }
		public TerminalNode IP_ADDRESS(int i) {
			return getToken(CiscoGrammar.IP_ADDRESS, i);
		}
		public TerminalNode NEXT_HOP() { return getToken(CiscoGrammar.NEXT_HOP, 0); }
		public Set_next_hop_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_next_hop_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_next_hop_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_next_hop_rm_stanza(this);
		}
	}

	public final Set_next_hop_rm_stanzaContext set_next_hop_rm_stanza() throws RecognitionException {
		Set_next_hop_rm_stanzaContext _localctx = new Set_next_hop_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_set_next_hop_rm_stanza);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3391); match(SET);
			setState(3392); match(IP);
			setState(3393); match(NEXT_HOP);
			setState(3395); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3394); ((Set_next_hop_rm_stanzaContext)_localctx).IP_ADDRESS = match(IP_ADDRESS);
				((Set_next_hop_rm_stanzaContext)_localctx).nexthop_list.add(((Set_next_hop_rm_stanzaContext)_localctx).IP_ADDRESS);
				}
				}
				setState(3397); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==IP_ADDRESS );
			setState(3399); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_origin_rm_stanzaContext extends ParserRuleContext {
		public Token as;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode IGP() { return getToken(CiscoGrammar.IGP, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode EGP() { return getToken(CiscoGrammar.EGP, 0); }
		public TerminalNode ORIGIN() { return getToken(CiscoGrammar.ORIGIN, 0); }
		public TerminalNode INCOMPLETE() { return getToken(CiscoGrammar.INCOMPLETE, 0); }
		public Set_origin_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_origin_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_origin_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_origin_rm_stanza(this);
		}
	}

	public final Set_origin_rm_stanzaContext set_origin_rm_stanza() throws RecognitionException {
		Set_origin_rm_stanzaContext _localctx = new Set_origin_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_set_origin_rm_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3401); match(SET);
			setState(3402); match(ORIGIN);
			setState(3407);
			switch (_input.LA(1)) {
			case EGP:
				{
				{
				setState(3403); match(EGP);
				setState(3404); ((Set_origin_rm_stanzaContext)_localctx).as = match(DEC);
				}
				}
				break;
			case IGP:
				{
				setState(3405); match(IGP);
				}
				break;
			case INCOMPLETE:
				{
				setState(3406); match(INCOMPLETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3409); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_weight_rm_stanzaContext extends ParserRuleContext {
		public Token weight;
		public TerminalNode NEWLINE() { return getToken(CiscoGrammar.NEWLINE, 0); }
		public TerminalNode SET() { return getToken(CiscoGrammar.SET, 0); }
		public TerminalNode DEC() { return getToken(CiscoGrammar.DEC, 0); }
		public TerminalNode WEIGHT() { return getToken(CiscoGrammar.WEIGHT, 0); }
		public Set_weight_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_weight_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_weight_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_weight_rm_stanza(this);
		}
	}

	public final Set_weight_rm_stanzaContext set_weight_rm_stanza() throws RecognitionException {
		Set_weight_rm_stanzaContext _localctx = new Set_weight_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_set_weight_rm_stanza);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3411); match(SET);
			setState(3412); match(WEIGHT);
			setState(3413); ((Set_weight_rm_stanzaContext)_localctx).weight = match(DEC);
			setState(3414); match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_rm_stanzaContext extends ParserRuleContext {
		public Set_community_additive_rm_stanzaContext set_community_additive_rm_stanza() {
			return getRuleContext(Set_community_additive_rm_stanzaContext.class,0);
		}
		public Set_local_preference_rm_stanzaContext set_local_preference_rm_stanza() {
			return getRuleContext(Set_local_preference_rm_stanzaContext.class,0);
		}
		public Set_metric_rm_stanzaContext set_metric_rm_stanza() {
			return getRuleContext(Set_metric_rm_stanzaContext.class,0);
		}
		public Set_next_hop_rm_stanzaContext set_next_hop_rm_stanza() {
			return getRuleContext(Set_next_hop_rm_stanzaContext.class,0);
		}
		public Set_comm_list_delete_rm_stanzaContext set_comm_list_delete_rm_stanza() {
			return getRuleContext(Set_comm_list_delete_rm_stanzaContext.class,0);
		}
		public Set_ip_df_rm_stanzaContext set_ip_df_rm_stanza() {
			return getRuleContext(Set_ip_df_rm_stanzaContext.class,0);
		}
		public Set_extcomm_list_rm_stanzaContext set_extcomm_list_rm_stanza() {
			return getRuleContext(Set_extcomm_list_rm_stanzaContext.class,0);
		}
		public Set_metric_type_rm_stanzaContext set_metric_type_rm_stanza() {
			return getRuleContext(Set_metric_type_rm_stanzaContext.class,0);
		}
		public Set_as_path_prepend_rm_stanzaContext set_as_path_prepend_rm_stanza() {
			return getRuleContext(Set_as_path_prepend_rm_stanzaContext.class,0);
		}
		public Set_mpls_label_rm_stanzaContext set_mpls_label_rm_stanza() {
			return getRuleContext(Set_mpls_label_rm_stanzaContext.class,0);
		}
		public Set_ipv6_rm_stanzaContext set_ipv6_rm_stanza() {
			return getRuleContext(Set_ipv6_rm_stanzaContext.class,0);
		}
		public Set_community_rm_stanzaContext set_community_rm_stanza() {
			return getRuleContext(Set_community_rm_stanzaContext.class,0);
		}
		public Set_weight_rm_stanzaContext set_weight_rm_stanza() {
			return getRuleContext(Set_weight_rm_stanzaContext.class,0);
		}
		public Set_interface_rm_stanzaContext set_interface_rm_stanza() {
			return getRuleContext(Set_interface_rm_stanzaContext.class,0);
		}
		public Set_origin_rm_stanzaContext set_origin_rm_stanza() {
			return getRuleContext(Set_origin_rm_stanzaContext.class,0);
		}
		public Set_rm_stanzaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_rm_stanza; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).enterSet_rm_stanza(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CiscoGrammarListener ) ((CiscoGrammarListener)listener).exitSet_rm_stanza(this);
		}
	}

	public final Set_rm_stanzaContext set_rm_stanza() throws RecognitionException {
		Set_rm_stanzaContext _localctx = new Set_rm_stanzaContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_set_rm_stanza);
		try {
			setState(3431);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3416); set_as_path_prepend_rm_stanza();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3417); set_comm_list_delete_rm_stanza();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3418); set_community_rm_stanza();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3419); set_community_additive_rm_stanza();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3420); set_extcomm_list_rm_stanza();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3421); set_interface_rm_stanza();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3422); set_ip_df_rm_stanza();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3423); set_ipv6_rm_stanza();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3424); set_local_preference_rm_stanza();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3425); set_metric_rm_stanza();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3426); set_metric_type_rm_stanza();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3427); set_mpls_label_rm_stanza();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3428); set_next_hop_rm_stanza();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3429); set_origin_rm_stanza();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3430); set_weight_rm_stanza();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return exact_match_sempred((Exact_matchContext)_localctx, predIndex);
		case 28: return appletalk_access_list_numbered_stanza_sempred((Appletalk_access_list_numbered_stanzaContext)_localctx, predIndex);
		case 36: return extended_access_list_numbered_stanza_sempred((Extended_access_list_numbered_stanzaContext)_localctx, predIndex);
		case 40: return ip_as_path_numbered_stanza_sempred((Ip_as_path_numbered_stanzaContext)_localctx, predIndex);
		case 43: return ip_community_list_expanded_named_stanza_sempred((Ip_community_list_expanded_named_stanzaContext)_localctx, predIndex);
		case 44: return ip_community_list_expanded_numbered_stanza_sempred((Ip_community_list_expanded_numbered_stanzaContext)_localctx, predIndex);
		case 47: return ip_community_list_standard_named_stanza_sempred((Ip_community_list_standard_named_stanzaContext)_localctx, predIndex);
		case 48: return ip_community_list_standard_numbered_stanza_sempred((Ip_community_list_standard_numbered_stanzaContext)_localctx, predIndex);
		case 51: return ip_prefix_list_named_stanza_sempred((Ip_prefix_list_named_stanzaContext)_localctx, predIndex);
		case 54: return ipx_sap_access_list_numbered_stanza_sempred((Ipx_sap_access_list_numbered_stanzaContext)_localctx, predIndex);
		case 63: return protocol_type_code_access_list_numbered_stanza_sempred((Protocol_type_code_access_list_numbered_stanzaContext)_localctx, predIndex);
		case 68: return standard_access_list_numbered_stanza_sempred((Standard_access_list_numbered_stanzaContext)_localctx, predIndex);
		case 243: return route_map_named_stanza_sempred((Route_map_named_stanzaContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean route_map_named_stanza_sempred(Route_map_named_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return _localctx.again;
		case 24: return !_localctx.again;
		}
		return true;
	}
	private boolean ip_community_list_expanded_numbered_stanza_sempred(Ip_community_list_expanded_numbered_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return _localctx.again;
		case 10: return !_localctx.again;
		}
		return true;
	}
	private boolean extended_access_list_numbered_stanza_sempred(Extended_access_list_numbered_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return _localctx.again;
		case 4: return !_localctx.again;
		}
		return true;
	}
	private boolean appletalk_access_list_numbered_stanza_sempred(Appletalk_access_list_numbered_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return _localctx.again;
		case 2: return !_localctx.again;
		}
		return true;
	}
	private boolean ip_community_list_standard_numbered_stanza_sempred(Ip_community_list_standard_numbered_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return _localctx.again;
		case 14: return !_localctx.again;
		}
		return true;
	}
	private boolean exact_match_sempred(Exact_matchContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_input.LT(1).getType() == VARIABLE || _input.LT(1).getType() == COMMUNITY_LIST_NUM_EXPANDED) && _input.LT(1).getText().equals(_localctx.matchText);
		}
		return true;
	}
	private boolean protocol_type_code_access_list_numbered_stanza_sempred(Protocol_type_code_access_list_numbered_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return _localctx.again;
		case 20: return !_localctx.again;
		}
		return true;
	}
	private boolean ipx_sap_access_list_numbered_stanza_sempred(Ipx_sap_access_list_numbered_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return _localctx.again;
		case 18: return !_localctx.again;
		}
		return true;
	}
	private boolean ip_prefix_list_named_stanza_sempred(Ip_prefix_list_named_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return !_localctx.again;
		case 15: return _localctx.again;
		}
		return true;
	}
	private boolean ip_community_list_expanded_named_stanza_sempred(Ip_community_list_expanded_named_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return _localctx.again;
		case 8: return !_localctx.again;
		}
		return true;
	}
	private boolean ip_as_path_numbered_stanza_sempred(Ip_as_path_numbered_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return _localctx.again;
		case 6: return !_localctx.again;
		}
		return true;
	}
	private boolean standard_access_list_numbered_stanza_sempred(Standard_access_list_numbered_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return _localctx.again;
		case 22: return !_localctx.again;
		}
		return true;
	}
	private boolean ip_community_list_standard_named_stanza_sempred(Ip_community_list_standard_named_stanzaContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return _localctx.again;
		case 12: return !_localctx.again;
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0352\u0d6c\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\3\2\3\2\7\2\u0215\n\2\f\2\16\2\u0218"+
		"\13\2\3\2\3\2\7\2\u021c\n\2\f\2\16\2\u021f\13\2\3\2\3\2\3\2\3\3\3\3\3"+
		"\3\7\3\u0227\n\3\f\3\16\3\u022a\13\3\3\3\3\3\3\3\7\3\u022f\n\3\f\3\16"+
		"\3\u0232\13\3\3\3\3\3\3\3\7\3\u0237\n\3\f\3\16\3\u023a\13\3\3\3\5\3\u023d"+
		"\n\3\3\3\3\3\3\4\3\4\7\4\u0243\n\4\f\4\16\4\u0246\13\4\3\4\3\4\3\4\3\5"+
		"\6\5\u024c\n\5\r\5\16\5\u024d\3\5\5\5\u0251\n\5\3\5\5\5\u0254\n\5\3\5"+
		"\7\5\u0257\n\5\f\5\16\5\u025a\13\5\3\5\3\5\3\6\3\6\7\6\u0260\n\6\f\6\16"+
		"\6\u0263\13\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\5\b\u0270\n"+
		"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u027b\n\b\f\b\16\b\u027e\13"+
		"\b\3\b\3\b\7\b\u0282\n\b\f\b\16\b\u0285\13\b\5\b\u0287\n\b\3\b\3\b\3\t"+
		"\3\t\7\t\u028d\n\t\f\t\16\t\u0290\13\t\3\t\3\t\3\n\5\n\u0295\n\n\3\n\3"+
		"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u02a2\n\n\3\n\3\n\3\n\3\n\3"+
		"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u02b3\n\n\3\n\3\n\3\n\3"+
		"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n"+
		"\3\n\3\n\3\n\3\n\5\n\u02ce\n\n\3\n\7\n\u02d1\n\n\f\n\16\n\u02d4\13\n\3"+
		"\n\3\n\3\n\7\n\u02d9\n\n\f\n\16\n\u02dc\13\n\3\13\5\13\u02df\n\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\5\13\u03a6\n\13\3\13\7\13\u03a9\n\13\f\13\16\13\u03ac\13\13\3\13\3\13"+
		"\3\f\5\f\u03b1\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u03bb\n\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u03ea\n\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\5\f\u045e\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0471\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u04c9\n\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u050b\n\f\f\f\16\f\u050e\13\f\3\f\3\f\3\f"+
		"\7\f\u0513\n\f\f\f\16\f\u0516\13\f\3\f\7\f\u0519\n\f\f\f\16\f\u051c\13"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\5\f\u052f\n\f\3\f\7\f\u0532\n\f\f\f\16\f\u0535\13\f\3\f\3\f\3\r\3\r\3"+
		"\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0543\n\r\3\r\3\r\3\r\5\r\u0548\n\r"+
		"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u055f\n\16\3\17\3\17\7\17\u0563"+
		"\n\17\f\17\16\17\u0566\13\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3"+
		"\20\7\20\u0571\n\20\f\20\16\20\u0574\13\20\3\20\3\20\3\20\3\20\7\20\u057a"+
		"\n\20\f\20\16\20\u057d\13\20\3\20\3\20\3\20\3\20\7\20\u0583\n\20\f\20"+
		"\16\20\u0586\13\20\3\20\3\20\3\20\3\20\7\20\u058c\n\20\f\20\16\20\u058f"+
		"\13\20\3\20\7\20\u0592\n\20\f\20\16\20\u0595\13\20\3\21\3\21\7\21\u0599"+
		"\n\21\f\21\16\21\u059c\13\21\3\21\3\21\7\21\u05a0\n\21\f\21\16\21\u05a3"+
		"\13\21\3\21\7\21\u05a6\n\21\f\21\16\21\u05a9\13\21\3\22\3\22\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\5\23\u05b3\n\23\3\24\3\24\5\24\u05b7\n\24\3\24\3"+
		"\24\3\25\3\25\3\25\3\26\3\26\3\26\5\26\u05c1\n\26\3\27\3\27\6\27\u05c5"+
		"\n\27\r\27\16\27\u05c6\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3"+
		"\27\5\27\u05d3\n\27\3\30\3\30\3\31\3\31\3\32\3\32\3\32\7\32\u05dc\n\32"+
		"\f\32\16\32\u05df\13\32\3\32\5\32\u05e2\n\32\3\33\3\33\3\33\5\33\u05e7"+
		"\n\33\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u05f2\n\35\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u05fb\n\36\3\37\3\37\3\37\7\37\u0600"+
		"\n\37\f\37\16\37\u0603\13\37\3\37\5\37\u0606\n\37\3\37\3\37\3 \3 \3!\3"+
		"!\7!\u060e\n!\f!\16!\u0611\13!\3!\3!\7!\u0615\n!\f!\16!\u0618\13!\3\""+
		"\3\"\3\"\7\"\u061d\n\"\f\"\16\"\u0620\13\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3"+
		"#\3#\5#\u0643\n#\3$\3$\3$\3$\3$\3$\3$\7$\u064c\n$\f$\16$\u064f\13$\3%"+
		"\3%\3%\3%\5%\u0655\n%\3%\3%\5%\u0659\n%\3%\3%\3%\3%\3%\5%\u0660\n%\3%"+
		"\7%\u0663\n%\f%\16%\u0666\13%\3%\3%\3&\3&\3&\3&\5&\u066e\n&\3&\3&\3&\3"+
		"&\5&\u0674\n&\3\'\3\'\5\'\u0678\n\'\3(\3(\3(\3(\5(\u067e\n(\3(\3(\5(\u0682"+
		"\n(\3(\5(\u0685\n(\3(\3(\3)\3)\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0694\n*"+
		"\3+\3+\6+\u0698\n+\r+\16+\u0699\3+\3+\3,\3,\5,\u06a0\n,\3-\3-\3-\3-\3"+
		"-\3-\3-\3-\3-\5-\u06ab\n-\3.\3.\3.\3.\3.\3.\3.\3.\5.\u06b5\n.\3/\3/\6"+
		"/\u06b9\n/\r/\16/\u06ba\3/\3/\3\60\3\60\5\60\u06c1\n\60\3\61\3\61\3\61"+
		"\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u06cc\n\61\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\5\62\u06d6\n\62\3\63\3\63\6\63\u06da\n\63\r\63\16\63\u06db"+
		"\3\63\3\63\3\64\3\64\3\65\3\65\3\65\3\65\3\65\5\65\u06e7\n\65\3\65\3\65"+
		"\3\65\3\65\5\65\u06ed\n\65\3\66\3\66\3\67\3\67\5\67\u06f3\n\67\3\67\3"+
		"\67\3\67\5\67\u06f8\n\67\3\67\3\67\3\67\3\67\3\67\3\67\7\67\u0700\n\67"+
		"\f\67\16\67\u0703\13\67\3\67\3\67\38\38\38\38\38\38\38\58\u070e\n8\39"+
		"\39\79\u0712\n9\f9\169\u0715\139\39\39\3:\3:\3;\3;\7;\u071d\n;\f;\16;"+
		"\u0720\13;\3;\3;\7;\u0724\n;\f;\16;\u0727\13;\3<\3<\3<\7<\u072c\n<\f<"+
		"\16<\u072f\13<\3<\3<\3=\3=\3=\7=\u0736\n=\f=\16=\u0739\13=\3=\3=\3>\3"+
		">\3>\3>\3>\3>\3>\7>\u0744\n>\f>\16>\u0747\13>\3?\3?\7?\u074b\n?\f?\16"+
		"?\u074e\13?\3?\3?\3@\3@\3@\3A\3A\3A\3A\3A\3A\3A\5A\u075c\nA\3B\3B\7B\u0760"+
		"\nB\fB\16B\u0763\13B\3B\3B\3C\3C\3D\3D\3D\3D\3D\3D\5D\u076f\nD\3D\3D\5"+
		"D\u0773\nD\3E\3E\3E\3E\3E\3E\3E\7E\u077c\nE\fE\16E\u077f\13E\3F\3F\3F"+
		"\3F\5F\u0785\nF\3F\3F\3F\3F\5F\u078b\nF\3G\3G\5G\u078f\nG\3H\3H\3H\5H"+
		"\u0794\nH\3H\3H\3I\3I\3I\5I\u079b\nI\3I\3I\5I\u079f\nI\3I\3I\3I\3I\5I"+
		"\u07a5\nI\3J\7J\u07a8\nJ\fJ\16J\u07ab\13J\3K\3K\3L\3L\3L\3L\3L\3L\3L\3"+
		"L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u07c6\nL\3M\3M\3N\3"+
		"N\3O\3O\3O\3O\3O\5O\u07d1\nO\3O\5O\u07d4\nO\3O\3O\3P\5P\u07d9\nP\3P\3"+
		"P\3P\3Q\3Q\3Q\3Q\5Q\u07e2\nQ\3Q\3Q\3R\3R\3S\3S\3T\3T\3T\3T\3U\3U\3U\3"+
		"U\5U\u07f2\nU\3U\3U\3U\3V\3V\3W\3W\3X\3X\3X\3X\5X\u07ff\nX\3X\3X\3X\5"+
		"X\u0804\nX\3X\3X\3Y\3Y\3Z\3Z\3[\3[\3[\3[\3\\\3\\\3]\3]\3^\3^\3^\3^\7^"+
		"\u0818\n^\f^\16^\u081b\13^\3^\3^\3_\3_\3`\3`\3a\3a\3a\3a\3a\3a\3b\3b\3"+
		"c\3c\3d\3d\3d\3d\3d\3d\3d\3e\3e\3e\3e\3e\5e\u0839\ne\3e\6e\u083c\ne\r"+
		"e\16e\u083d\3f\3f\3f\3f\3f\3g\3g\7g\u0847\ng\fg\16g\u084a\13g\3g\3g\3"+
		"h\5h\u084f\nh\3h\3h\3h\3i\3i\5i\u0856\ni\3i\3i\3j\3j\3j\3j\3k\3k\3l\3"+
		"l\3m\3m\3m\3m\3m\3m\5m\u0868\nm\3n\3n\3n\5n\u086d\nn\3n\3n\3n\3o\3o\3"+
		"o\3p\3p\3q\3q\3q\5q\u087a\nq\3q\3q\3q\3r\3r\3s\3s\3t\3t\3t\5t\u0886\n"+
		"t\3t\3t\3t\3t\3u\3u\3v\3v\3w\3w\3w\3w\3w\3x\3x\3y\3y\3z\3z\3z\3z\3z\3"+
		"z\3z\3{\3{\3|\3|\3}\3}\3}\3}\3}\3}\3~\3~\3\177\3\177\3\u0080\3\u0080\3"+
		"\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\3\u0082\3\u0082\3\u0082\5\u0082\u08bd\n\u0082\3\u0082\3\u0082"+
		"\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\5\u0085"+
		"\u08c9\n\u0085\3\u0085\3\u0085\5\u0085\u08cd\n\u0085\3\u0085\5\u0085\u08d0"+
		"\n\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\5\u0088\u08dc\n\u0088\3\u0088\3\u0088\3\u0088\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008b\3\u008b"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u08ef\n\u008c\3\u008c\5\u008c"+
		"\u08f2\n\u008c\3\u008c\3\u008c\5\u008c\u08f6\n\u008c\3\u008c\3\u008c\3"+
		"\u008d\3\u008d\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f\5\u008f\u0901\n"+
		"\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0091\3\u0091\3\u0091\5\u0091\u090e\n\u0091\3\u0092\3\u0092\5\u0092"+
		"\u0912\n\u0092\3\u0093\5\u0093\u0915\n\u0093\3\u0093\3\u0093\3\u0093\3"+
		"\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\5\u0093\u0925\n\u0093\3\u0093\7\u0093\u0928\n\u0093\f"+
		"\u0093\16\u0093\u092b\13\u0093\3\u0093\3\u0093\3\u0094\5\u0094\u0930\n"+
		"\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\5\u0094\u093c\n\u0094\3\u0094\7\u0094\u093f\n\u0094\f"+
		"\u0094\16\u0094\u0942\13\u0094\3\u0094\3\u0094\3\u0095\3\u0095\5\u0095"+
		"\u0948\n\u0095\3\u0096\3\u0096\7\u0096\u094c\n\u0096\f\u0096\16\u0096"+
		"\u094f\13\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u096e\n\u0097\3\u0098\3\u0098"+
		"\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009c"+
		"\3\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\7\u009d\u0982"+
		"\n\u009d\f\u009d\16\u009d\u0985\13\u009d\3\u009d\3\u009d\3\u009e\3\u009e"+
		"\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\7\u00a0\u0994\n\u00a0\f\u00a0\16\u00a0\u0997\13\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\7\u00a3\u09a5\n\u00a3\f\u00a3\16\u00a3\u09a8\13\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5"+
		"\7\u00a5\u09b4\n\u00a5\f\u00a5\16\u00a5\u09b7\13\u00a5\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\6\u00aa\u09d1\n\u00aa\r\u00aa\16\u00aa"+
		"\u09d2\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\6\u00ac\u09dd\n\u00ac\r\u00ac\16\u00ac\u09de\3\u00ad\3\u00ad\5\u00ad"+
		"\u09e3\n\u00ad\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00b0\7\u00b0\u09ed\n\u00b0\f\u00b0\16\u00b0\u09f0\13\u00b0\3\u00b1"+
		"\3\u00b1\3\u00b1\5\u00b1\u09f5\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0a0a\n\u00b2"+
		"\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0a0f\n\u00b3\3\u00b3\3\u00b3\5\u00b3"+
		"\u0a13\n\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4\7\u00b4\u0a19\n\u00b4\f"+
		"\u00b4\16\u00b4\u0a1c\13\u00b4\3\u00b5\3\u00b5\5\u00b5\u0a20\n\u00b5\3"+
		"\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0a30\n\u00b7\3\u00b7"+
		"\3\u00b7\5\u00b7\u0a34\n\u00b7\3\u00b7\3\u00b7\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00be"+
		"\3\u00be\5\u00be\u0a60\n\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0a65\n"+
		"\u00be\3\u00bf\5\u00bf\u0a68\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0aa1\n\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0ade\n\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\5\u00bf\u0aeb\n\u00bf\3\u00bf\7\u00bf\u0aee\n\u00bf\f\u00bf\16"+
		"\u00bf\u0af1\13\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c2\5\u00c2\u0afd\n\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u0b23"+
		"\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00cb"+
		"\3\u00cb\7\u00cb\u0b37\n\u00cb\f\u00cb\16\u00cb\u0b3a\13\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0b41\n\u00cc\3\u00cc\3\u00cc"+
		"\7\u00cc\u0b45\n\u00cc\f\u00cc\16\u00cc\u0b48\13\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cd\3\u00cd\7\u00cd\u0b4e\n\u00cd\f\u00cd\16\u00cd\u0b51\13\u00cd"+
		"\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\7\u00ce\u0b5e\n\u00ce\f\u00ce\16\u00ce\u0b61\13\u00ce"+
		"\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0b68\n\u00cf\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\6\u00d0\u0b70\n\u00d0\r\u00d0"+
		"\16\u00d0\u0b71\3\u00d1\3\u00d1\3\u00d1\3\u00d2\3\u00d2\7\u00d2\u0b79"+
		"\n\u00d2\f\u00d2\16\u00d2\u0b7c\13\u00d2\3\u00d2\3\u00d2\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0b86\n\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0b8e\n\u00d4\3\u00d5\3\u00d5"+
		"\3\u00d6\5\u00d6\u0b93\n\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u0b9d\n\u00d6\3\u00d6\7\u00d6\u0ba0\n"+
		"\u00d6\f\u00d6\16\u00d6\u0ba3\13\u00d6\3\u00d6\3\u00d6\3\u00d7\5\u00d7"+
		"\u0ba8\n\u00d7\3\u00d7\3\u00d7\7\u00d7\u0bac\n\u00d7\f\u00d7\16\u00d7"+
		"\u0baf\13\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d9"+
		"\5\u00d9\u0bb8\n\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\7\u00da\u0bca\n\u00da\f\u00da\16\u00da\u0bcd\13\u00da\3\u00da"+
		"\3\u00da\3\u00db\3\u00db\7\u00db\u0bd3\n\u00db\f\u00db\16\u00db\u0bd6"+
		"\13\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u0be5\n\u00dc\f\u00dc"+
		"\16\u00dc\u0be8\13\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd\7\u00dd"+
		"\u0bef\n\u00dd\f\u00dd\16\u00dd\u0bf2\13\u00dd\3\u00dd\3\u00dd\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\7\u00de\u0c01\n\u00de\f\u00de\16\u00de\u0c04\13\u00de\3\u00de"+
		"\3\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0c14\n\u00df\3\u00e0\3\u00e0"+
		"\7\u00e0\u0c18\n\u00e0\f\u00e0\16\u00e0\u0c1b\13\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e3\6\u00e3\u0c2a\n\u00e3\r\u00e3\16\u00e3\u0c2b\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\7\u00e5\u0c34\n\u00e5\f\u00e5"+
		"\16\u00e5\u0c37\13\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e7\5\u00e7\u0c40\n\u00e7\3\u00e7\3\u00e7\7\u00e7\u0c44\n\u00e7\f"+
		"\u00e7\16\u00e7\u0c47\13\u00e7\3\u00e7\3\u00e7\3\u00e8\3\u00e8\7\u00e8"+
		"\u0c4d\n\u00e8\f\u00e8\16\u00e8\u0c50\13\u00e8\3\u00e8\3\u00e8\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u0c58\n\u00e9\f\u00e9\16\u00e9\u0c5b"+
		"\13\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u0c62\n\u00ea"+
		"\3\u00eb\3\u00eb\3\u00eb\6\u00eb\u0c67\n\u00eb\r\u00eb\16\u00eb\u0c68"+
		"\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ec\6\u00ec\u0c70\n\u00ec\r\u00ec"+
		"\16\u00ec\u0c71\3\u00ec\3\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\6\u00ed"+
		"\u0c7a\n\u00ed\r\u00ed\16\u00ed\u0c7b\3\u00ed\3\u00ed\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\6\u00ee\u0c85\n\u00ee\r\u00ee\16\u00ee\u0c86"+
		"\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00ef\7\u00ef\u0c8e\n\u00ef\f\u00ef"+
		"\16\u00ef\u0c91\13\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0\7\u00f0"+
		"\u0c98\n\u00f0\f\u00f0\16\u00f0\u0c9b\13\u00f0\3\u00f0\3\u00f0\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0ca6\n\u00f1"+
		"\3\u00f2\3\u00f2\3\u00f2\6\u00f2\u0cab\n\u00f2\r\u00f2\16\u00f2\u0cac"+
		"\3\u00f2\3\u00f2\3\u00f3\5\u00f3\u0cb2\n\u00f3\3\u00f3\3\u00f3\7\u00f3"+
		"\u0cb6\n\u00f3\f\u00f3\16\u00f3\u0cb9\13\u00f3\3\u00f3\3\u00f3\3\u00f4"+
		"\3\u00f4\3\u00f4\5\u00f4\u0cc0\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u0cc9\n\u00f5\3\u00f6\3\u00f6\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f8\7\u00f8\u0cd3\n\u00f8\f\u00f8"+
		"\16\u00f8\u0cd6\13\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u0cdc"+
		"\n\u00f9\3\u00f9\6\u00f9\u0cdf\n\u00f9\r\u00f9\16\u00f9\u0ce0\3\u00f9"+
		"\3\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u0ce9\n\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\6\u00fb\u0cf1\n\u00fb\r\u00fb"+
		"\16\u00fb\u0cf2\3\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fd\3\u00fd\3\u00fd\6\u00fd\u0d00\n\u00fd\r\u00fd\16\u00fd"+
		"\u0d01\3\u00fd\3\u00fd\3\u00fe\3\u00fe\3\u00fe\6\u00fe\u0d09\n\u00fe\r"+
		"\u00fe\16\u00fe\u0d0a\3\u00fe\3\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u00ff"+
		"\7\u00ff\u0d13\n\u00ff\f\u00ff\16\u00ff\u0d16\13\u00ff\3\u00ff\3\u00ff"+
		"\3\u0100\3\u0100\3\u0100\3\u0100\7\u0100\u0d1e\n\u0100\f\u0100\16\u0100"+
		"\u0d21\13\u0100\3\u0100\3\u0100\3\u0101\3\u0101\3\u0101\7\u0101\u0d28"+
		"\n\u0101\f\u0101\16\u0101\u0d2b\13\u0101\3\u0101\3\u0101\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0105\3\u0105\3\u0105\3\u0105\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\6\u0106\u0d46\n\u0106\r\u0106\16\u0106\u0d47"+
		"\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107"+
		"\u0d52\n\u0107\3\u0107\3\u0107\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u0d6a\n\u0109"+
		"\3\u0109\2\2\u010a\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60"+
		"\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086"+
		"\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e"+
		"\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6"+
		"\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce"+
		"\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6"+
		"\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe"+
		"\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116"+
		"\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e"+
		"\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146"+
		"\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e"+
		"\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176"+
		"\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e"+
		"\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6"+
		"\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be"+
		"\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6"+
		"\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee"+
		"\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206"+
		"\u0208\u020a\u020c\u020e\u0210\2$\3\2\u0336\u0336\3\2\u032e\u032e\3\2"+
		"\u033c\u033c\3\2\u00e2\u00e2\3\2\u022e\u022e\6\2\u015c\u015c\u01fb\u01fb"+
		"\u020b\u020b\u0224\u0224\5\2\u00f3\u00f3\u01af\u01af\u023a\u023a\4\2\u00fe"+
		"\u00fe\u02b1\u02b1\4\2\u014b\u014b\u0152\u0152\4\2\22\23\u0106\u0106\5"+
		"\2\u00da\u00da\u014a\u014a\u015c\u015c\6\2\25\25\u0089\u0089\u00c7\u00c7"+
		"\u0148\u0148\4\2\u008e\u008e\u0336\u0336\4\2\u00aa\u00aa\u0202\u0202\4"+
		"\2\13\13\u0318\u0318\37\2TT[\\\u0080\u0080\u00c1\u00c1\u00ed\u00ed\u0112"+
		"\u0113\u0132\u0132\u0139\u0139\u0156\u0156\u0181\u0181\u01a5\u01a5\u01ce"+
		"\u01d0\u01d9\u01d9\u01df\u01df\u01e5\u01e5\u0207\u0207\u020e\u020e\u0250"+
		"\u0250\u0289\u0289\u028b\u028b\u028d\u028d\u029d\u029d\u02b0\u02b0\u02b8"+
		"\u02b8\u02bc\u02bc\u02c5\u02c5\u02c8\u02c8\u0310\u0310\u032b\u032b\22"+
		"\2**\u00d8\u00d8\u00e6\u00e6\u011b\u011b\u0136\u0136\u013c\u013c\u014b"+
		"\u014b\u014e\u014e\u0152\u0152\u01eb\u01eb\u0206\u0206\u026a\u026a\u02c4"+
		"\u02c4\u02e5\u02e5\u0307\u0307\u032b\u032b\5\2\u00c7\u00c7\u0158\u0158"+
		"\u01c9\u01c9\5\2\u00aa\u00aa\u0202\u0202\u0242\u0242\4\2\u0151\u0152\u0301"+
		"\u0302\4\2\u01b9\u01b9\u02eb\u02eb\5\2\u0332\u0332\u0334\u0334\u0336\u0336"+
		"\4\2\u0140\u0140\u01ee\u01ee\4\2\u00ad\u00ad\u0194\u0194\4\2\u0318\u0318"+
		"\u0332\u0332\b\2\u0195\u0195\u01d8\u01d8\u01f8\u01f8\u0270\u0270\u0290"+
		"\u0290\u02d1\u02d1\n\2\60\60RR\u0098\u0098\u009c\u009c\u00b0\u00b0\u0119"+
		"\u0119\u0171\u0171\u017e\u017e\f\2\u00ad\u00ad\u00c5\u00c5\u00fc\u00fc"+
		"\u0195\u0196\u01f8\u01f8\u0246\u0246\u0290\u0290\u02d1\u02d1\u02d8\u02d8"+
		"\u02f4\u02f4\b\2\u00ad\u00ad\u00d3\u00d3\u01f8\u01f8\u0246\u0246\u0286"+
		"\u0286\u02d1\u02d1\4\2\u00b9\u00b9\u02a2\u02a2\6\2CC\u019c\u019c\u01d2"+
		"\u01d2\u021b\u021b\4\2\u00a2\u00a2\u01dd\u01dd\4\2\u032b\u032b\u0332\u0332"+
		"\4\2\u0318\u0318\u032b\u032b\u10d9\2\u0212\3\2\2\2\4\u0223\3\2\2\2\6\u0240"+
		"\3\2\2\2\b\u024b\3\2\2\2\n\u025d\3\2\2\2\f\u0266\3\2\2\2\16\u026a\3\2"+
		"\2\2\20\u028a\3\2\2\2\22\u0294\3\2\2\2\24\u02de\3\2\2\2\26\u03b0\3\2\2"+
		"\2\30\u0547\3\2\2\2\32\u055e\3\2\2\2\34\u0560\3\2\2\2\36\u0569\3\2\2\2"+
		" \u0596\3\2\2\2\"\u05aa\3\2\2\2$\u05b2\3\2\2\2&\u05b4\3\2\2\2(\u05ba\3"+
		"\2\2\2*\u05bd\3\2\2\2,\u05d2\3\2\2\2.\u05d4\3\2\2\2\60\u05d6\3\2\2\2\62"+
		"\u05e1\3\2\2\2\64\u05e3\3\2\2\2\66\u05e8\3\2\2\28\u05f1\3\2\2\2:\u05f3"+
		"\3\2\2\2<\u05fc\3\2\2\2>\u0609\3\2\2\2@\u060b\3\2\2\2B\u0619\3\2\2\2D"+
		"\u0642\3\2\2\2F\u0644\3\2\2\2H\u065f\3\2\2\2J\u0669\3\2\2\2L\u0677\3\2"+
		"\2\2N\u0679\3\2\2\2P\u0688\3\2\2\2R\u068a\3\2\2\2T\u0695\3\2\2\2V\u069f"+
		"\3\2\2\2X\u06a1\3\2\2\2Z\u06ac\3\2\2\2\\\u06b6\3\2\2\2^\u06c0\3\2\2\2"+
		"`\u06c2\3\2\2\2b\u06cd\3\2\2\2d\u06d7\3\2\2\2f\u06df\3\2\2\2h\u06e1\3"+
		"\2\2\2j\u06ee\3\2\2\2l\u06f2\3\2\2\2n\u0706\3\2\2\2p\u070f\3\2\2\2r\u0718"+
		"\3\2\2\2t\u071a\3\2\2\2v\u0728\3\2\2\2x\u0732\3\2\2\2z\u073c\3\2\2\2|"+
		"\u0748\3\2\2\2~\u0751\3\2\2\2\u0080\u0754\3\2\2\2\u0082\u075d\3\2\2\2"+
		"\u0084\u0766\3\2\2\2\u0086\u0772\3\2\2\2\u0088\u0774\3\2\2\2\u008a\u0780"+
		"\3\2\2\2\u008c\u078e\3\2\2\2\u008e\u0790\3\2\2\2\u0090\u0797\3\2\2\2\u0092"+
		"\u07a9\3\2\2\2\u0094\u07ac\3\2\2\2\u0096\u07c5\3\2\2\2\u0098\u07c7\3\2"+
		"\2\2\u009a\u07c9\3\2\2\2\u009c\u07cb\3\2\2\2\u009e\u07d8\3\2\2\2\u00a0"+
		"\u07dd\3\2\2\2\u00a2\u07e5\3\2\2\2\u00a4\u07e7\3\2\2\2\u00a6\u07e9\3\2"+
		"\2\2\u00a8\u07ed\3\2\2\2\u00aa\u07f6\3\2\2\2\u00ac\u07f8\3\2\2\2\u00ae"+
		"\u07fa\3\2\2\2\u00b0\u0807\3\2\2\2\u00b2\u0809\3\2\2\2\u00b4\u080b\3\2"+
		"\2\2\u00b6\u080f\3\2\2\2\u00b8\u0811\3\2\2\2\u00ba\u0813\3\2\2\2\u00bc"+
		"\u081e\3\2\2\2\u00be\u0820\3\2\2\2\u00c0\u0822\3\2\2\2\u00c2\u0828\3\2"+
		"\2\2\u00c4\u082a\3\2\2\2\u00c6\u082c\3\2\2\2\u00c8\u0833\3\2\2\2\u00ca"+
		"\u083f\3\2\2\2\u00cc\u0844\3\2\2\2\u00ce\u084e\3\2\2\2\u00d0\u0855\3\2"+
		"\2\2\u00d2\u0859\3\2\2\2\u00d4\u085d\3\2\2\2\u00d6\u085f\3\2\2\2\u00d8"+
		"\u0867\3\2\2\2\u00da\u0869\3\2\2\2\u00dc\u0871\3\2\2\2\u00de\u0874\3\2"+
		"\2\2\u00e0\u0876\3\2\2\2\u00e2\u087e\3\2\2\2\u00e4\u0880\3\2\2\2\u00e6"+
		"\u0882\3\2\2\2\u00e8\u088b\3\2\2\2\u00ea\u088d\3\2\2\2\u00ec\u088f\3\2"+
		"\2\2\u00ee\u0894\3\2\2\2\u00f0\u0896\3\2\2\2\u00f2\u0898\3\2\2\2\u00f4"+
		"\u089f\3\2\2\2\u00f6\u08a1\3\2\2\2\u00f8\u08a3\3\2\2\2\u00fa\u08a9\3\2"+
		"\2\2\u00fc\u08ab\3\2\2\2\u00fe\u08ad\3\2\2\2\u0100\u08b4\3\2\2\2\u0102"+
		"\u08b9\3\2\2\2\u0104\u08c1\3\2\2\2\u0106\u08c3\3\2\2\2\u0108\u08c5\3\2"+
		"\2\2\u010a\u08d3\3\2\2\2\u010c\u08d5\3\2\2\2\u010e\u08d7\3\2\2\2\u0110"+
		"\u08e0\3\2\2\2\u0112\u08e6\3\2\2\2\u0114\u08e8\3\2\2\2\u0116\u08ea\3\2"+
		"\2\2\u0118\u08f9\3\2\2\2\u011a\u08fb\3\2\2\2\u011c\u08fd\3\2\2\2\u011e"+
		"\u0904\3\2\2\2\u0120\u090d\3\2\2\2\u0122\u0911\3\2\2\2\u0124\u0914\3\2"+
		"\2\2\u0126\u092f\3\2\2\2\u0128\u0947\3\2\2\2\u012a\u0949\3\2\2\2\u012c"+
		"\u096d\3\2\2\2\u012e\u096f\3\2\2\2\u0130\u0971\3\2\2\2\u0132\u0973\3\2"+
		"\2\2\u0134\u0977\3\2\2\2\u0136\u0979\3\2\2\2\u0138\u097b\3\2\2\2\u013a"+
		"\u0988\3\2\2\2\u013c\u098a\3\2\2\2\u013e\u098c\3\2\2\2\u0140\u099a\3\2"+
		"\2\2\u0142\u099c\3\2\2\2\u0144\u099e\3\2\2\2\u0146\u09ab\3\2\2\2\u0148"+
		"\u09b5\3\2\2\2\u014a\u09b8\3\2\2\2\u014c\u09bd\3\2\2\2\u014e\u09c1\3\2"+
		"\2\2\u0150\u09c6\3\2\2\2\u0152\u09d0\3\2\2\2\u0154\u09d4\3\2\2\2\u0156"+
		"\u09d8\3\2\2\2\u0158\u09e2\3\2\2\2\u015a\u09e4\3\2\2\2\u015c\u09e6\3\2"+
		"\2\2\u015e\u09ee\3\2\2\2\u0160\u09f4\3\2\2\2\u0162\u0a09\3\2\2\2\u0164"+
		"\u0a0b\3\2\2\2\u0166\u0a1a\3\2\2\2\u0168\u0a1d\3\2\2\2\u016a\u0a26\3\2"+
		"\2\2\u016c\u0a2a\3\2\2\2\u016e\u0a37\3\2\2\2\u0170\u0a3e\3\2\2\2\u0172"+
		"\u0a44\3\2\2\2\u0174\u0a4a\3\2\2\2\u0176\u0a52\3\2\2\2\u0178\u0a58\3\2"+
		"\2\2\u017a\u0a64\3\2\2\2\u017c\u0a67\3\2\2\2\u017e\u0af4\3\2\2\2\u0180"+
		"\u0af7\3\2\2\2\u0182\u0afc\3\2\2\2\u0184\u0b01\3\2\2\2\u0186\u0b07\3\2"+
		"\2\2\u0188\u0b0c\3\2\2\2\u018a\u0b12\3\2\2\2\u018c\u0b18\3\2\2\2\u018e"+
		"\u0b1d\3\2\2\2\u0190\u0b27\3\2\2\2\u0192\u0b2d\3\2\2\2\u0194\u0b34\3\2"+
		"\2\2\u0196\u0b3d\3\2\2\2\u0198\u0b4b\3\2\2\2\u019a\u0b54\3\2\2\2\u019c"+
		"\u0b67\3\2\2\2\u019e\u0b69\3\2\2\2\u01a0\u0b73\3\2\2\2\u01a2\u0b76\3\2"+
		"\2\2\u01a4\u0b7f\3\2\2\2\u01a6\u0b8d\3\2\2\2\u01a8\u0b8f\3\2\2\2\u01aa"+
		"\u0b92\3\2\2\2\u01ac\u0ba7\3\2\2\2\u01ae\u0bb2\3\2\2\2\u01b0\u0bb7\3\2"+
		"\2\2\u01b2\u0bbd\3\2\2\2\u01b4\u0bd0\3\2\2\2\u01b6\u0bd9\3\2\2\2\u01b8"+
		"\u0beb\3\2\2\2\u01ba\u0bf5\3\2\2\2\u01bc\u0c13\3\2\2\2\u01be\u0c15\3\2"+
		"\2\2\u01c0\u0c1e\3\2\2\2\u01c2\u0c22\3\2\2\2\u01c4\u0c29\3\2\2\2\u01c6"+
		"\u0c2d\3\2\2\2\u01c8\u0c31\3\2\2\2\u01ca\u0c3a\3\2\2\2\u01cc\u0c3f\3\2"+
		"\2\2\u01ce\u0c4a\3\2\2\2\u01d0\u0c53\3\2\2\2\u01d2\u0c61\3\2\2\2\u01d4"+
		"\u0c63\3\2\2\2\u01d6\u0c6c\3\2\2\2\u01d8\u0c75\3\2\2\2\u01da\u0c7f\3\2"+
		"\2\2\u01dc\u0c8a\3\2\2\2\u01de\u0c94\3\2\2\2\u01e0\u0ca5\3\2\2\2\u01e2"+
		"\u0ca7\3\2\2\2\u01e4\u0cb1\3\2\2\2\u01e6\u0cbf\3\2\2\2\u01e8\u0cc1\3\2"+
		"\2\2\u01ea\u0cca\3\2\2\2\u01ec\u0ccc\3\2\2\2\u01ee\u0cd4\3\2\2\2\u01f0"+
		"\u0cd7\3\2\2\2\u01f2\u0ce4\3\2\2\2\u01f4\u0ced\3\2\2\2\u01f6\u0cf7\3\2"+
		"\2\2\u01f8\u0cfc\3\2\2\2\u01fa\u0d05\3\2\2\2\u01fc\u0d0f\3\2\2\2\u01fe"+
		"\u0d19\3\2\2\2\u0200\u0d24\3\2\2\2\u0202\u0d2e\3\2\2\2\u0204\u0d33\3\2"+
		"\2\2\u0206\u0d38\3\2\2\2\u0208\u0d3d\3\2\2\2\u020a\u0d41\3\2\2\2\u020c"+
		"\u0d4b\3\2\2\2\u020e\u0d55\3\2\2\2\u0210\u0d69\3\2\2\2\u0212\u0216\7!"+
		"\2\2\u0213\u0215\n\2\2\2\u0214\u0213\3\2\2\2\u0215\u0218\3\2\2\2\u0216"+
		"\u0214\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0219\3\2\2\2\u0218\u0216\3\2"+
		"\2\2\u0219\u021d\7\u0336\2\2\u021a\u021c\5\24\13\2\u021b\u021a\3\2\2\2"+
		"\u021c\u021f\3\2\2\2\u021d\u021b\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u0220"+
		"\3\2\2\2\u021f\u021d\3\2\2\2\u0220\u0221\7\u00f0\2\2\u0221\u0222\7\u0336"+
		"\2\2\u0222\3\3\2\2\2\u0223\u023c\7Q\2\2\u0224\u0228\7\u032e\2\2\u0225"+
		"\u0227\n\3\2\2\u0226\u0225\3\2\2\2\u0227\u022a\3\2\2\2\u0228\u0226\3\2"+
		"\2\2\u0228\u0229\3\2\2\2\u0229\u022b\3\2\2\2\u022a\u0228\3\2\2\2\u022b"+
		"\u023d\7\u032e\2\2\u022c\u0230\7\u033c\2\2\u022d\u022f\n\4\2\2\u022e\u022d"+
		"\3\2\2\2\u022f\u0232\3\2\2\2\u0230\u022e\3\2\2\2\u0230\u0231\3\2\2\2\u0231"+
		"\u0233\3\2\2\2\u0232\u0230\3\2\2\2\u0233\u023d\7\u033c\2\2\u0234\u0238"+
		"\7\u0336\2\2\u0235\u0237\n\5\2\2\u0236\u0235\3\2\2\2\u0237\u023a\3\2\2"+
		"\2\u0238\u0236\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023b\3\2\2\2\u023a\u0238"+
		"\3\2\2\2\u023b\u023d\7\u00e2\2\2\u023c\u0224\3\2\2\2\u023c\u022c\3\2\2"+
		"\2\u023c\u0234\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u023f\7\u0336\2\2\u023f"+
		"\5\3\2\2\2\u0240\u0244\7o\2\2\u0241\u0243\n\6\2\2\u0242\u0241\3\2\2\2"+
		"\u0243\u0246\3\2\2\2\u0244\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0247"+
		"\3\2\2\2\u0246\u0244\3\2\2\2\u0247\u0248\7\u022e\2\2\u0248\u0249\7\u0336"+
		"\2\2\u0249\7\3\2\2\2\u024a\u024c\5\32\16\2\u024b\u024a\3\2\2\2\u024c\u024d"+
		"\3\2\2\2\u024d\u024b\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0250\3\2\2\2\u024f"+
		"\u0251\7\u0325\2\2\u0250\u024f\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0253"+
		"\3\2\2\2\u0252\u0254\7\u00de\2\2\u0253\u0252\3\2\2\2\u0253\u0254\3\2\2"+
		"\2\u0254\u0258\3\2\2\2\u0255\u0257\7\u0336\2\2\u0256\u0255\3\2\2\2\u0257"+
		"\u025a\3\2\2\2\u0258\u0256\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025b\3\2"+
		"\2\2\u025a\u0258\3\2\2\2\u025b\u025c\7\2\2\3\u025c\t\3\2\2\2\u025d\u0261"+
		"\7\u0132\2\2\u025e\u0260\n\2\2\2\u025f\u025e\3\2\2\2\u0260\u0263\3\2\2"+
		"\2\u0261\u025f\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0264\3\2\2\2\u0263\u0261"+
		"\3\2\2\2\u0264\u0265\7\u0336\2\2\u0265\13\3\2\2\2\u0266\u0267\7\u014b"+
		"\2\2\u0267\u0268\7\u009f\2\2\u0268\u0269\7\u0332\2\2\u0269\r\3\2\2\2\u026a"+
		"\u026b\7\u014b\2\2\u026b\u026f\7\u0254\2\2\u026c\u026d\7\u0332\2\2\u026d"+
		"\u0270\7\u0332\2\2\u026e\u0270\7\u0333\2\2\u026f\u026c\3\2\2\2\u026f\u026e"+
		"\3\2\2\2\u0270\u027c\3\2\2\2\u0271\u027b\7\u0332\2\2\u0272\u027b\7\u0333"+
		"\2\2\u0273\u027b\5*\26\2\u0274\u027b\7\u032b\2\2\u0275\u0276\7\u02bf\2"+
		"\2\u0276\u027b\7\u032b\2\2\u0277\u027b\7\u01fe\2\2\u0278\u0279\7\u02d5"+
		"\2\2\u0279\u027b\7\u032b\2\2\u027a\u0271\3\2\2\2\u027a\u0272\3\2\2\2\u027a"+
		"\u0273\3\2\2\2\u027a\u0274\3\2\2\2\u027a\u0275\3\2\2\2\u027a\u0277\3\2"+
		"\2\2\u027a\u0278\3\2\2\2\u027b\u027e\3\2\2\2\u027c\u027a\3\2\2\2\u027c"+
		"\u027d\3\2\2\2\u027d\u0286\3\2\2\2\u027e\u027c\3\2\2\2\u027f\u0283\7\u01c1"+
		"\2\2\u0280\u0282\n\2\2\2\u0281\u0280\3\2\2\2\u0282\u0285\3\2\2\2\u0283"+
		"\u0281\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0287\3\2\2\2\u0285\u0283\3\2"+
		"\2\2\u0286\u027f\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288\3\2\2\2\u0288"+
		"\u0289\7\u0336\2\2\u0289\17\3\2\2\2\u028a\u028e\7\u0187\2\2\u028b\u028d"+
		"\n\2\2\2\u028c\u028b\3\2\2\2\u028d\u0290\3\2\2\2\u028e\u028c\3\2\2\2\u028e"+
		"\u028f\3\2\2\2\u028f\u0291\3\2\2\2\u0290\u028e\3\2\2\2\u0291\u0292\7\u0336"+
		"\2\2\u0292\21\3\2\2\2\u0293\u0295\7\u01da\2\2\u0294\u0293\3\2\2\2\u0294"+
		"\u0295\3\2\2\2\u0295\u02cd\3\2\2\2\u0296\u02ce\7\r\2\2\u0297\u02ce\7\66"+
		"\2\2\u0298\u02ce\7@\2\2\u0299\u02ce\7\u008f\2\2\u029a\u02ce\7\u0090\2"+
		"\2\u029b\u02a1\7\u0094\2\2\u029c\u029d\7\u0156\2\2\u029d\u02a2\t\7\2\2"+
		"\u029e\u02a2\7\u015e\2\2\u029f\u02a2\7\u018c\2\2\u02a0\u02a2\7\u0208\2"+
		"\2\u02a1\u029c\3\2\2\2\u02a1\u029e\3\2\2\2\u02a1\u029f\3\2\2\2\u02a1\u02a0"+
		"\3\2\2\2\u02a2\u02ce\3\2\2\2\u02a3\u02ce\7\u00b7\2\2\u02a4\u02ce\7\u00ea"+
		"\2\2\u02a5\u02a6\7\u0106\2\2\u02a6\u02ce\t\b\2\2\u02a7\u02ce\7\u0117\2"+
		"\2\u02a8\u02ce\7\u011f\2\2\u02a9\u02b2\7\u014b\2\2\u02aa\u02ab\7\24\2"+
		"\2\u02ab\u02b3\7\u017f\2\2\u02ac\u02b3\7\27\2\2\u02ad\u02b3\7\u00b4\2"+
		"\2\u02ae\u02b3\7\u0109\2\2\u02af\u02b3\7\u0145\2\2\u02b0\u02b3\7\u020c"+
		"\2\2\u02b1\u02b3\7\u0288\2\2\u02b2\u02aa\3\2\2\2\u02b2\u02ac\3\2\2\2\u02b2"+
		"\u02ad\3\2\2\2\u02b2\u02ae\3\2\2\2\u02b2\u02af\3\2\2\2\u02b2\u02b0\3\2"+
		"\2\2\u02b2\u02b1\3\2\2\2\u02b3\u02ce\3\2\2\2\u02b4\u02ce\7\u014d\2\2\u02b5"+
		"\u02b6\7\u0152\2\2\u02b6\u02ce\7\24\2\2\u02b7\u02ce\7\u0165\2\2\u02b8"+
		"\u02ce\7\u016f\2\2\u02b9\u02ce\7\u018a\2\2\u02ba\u02ce\7\u018d\2\2\u02bb"+
		"\u02ce\7\u018f\2\2\u02bc\u02ce\7\u01e8\2\2\u02bd\u02ce\7\u020d\2\2\u02be"+
		"\u02ce\7\u0229\2\2\u02bf\u02ce\7\u0240\2\2\u02c0\u02ce\7\u0252\2\2\u02c1"+
		"\u02c2\7\u0264\2\2\u02c2\u02c3\7j\2\2\u02c3\u02ce\7\u011c\2\2\u02c4\u02ce"+
		"\7\u0297\2\2\u02c5\u02c6\7\u02a4\2\2\u02c6\u02ce\t\t\2\2\u02c7\u02c8\7"+
		"\u02f8\2\2\u02c8\u02ce\7\u032b\2\2\u02c9\u02ce\7\u02fa\2\2\u02ca\u02ce"+
		"\7\u02fc\2\2\u02cb\u02ce\7\u02fd\2\2\u02cc\u02ce\7\u02ff\2\2\u02cd\u0296"+
		"\3\2\2\2\u02cd\u0297\3\2\2\2\u02cd\u0298\3\2\2\2\u02cd\u0299\3\2\2\2\u02cd"+
		"\u029a\3\2\2\2\u02cd\u029b\3\2\2\2\u02cd\u02a3\3\2\2\2\u02cd\u02a4\3\2"+
		"\2\2\u02cd\u02a5\3\2\2\2\u02cd\u02a7\3\2\2\2\u02cd\u02a8\3\2\2\2\u02cd"+
		"\u02a9\3\2\2\2\u02cd\u02b4\3\2\2\2\u02cd\u02b5\3\2\2\2\u02cd\u02b7\3\2"+
		"\2\2\u02cd\u02b8\3\2\2\2\u02cd\u02b9\3\2\2\2\u02cd\u02ba\3\2\2\2\u02cd"+
		"\u02bb\3\2\2\2\u02cd\u02bc\3\2\2\2\u02cd\u02bd\3\2\2\2\u02cd\u02be\3\2"+
		"\2\2\u02cd\u02bf\3\2\2\2\u02cd\u02c0\3\2\2\2\u02cd\u02c1\3\2\2\2\u02cd"+
		"\u02c4\3\2\2\2\u02cd\u02c5\3\2\2\2\u02cd\u02c7\3\2\2\2\u02cd\u02c9\3\2"+
		"\2\2\u02cd\u02ca\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd\u02cc\3\2\2\2\u02ce"+
		"\u02d2\3\2\2\2\u02cf\u02d1\n\2\2\2\u02d0\u02cf\3\2\2\2\u02d1\u02d4\3\2"+
		"\2\2\u02d2\u02d0\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d5\3\2\2\2\u02d4"+
		"\u02d2\3\2\2\2\u02d5\u02da\7\u0336\2\2\u02d6\u02d9\5\24\13\2\u02d7\u02d9"+
		"\5&\24\2\u02d8\u02d6\3\2\2\2\u02d8\u02d7\3\2\2\2\u02d9\u02dc\3\2\2\2\u02da"+
		"\u02d8\3\2\2\2\u02da\u02db\3\2\2\2\u02db\23\3\2\2\2\u02dc\u02da\3\2\2"+
		"\2\u02dd\u02df\7\u01da\2\2\u02de\u02dd\3\2\2\2\u02de\u02df\3\2\2\2\u02df"+
		"\u03a5\3\2\2\2\u02e0\u03a6\7\17\2\2\u02e1\u03a6\7\20\2\2\u02e2\u03a6\7"+
		"\22\2\2\u02e3\u03a6\7\31\2\2\u02e4\u03a6\7\32\2\2\u02e5\u03a6\7\34\2\2"+
		"\u02e6\u03a6\7\"\2\2\u02e7\u03a6\7#\2\2\u02e8\u03a6\7\'\2\2\u02e9\u03a6"+
		"\7\62\2\2\u02ea\u03a6\7<\2\2\u02eb\u03a6\7=\2\2\u02ec\u03a6\7C\2\2\u02ed"+
		"\u03a6\7E\2\2\u02ee\u03a6\7F\2\2\u02ef\u03a6\7G\2\2\u02f0\u03a6\7H\2\2"+
		"\u02f1\u03a6\7M\2\2\u02f2\u03a6\7K\2\2\u02f3\u03a6\7N\2\2\u02f4\u03a6"+
		"\7O\2\2\u02f5\u03a6\7P\2\2\u02f6\u03a6\7Q\2\2\u02f7\u03a6\7V\2\2\u02f8"+
		"\u03a6\7^\2\2\u02f9\u03a6\7b\2\2\u02fa\u03a6\7c\2\2\u02fb\u03a6\7d\2\2"+
		"\u02fc\u03a6\7e\2\2\u02fd\u03a6\7g\2\2\u02fe\u03a6\7i\2\2\u02ff\u03a6"+
		"\7o\2\2\u0300\u03a6\7s\2\2\u0301\u03a6\7u\2\2\u0302\u03a6\7x\2\2\u0303"+
		"\u03a6\7}\2\2\u0304\u03a6\7\u0083\2\2\u0305\u03a6\7\u008a\2\2\u0306\u03a6"+
		"\7\u0093\2\2\u0307\u03a6\7\u0095\2\2\u0308\u03a6\7\u0094\2\2\u0309\u03a6"+
		"\7\u0099\2\2\u030a\u03a6\7\u009a\2\2\u030b\u03a6\7\u009d\2\2\u030c\u03a6"+
		"\7\u009e\2\2\u030d\u03a6\7\u00a0\2\2\u030e\u03a6\7\u00a6\2\2\u030f\u03a6"+
		"\7\u00a8\2\2\u0310\u03a6\7\u00aa\2\2\u0311\u03a6\7\u00ad\2\2\u0312\u03a6"+
		"\7\u00af\2\2\u0313\u03a6\7\u00b6\2\2\u0314\u03a6\7\u00c0\2\2\u0315\u03a6"+
		"\7\u00c8\2\2\u0316\u03a6\7\u00c9\2\2\u0317\u03a6\7\u00c4\2\2\u0318\u03a6"+
		"\7\u00db\2\2\u0319\u03a6\7\u00e0\2\2\u031a\u03a6\7\u00e5\2\2\u031b\u03a6"+
		"\7\u00eb\2\2\u031c\u03a6\7\u00ed\2\2\u031d\u03a6\7\u00ee\2\2\u031e\u03a6"+
		"\7\u00f2\2\2\u031f\u03a6\7\u00f3\2\2\u0320\u03a6\7\u00f8\2\2\u0321\u03a6"+
		"\7\u00fb\2\2\u0322\u03a6\7\u00fd\2\2\u0323\u03a6\7\u0100\2\2\u0324\u03a6"+
		"\7\u0101\2\2\u0325\u03a6\7\u010b\2\2\u0326\u03a6\7\u010d\2\2\u0327\u03a6"+
		"\7\u0110\2\2\u0328\u03a6\7\u011d\2\2\u0329\u03a6\7\u011f\2\2\u032a\u03a6"+
		"\7\u0121\2\2\u032b\u03a6\7\u0128\2\2\u032c\u03a6\7\u0129\2\2\u032d\u03a6"+
		"\7\u012a\2\2\u032e\u03a6\7\u012b\2\2\u032f\u03a6\7\u012c\2\2\u0330\u03a6"+
		"\7\u013b\2\2\u0331\u03a6\7\u0145\2\2\u0332\u03a6\7\u0146\2\2\u0333\u0334"+
		"\7\u0147\2\2\u0334\u03a6\7\u020b\2\2\u0335\u0336\t\n\2\2\u0336\u03a6\t"+
		"\13\2\2\u0337\u03a6\7\u0150\2\2\u0338\u03a6\7\u0154\2\2\u0339\u03a6\7"+
		"\u0153\2\2\u033a\u03a6\7\u0156\2\2\u033b\u03a6\7\u015a\2\2\u033c\u03a6"+
		"\7\u015d\2\2\u033d\u03a6\7\u015e\2\2\u033e\u03a6\7\u0164\2\2\u033f\u03a6"+
		"\7\u016b\2\2\u0340\u03a6\7\u016f\2\2\u0341\u03a6\7\u0170\2\2\u0342\u03a6"+
		"\7\u0172\2\2\u0343\u03a6\7\u0177\2\2\u0344\u03a6\7\u0178\2\2\u0345\u03a6"+
		"\7\u017a\2\2\u0346\u03a6\7\u017b\2\2\u0347\u03a6\7\u017f\2\2\u0348\u03a6"+
		"\7\u0180\2\2\u0349\u03a6\7\u0189\2\2\u034a\u03a6\7\u0191\2\2\u034b\u03a6"+
		"\7\u0192\2\2\u034c\u03a6\7\u019d\2\2\u034d\u03a6\7\u01ac\2\2\u034e\u03a6"+
		"\7\u01ad\2\2\u034f\u03a6\7\u01b8\2\2\u0350\u03a6\7\u01c1\2\2\u0351\u03a6"+
		"\7\u01d2\2\2\u0352\u03a6\7\u01de\2\2\u0353\u03a6\7\u01e2\2\2\u0354\u03a6"+
		"\7\u01f3\2\2\u0355\u03a6\7\u01f4\2\2\u0356\u03a6\7\u01f8\2\2\u0357\u03a6"+
		"\7\u01f9\2\2\u0358\u03a6\7\u01fa\2\2\u0359\u03a6\7\u01ff\2\2\u035a\u03a6"+
		"\7\u0200\2\2\u035b\u03a6\7\u0201\2\2\u035c\u03a6\7\u0202\2\2\u035d\u03a6"+
		"\7\u0205\2\2\u035e\u03a6\7\u020a\2\2\u035f\u03a6\7\u020d\2\2\u0360\u03a6"+
		"\7\u020f\2\2\u0361\u03a6\7\u021e\2\2\u0362\u03a6\7\u021a\2\2\u0363\u03a6"+
		"\7\u021b\2\2\u0364\u03a6\7\u0222\2\2\u0365\u03a6\7\u0226\2\2\u0366\u03a6"+
		"\7\u022b\2\2\u0367\u03a6\7\u022c\2\2\u0368\u03a6\7\u0232\2\2\u0369\u03a6"+
		"\7\u0239\2\2\u036a\u03a6\7\u023a\2\2\u036b\u03a6\7\u023b\2\2\u036c\u03a6"+
		"\7\u023f\2\2\u036d\u03a6\7\u0242\2\2\u036e\u03a6\7\u0244\2\2\u036f\u03a6"+
		"\7\u0245\2\2\u0370\u03a6\7\u0247\2\2\u0371\u03a6\7\u0248\2\2\u0372\u03a6"+
		"\7\u024b\2\2\u0373\u03a6\7\u024c\2\2\u0374\u03a6\7\u024d\2\2\u0375\u03a6"+
		"\7\u024f\2\2\u0376\u03a6\7\u0252\2\2\u0377\u03a6\7\u0253\2\2\u0378\u03a6"+
		"\7\u0258\2\2\u0379\u03a6\7\u0261\2\2\u037a\u03a6\7\u0267\2\2\u037b\u03a6"+
		"\7\u0273\2\2\u037c\u03a6\7\u0277\2\2\u037d\u03a6\7\u0279\2\2\u037e\u03a6"+
		"\7\u027b\2\2\u037f\u03a6\7\u027c\2\2\u0380\u03a6\7\u027d\2\2\u0381\u03a6"+
		"\7\u027e\2\2\u0382\u03a6\7\u027f\2\2\u0383\u03a6\7\u0280\2\2\u0384\u03a6"+
		"\7\u0284\2\2\u0385\u03a6\7\u0286\2\2\u0386\u03a6\7\u0287\2\2\u0387\u03a6"+
		"\7\u028e\2\2\u0388\u03a6\7\u0292\2\2\u0389\u03a6\7\u0297\2\2\u038a\u03a6"+
		"\7\u0299\2\2\u038b\u03a6\7\u029a\2\2\u038c\u03a6\7\u029b\2\2\u038d\u03a6"+
		"\7\u02a5\2\2\u038e\u03a6\7\u02a7\2\2\u038f\u03a6\7\u02a8\2\2\u0390\u03a6"+
		"\7\u02b3\2\2\u0391\u03a6\7\u02b6\2\2\u0392\u03a6\7\u02c1\2\2\u0393\u03a6"+
		"\7\u02c2\2\2\u0394\u03a6\7\u02c7\2\2\u0395\u03a6\7\u02cf\2\2\u0396\u03a6"+
		"\7\u02d0\2\2\u0397\u03a6\7\u02d2\2\2\u0398\u03a6\7\u02d4\2\2\u0399\u03a6"+
		"\7\u02d8\2\2\u039a\u03a6\7\u02d9\2\2\u039b\u03a6\7\u02e1\2\2\u039c\u03a6"+
		"\7\u02ee\2\2\u039d\u03a6\7\u02f5\2\2\u039e\u03a6\7\u02f7\2\2\u039f\u03a6"+
		"\7\u0303\2\2\u03a0\u03a6\7\u0304\2\2\u03a1\u03a6\7\u0305\2\2\u03a2\u03a6"+
		"\7\u0309\2\2\u03a3\u03a6\7\u030b\2\2\u03a4\u03a6\7\u030c\2\2\u03a5\u02e0"+
		"\3\2\2\2\u03a5\u02e1\3\2\2\2\u03a5\u02e2\3\2\2\2\u03a5\u02e3\3\2\2\2\u03a5"+
		"\u02e4\3\2\2\2\u03a5\u02e5\3\2\2\2\u03a5\u02e6\3\2\2\2\u03a5\u02e7\3\2"+
		"\2\2\u03a5\u02e8\3\2\2\2\u03a5\u02e9\3\2\2\2\u03a5\u02ea\3\2\2\2\u03a5"+
		"\u02eb\3\2\2\2\u03a5\u02ec\3\2\2\2\u03a5\u02ed\3\2\2\2\u03a5\u02ee\3\2"+
		"\2\2\u03a5\u02ef\3\2\2\2\u03a5\u02f0\3\2\2\2\u03a5\u02f1\3\2\2\2\u03a5"+
		"\u02f2\3\2\2\2\u03a5\u02f3\3\2\2\2\u03a5\u02f4\3\2\2\2\u03a5\u02f5\3\2"+
		"\2\2\u03a5\u02f6\3\2\2\2\u03a5\u02f7\3\2\2\2\u03a5\u02f8\3\2\2\2\u03a5"+
		"\u02f9\3\2\2\2\u03a5\u02fa\3\2\2\2\u03a5\u02fb\3\2\2\2\u03a5\u02fc\3\2"+
		"\2\2\u03a5\u02fd\3\2\2\2\u03a5\u02fe\3\2\2\2\u03a5\u02ff\3\2\2\2\u03a5"+
		"\u0300\3\2\2\2\u03a5\u0301\3\2\2\2\u03a5\u0302\3\2\2\2\u03a5\u0303\3\2"+
		"\2\2\u03a5\u0304\3\2\2\2\u03a5\u0305\3\2\2\2\u03a5\u0306\3\2\2\2\u03a5"+
		"\u0307\3\2\2\2\u03a5\u0308\3\2\2\2\u03a5\u0309\3\2\2\2\u03a5\u030a\3\2"+
		"\2\2\u03a5\u030b\3\2\2\2\u03a5\u030c\3\2\2\2\u03a5\u030d\3\2\2\2\u03a5"+
		"\u030e\3\2\2\2\u03a5\u030f\3\2\2\2\u03a5\u0310\3\2\2\2\u03a5\u0311\3\2"+
		"\2\2\u03a5\u0312\3\2\2\2\u03a5\u0313\3\2\2\2\u03a5\u0314\3\2\2\2\u03a5"+
		"\u0315\3\2\2\2\u03a5\u0316\3\2\2\2\u03a5\u0317\3\2\2\2\u03a5\u0318\3\2"+
		"\2\2\u03a5\u0319\3\2\2\2\u03a5\u031a\3\2\2\2\u03a5\u031b\3\2\2\2\u03a5"+
		"\u031c\3\2\2\2\u03a5\u031d\3\2\2\2\u03a5\u031e\3\2\2\2\u03a5\u031f\3\2"+
		"\2\2\u03a5\u0320\3\2\2\2\u03a5\u0321\3\2\2\2\u03a5\u0322\3\2\2\2\u03a5"+
		"\u0323\3\2\2\2\u03a5\u0324\3\2\2\2\u03a5\u0325\3\2\2\2\u03a5\u0326\3\2"+
		"\2\2\u03a5\u0327\3\2\2\2\u03a5\u0328\3\2\2\2\u03a5\u0329\3\2\2\2\u03a5"+
		"\u032a\3\2\2\2\u03a5\u032b\3\2\2\2\u03a5\u032c\3\2\2\2\u03a5\u032d\3\2"+
		"\2\2\u03a5\u032e\3\2\2\2\u03a5\u032f\3\2\2\2\u03a5\u0330\3\2\2\2\u03a5"+
		"\u0331\3\2\2\2\u03a5\u0332\3\2\2\2\u03a5\u0333\3\2\2\2\u03a5\u0335\3\2"+
		"\2\2\u03a5\u0337\3\2\2\2\u03a5\u0338\3\2\2\2\u03a5\u0339\3\2\2\2\u03a5"+
		"\u033a\3\2\2\2\u03a5\u033b\3\2\2\2\u03a5\u033c\3\2\2\2\u03a5\u033d\3\2"+
		"\2\2\u03a5\u033e\3\2\2\2\u03a5\u033f\3\2\2\2\u03a5\u0340\3\2\2\2\u03a5"+
		"\u0341\3\2\2\2\u03a5\u0342\3\2\2\2\u03a5\u0343\3\2\2\2\u03a5\u0344\3\2"+
		"\2\2\u03a5\u0345\3\2\2\2\u03a5\u0346\3\2\2\2\u03a5\u0347\3\2\2\2\u03a5"+
		"\u0348\3\2\2\2\u03a5\u0349\3\2\2\2\u03a5\u034a\3\2\2\2\u03a5\u034b\3\2"+
		"\2\2\u03a5\u034c\3\2\2\2\u03a5\u034d\3\2\2\2\u03a5\u034e\3\2\2\2\u03a5"+
		"\u034f\3\2\2\2\u03a5\u0350\3\2\2\2\u03a5\u0351\3\2\2\2\u03a5\u0352\3\2"+
		"\2\2\u03a5\u0353\3\2\2\2\u03a5\u0354\3\2\2\2\u03a5\u0355\3\2\2\2\u03a5"+
		"\u0356\3\2\2\2\u03a5\u0357\3\2\2\2\u03a5\u0358\3\2\2\2\u03a5\u0359\3\2"+
		"\2\2\u03a5\u035a\3\2\2\2\u03a5\u035b\3\2\2\2\u03a5\u035c\3\2\2\2\u03a5"+
		"\u035d\3\2\2\2\u03a5\u035e\3\2\2\2\u03a5\u035f\3\2\2\2\u03a5\u0360\3\2"+
		"\2\2\u03a5\u0361\3\2\2\2\u03a5\u0362\3\2\2\2\u03a5\u0363\3\2\2\2\u03a5"+
		"\u0364\3\2\2\2\u03a5\u0365\3\2\2\2\u03a5\u0366\3\2\2\2\u03a5\u0367\3\2"+
		"\2\2\u03a5\u0368\3\2\2\2\u03a5\u0369\3\2\2\2\u03a5\u036a\3\2\2\2\u03a5"+
		"\u036b\3\2\2\2\u03a5\u036c\3\2\2\2\u03a5\u036d\3\2\2\2\u03a5\u036e\3\2"+
		"\2\2\u03a5\u036f\3\2\2\2\u03a5\u0370\3\2\2\2\u03a5\u0371\3\2\2\2\u03a5"+
		"\u0372\3\2\2\2\u03a5\u0373\3\2\2\2\u03a5\u0374\3\2\2\2\u03a5\u0375\3\2"+
		"\2\2\u03a5\u0376\3\2\2\2\u03a5\u0377\3\2\2\2\u03a5\u0378\3\2\2\2\u03a5"+
		"\u0379\3\2\2\2\u03a5\u037a\3\2\2\2\u03a5\u037b\3\2\2\2\u03a5\u037c\3\2"+
		"\2\2\u03a5\u037d\3\2\2\2\u03a5\u037e\3\2\2\2\u03a5\u037f\3\2\2\2\u03a5"+
		"\u0380\3\2\2\2\u03a5\u0381\3\2\2\2\u03a5\u0382\3\2\2\2\u03a5\u0383\3\2"+
		"\2\2\u03a5\u0384\3\2\2\2\u03a5\u0385\3\2\2\2\u03a5\u0386\3\2\2\2\u03a5"+
		"\u0387\3\2\2\2\u03a5\u0388\3\2\2\2\u03a5\u0389\3\2\2\2\u03a5\u038a\3\2"+
		"\2\2\u03a5\u038b\3\2\2\2\u03a5\u038c\3\2\2\2\u03a5\u038d\3\2\2\2\u03a5"+
		"\u038e\3\2\2\2\u03a5\u038f\3\2\2\2\u03a5\u0390\3\2\2\2\u03a5\u0391\3\2"+
		"\2\2\u03a5\u0392\3\2\2\2\u03a5\u0393\3\2\2\2\u03a5\u0394\3\2\2\2\u03a5"+
		"\u0395\3\2\2\2\u03a5\u0396\3\2\2\2\u03a5\u0397\3\2\2\2\u03a5\u0398\3\2"+
		"\2\2\u03a5\u0399\3\2\2\2\u03a5\u039a\3\2\2\2\u03a5\u039b\3\2\2\2\u03a5"+
		"\u039c\3\2\2\2\u03a5\u039d\3\2\2\2\u03a5\u039e\3\2\2\2\u03a5\u039f\3\2"+
		"\2\2\u03a5\u03a0\3\2\2\2\u03a5\u03a1\3\2\2\2\u03a5\u03a2\3\2\2\2\u03a5"+
		"\u03a3\3\2\2\2\u03a5\u03a4\3\2\2\2\u03a6\u03aa\3\2\2\2\u03a7\u03a9\n\2"+
		"\2\2\u03a8\u03a7\3\2\2\2\u03a9\u03ac\3\2\2\2\u03aa\u03a8\3\2\2\2\u03aa"+
		"\u03ab\3\2\2\2\u03ab\u03ad\3\2\2\2\u03ac\u03aa\3\2\2\2\u03ad\u03ae\7\u0336"+
		"\2\2\u03ae\25\3\2\2\2\u03af\u03b1\7\u01da\2\2\u03b0\u03af\3\2\2\2\u03b0"+
		"\u03b1\3\2\2\2\u03b1\u052e\3\2\2\2\u03b2\u052f\7\r\2\2\u03b3\u052f\7\16"+
		"\2\2\u03b4\u052f\7\17\2\2\u03b5\u052f\7\23\2\2\u03b6\u03ba\7\24\2\2\u03b7"+
		"\u03b8\7\u032b\2\2\u03b8\u03bb\7\u0242\2\2\u03b9\u03bb\7\u0318\2\2\u03ba"+
		"\u03b7\3\2\2\2\u03ba\u03b9\3\2\2\2\u03bb\u052f\3\2\2\2\u03bc\u052f\7\30"+
		"\2\2\u03bd\u052f\7\32\2\2\u03be\u052f\7\35\2\2\u03bf\u052f\7 \2\2\u03c0"+
		"\u052f\7+\2\2\u03c1\u052f\7,\2\2\u03c2\u052f\7\62\2\2\u03c3\u052f\7\63"+
		"\2\2\u03c4\u052f\7\64\2\2\u03c5\u052f\7\65\2\2\u03c6\u052f\78\2\2\u03c7"+
		"\u052f\7:\2\2\u03c8\u052f\7;\2\2\u03c9\u052f\7<\2\2\u03ca\u052f\7?\2\2"+
		"\u03cb\u052f\7C\2\2\u03cc\u052f\7D\2\2\u03cd\u052f\7I\2\2\u03ce\u052f"+
		"\7W\2\2\u03cf\u052f\7X\2\2\u03d0\u052f\7Y\2\2\u03d1\u052f\7^\2\2\u03d2"+
		"\u052f\7e\2\2\u03d3\u052f\7f\2\2\u03d4\u052f\7h\2\2\u03d5\u052f\7l\2\2"+
		"\u03d6\u052f\7m\2\2\u03d7\u052f\7p\2\2\u03d8\u052f\7v\2\2\u03d9\u052f"+
		"\7w\2\2\u03da\u052f\7z\2\2\u03db\u052f\7{\2\2\u03dc\u052f\7}\2\2\u03dd"+
		"\u052f\7~\2\2\u03de\u052f\7\u0081\2\2\u03df\u052f\7\u0082\2\2\u03e0\u052f"+
		"\7\u0088\2\2\u03e1\u052f\7\u008c\2\2\u03e2\u052f\7\u008d\2\2\u03e3\u052f"+
		"\7\u0095\2\2\u03e4\u03e9\7\u0094\2\2\u03e5\u03ea\7`\2\2\u03e6\u03ea\7"+
		"\u014f\2\2\u03e7\u03e8\7\u0156\2\2\u03e8\u03ea\t\f\2\2\u03e9\u03e5\3\2"+
		"\2\2\u03e9\u03e6\3\2\2\2\u03e9\u03e7\3\2\2\2\u03ea\u052f\3\2\2\2\u03eb"+
		"\u052f\7\u0096\2\2\u03ec\u052f\7\u0097\2\2\u03ed\u052f\7\u009c\2\2\u03ee"+
		"\u052f\7\u00ad\2\2\u03ef\u052f\7\u00af\2\2\u03f0\u052f\7\u00b2\2\2\u03f1"+
		"\u052f\7\u00b5\2\2\u03f2\u052f\7\u00b6\2\2\u03f3\u052f\7\u00b8\2\2\u03f4"+
		"\u052f\7\u00bb\2\2\u03f5\u052f\7\u00be\2\2\u03f6\u052f\7\u00bf\2\2\u03f7"+
		"\u052f\7\u00c4\2\2\u03f8\u052f\7\u00c6\2\2\u03f9\u052f\7\u00ca\2\2\u03fa"+
		"\u052f\7\u00cb\2\2\u03fb\u052f\7\u00cc\2\2\u03fc\u052f\7\u00d1\2\2\u03fd"+
		"\u052f\7\u00da\2\2\u03fe\u052f\7\u00dc\2\2\u03ff\u052f\7\u00dd\2\2\u0400"+
		"\u052f\7\u00e0\2\2\u0401\u052f\7\u00e1\2\2\u0402\u052f\7\u00e4\2\2\u0403"+
		"\u052f\7\u00e5\2\2\u0404\u052f\7\u00e9\2\2\u0405\u052f\7\u00ec\2\2\u0406"+
		"\u052f\7\u00ed\2\2\u0407\u052f\7\u00f8\2\2\u0408\u052f\7\u00f9\2\2\u0409"+
		"\u052f\7\u00fa\2\2\u040a\u052f\7\u00fe\2\2\u040b\u052f\7\u00ff\2\2\u040c"+
		"\u052f\7\u0103\2\2\u040d\u052f\7\u0105\2\2\u040e\u052f\7\u010a\2\2\u040f"+
		"\u052f\7\u010f\2\2\u0410\u052f\7\u0111\2\2\u0411\u052f\7\u010d\2\2\u0412"+
		"\u052f\7\u0112\2\2\u0413\u052f\7\u0114\2\2\u0414\u052f\7\u0116\2\2\u0415"+
		"\u052f\7\u011c\2\2\u0416\u052f\7\u011e\2\2\u0417\u052f\7\u0124\2\2\u0418"+
		"\u052f\7\u0125\2\2\u0419\u052f\7\u012c\2\2\u041a\u052f\7\u012e\2\2\u041b"+
		"\u052f\7\u0134\2\2\u041c\u052f\7\u0135\2\2\u041d\u052f\7\u0136\2\2\u041e"+
		"\u052f\7\u0137\2\2\u041f\u052f\7\u0138\2\2\u0420\u052f\7\u013a\2\2\u0421"+
		"\u052f\7\u0141\2\2\u0422\u045d\7\u014b\2\2\u0423\u045e\7\"\2\2\u0424\u045e"+
		"\7$\2\2\u0425\u045e\7,\2\2\u0426\u045e\78\2\2\u0427\u045e\7A\2\2\u0428"+
		"\u045e\7B\2\2\u0429\u045e\7Z\2\2\u042a\u045e\7U\2\2\u042b\u045e\7n\2\2"+
		"\u042c\u045e\7y\2\2\u042d\u045e\7\u00a4\2\2\u042e\u045e\7\u00b1\2\2\u042f"+
		"\u045e\7\u00c1\2\2\u0430\u045e\7\u00c2\2\2\u0431\u045e\7\u00c3\2\2\u0432"+
		"\u045e\7\u00c4\2\2\u0433\u045e\7\u00cf\2\2\u0434\u045e\7\u00f6\2\2\u0435"+
		"\u045e\7\u0104\2\2\u0436\u045e\7\u0107\2\2\u0437\u045e\7\u0108\2\2\u0438"+
		"\u045e\7\u010c\2\2\u0439\u045e\7\u0112\2\2\u043a\u045e\7\u011a\2\2\u043b"+
		"\u045e\7\u012e\2\2\u043c\u045e\7\u012f\2\2\u043d\u045e\7\u0134\2\2\u043e"+
		"\u045e\7\u0136\2\2\u043f\u045e\7\u013c\2\2\u0440\u045e\7\u0174\2\2\u0441"+
		"\u045e\7\u0175\2\2\u0442\u045e\7\u01a0\2\2\u0443\u045e\7\u01b4\2\2\u0444"+
		"\u045e\7\u01b6\2\2\u0445\u045e\7\u01b9\2\2\u0446\u045e\7\u01ba\2\2\u0447"+
		"\u045e\7\u01bf\2\2\u0448\u045e\7\u01c3\2\2\u0449\u044a\7\u01eb\2\2\u044a"+
		"\u045e\7\u01be\2\2\u044b\u045e\7\u0206\2\2\u044c\u045e\7\u022f\2\2\u044d"+
		"\u045e\7\u0237\2\2\u044e\u044f\7\u0254\2\2\u044f\u045e\7\u0306\2\2\u0450"+
		"\u045e\7\u025d\2\2\u0451\u045e\7\u0263\2\2\u0452\u045e\7\u0268\2\2\u0453"+
		"\u045e\7\u0288\2\2\u0454\u045e\7\u0295\2\2\u0455\u045e\7\u029d\2\2\u0456"+
		"\u045e\7\u02ab\2\2\u0457\u045e\7\u02bc\2\2\u0458\u045e\7\u02c4\2\2\u0459"+
		"\u045e\7\u02c5\2\2\u045a\u045e\7\u02c8\2\2\u045b\u045e\7\u02f3\2\2\u045c"+
		"\u045e\7\u0306\2\2\u045d\u0423\3\2\2\2\u045d\u0424\3\2\2\2\u045d\u0425"+
		"\3\2\2\2\u045d\u0426\3\2\2\2\u045d\u0427\3\2\2\2\u045d\u0428\3\2\2\2\u045d"+
		"\u0429\3\2\2\2\u045d\u042a\3\2\2\2\u045d\u042b\3\2\2\2\u045d\u042c\3\2"+
		"\2\2\u045d\u042d\3\2\2\2\u045d\u042e\3\2\2\2\u045d\u042f\3\2\2\2\u045d"+
		"\u0430\3\2\2\2\u045d\u0431\3\2\2\2\u045d\u0432\3\2\2\2\u045d\u0433\3\2"+
		"\2\2\u045d\u0434\3\2\2\2\u045d\u0435\3\2\2\2\u045d\u0436\3\2\2\2\u045d"+
		"\u0437\3\2\2\2\u045d\u0438\3\2\2\2\u045d\u0439\3\2\2\2\u045d\u043a\3\2"+
		"\2\2\u045d\u043b\3\2\2\2\u045d\u043c\3\2\2\2\u045d\u043d\3\2\2\2\u045d"+
		"\u043e\3\2\2\2\u045d\u043f\3\2\2\2\u045d\u0440\3\2\2\2\u045d\u0441\3\2"+
		"\2\2\u045d\u0442\3\2\2\2\u045d\u0443\3\2\2\2\u045d\u0444\3\2\2\2\u045d"+
		"\u0445\3\2\2\2\u045d\u0446\3\2\2\2\u045d\u0447\3\2\2\2\u045d\u0448\3\2"+
		"\2\2\u045d\u0449\3\2\2\2\u045d\u044b\3\2\2\2\u045d\u044c\3\2\2\2\u045d"+
		"\u044d\3\2\2\2\u045d\u044e\3\2\2\2\u045d\u0450\3\2\2\2\u045d\u0451\3\2"+
		"\2\2\u045d\u0452\3\2\2\2\u045d\u0453\3\2\2\2\u045d\u0454\3\2\2\2\u045d"+
		"\u0455\3\2\2\2\u045d\u0456\3\2\2\2\u045d\u0457\3\2\2\2\u045d\u0458\3\2"+
		"\2\2\u045d\u0459\3\2\2\2\u045d\u045a\3\2\2\2\u045d\u045b\3\2\2\2\u045d"+
		"\u045c\3\2\2\2\u045e\u052f\3\2\2\2\u045f\u052f\7\u014c\2\2\u0460\u0470"+
		"\7\u0152\2\2\u0461\u0471\7n\2\2\u0462\u0471\7\u012e\2\2\u0463\u0471\7"+
		"\u0175\2\2\u0464\u0471\7\u01a0\2\2\u0465\u0471\7\u01a1\2\2\u0466\u0471"+
		"\7\u01a6\2\2\u0467\u0471\7\u01b9\2\2\u0468\u0471\7\u01ba\2\2\u0469\u0471"+
		"\7\u01c6\2\2\u046a\u046b\7\u01eb\2\2\u046b\u0471\7\u01be\2\2\u046c\u0471"+
		"\7\u0206\2\2\u046d\u0471\7\u0254\2\2\u046e\u0471\7\u0295\2\2\u046f\u0471"+
		"\7\u02e7\2\2\u0470\u0461\3\2\2\2\u0470\u0462\3\2\2\2\u0470\u0463\3\2\2"+
		"\2\u0470\u0464\3\2\2\2\u0470\u0465\3\2\2\2\u0470\u0466\3\2\2\2\u0470\u0467"+
		"\3\2\2\2\u0470\u0468\3\2\2\2\u0470\u0469\3\2\2\2\u0470\u046a\3\2\2\2\u0470"+
		"\u046c\3\2\2\2\u0470\u046d\3\2\2\2\u0470\u046e\3\2\2\2\u0470\u046f\3\2"+
		"\2\2\u0471\u052f\3\2\2\2\u0472\u052f\7\u0157\2\2\u0473\u052f\7\u015b\2"+
		"\2\u0474\u052f\7\u015d\2\2\u0475\u052f\7\u015e\2\2\u0476\u052f\7\u0166"+
		"\2\2\u0477\u052f\7\u0167\2\2\u0478\u052f\7\u0168\2\2\u0479\u052f\7\u0169"+
		"\2\2\u047a\u052f\7\u016a\2\2\u047b\u052f\7\u016c\2\2\u047c\u052f\7\u016d"+
		"\2\2\u047d\u052f\7\u0172\2\2\u047e\u052f\7\u017a\2\2\u047f\u052f\7\u017f"+
		"\2\2\u0480\u052f\7\u0184\2\2\u0481\u052f\7\u0186\2\2\u0482\u052f\7\u0188"+
		"\2\2\u0483\u052f\7\u0191\2\2\u0484\u052f\7\u0192\2\2\u0485\u052f\7\u0198"+
		"\2\2\u0486\u052f\7\u019b\2\2\u0487\u052f\7\u01a2\2\2\u0488\u052f\7\u01a3"+
		"\2\2\u0489\u052f\7\u01aa\2\2\u048a\u052f\7\u01ac\2\2\u048b\u052f\7\u01ad"+
		"\2\2\u048c\u052f\7\u01ae\2\2\u048d\u052f\7\u01af\2\2\u048e\u052f\7\u01b2"+
		"\2\2\u048f\u052f\7\u01b7\2\2\u0490\u052f\7\u01b8\2\2\u0491\u052f\7\u01bb"+
		"\2\2\u0492\u052f\7\u01bd\2\2\u0493\u052f\7\u01bf\2\2\u0494\u052f\7\u01c1"+
		"\2\2\u0495\u052f\7\u01c2\2\2\u0496\u052f\7\u01c3\2\2\u0497\u052f\7\u01c4"+
		"\2\2\u0498\u052f\7\u01d1\2\2\u0499\u052f\7\u01d5\2\2\u049a\u052f\7\u01d3"+
		"\2\2\u049b\u052f\7\u01d4\2\2\u049c\u052f\7\u01e5\2\2\u049d\u052f\7\u01e6"+
		"\2\2\u049e\u052f\7\u01e7\2\2\u049f\u052f\7\u01ef\2\2\u04a0\u052f\7\u01f1"+
		"\2\2\u04a1\u052f\7\u01f5\2\2\u04a2\u052f\7\u01f6\2\2\u04a3\u052f\7\u01f8"+
		"\2\2\u04a4\u052f\7\u0339\2\2\u04a5\u052f\7\u0203\2\2\u04a6\u052f\7\u0209"+
		"\2\2\u04a7\u052f\7\u0210\2\2\u04a8\u052f\7\u0211\2\2\u04a9\u052f\7\u0214"+
		"\2\2\u04aa\u052f\7\u0215\2\2\u04ab\u052f\7\u0219\2\2\u04ac\u052f\7\u021b"+
		"\2\2\u04ad\u052f\7\u021c\2\2\u04ae\u052f\7\u0222\2\2\u04af\u052f\7\u0223"+
		"\2\2\u04b0\u052f\7\u0224\2\2\u04b1\u052f\7\u0225\2\2\u04b2\u052f\7\u0227"+
		"\2\2\u04b3\u052f\7\u022a\2\2\u04b4\u052f\7\u022e\2\2\u04b5\u052f\7\u0230"+
		"\2\2\u04b6\u052f\7\u0231\2\2\u04b7\u052f\7\u0239\2\2\u04b8\u052f\7\u023b"+
		"\2\2\u04b9\u052f\7\u023d\2\2\u04ba\u052f\7\u0249\2\2\u04bb\u052f\7\u024a"+
		"\2\2\u04bc\u052f\7\u024c\2\2\u04bd\u052f\7\u024e\2\2\u04be\u052f\7\u0251"+
		"\2\2\u04bf\u052f\7\u0254\2\2\u04c0\u052f\7\u0258\2\2\u04c1\u052f\7\u025e"+
		"\2\2\u04c2\u052f\7\u025f\2\2\u04c3\u052f\7\u0262\2\2\u04c4\u04c8\7\u0264"+
		"\2\2\u04c5\u04c6\7j\2\2\u04c6\u04c9\7\u0332\2\2\u04c7\u04c9\7\u0175\2"+
		"\2\u04c8\u04c5\3\2\2\2\u04c8\u04c7\3\2\2\2\u04c9\u052f\3\2\2\2\u04ca\u052f"+
		"\7\u0265\2\2\u04cb\u052f\7\u0266\2\2\u04cc\u052f\7\u0269\2\2\u04cd\u052f"+
		"\7\u026b\2\2\u04ce\u052f\7\u026d\2\2\u04cf\u052f\7\u0271\2\2\u04d0\u052f"+
		"\7\u0275\2\2\u04d1\u052f\7\u0276\2\2\u04d2\u052f\7\u0278\2\2\u04d3\u052f"+
		"\7\u0279\2\2\u04d4\u052f\7\u027b\2\2\u04d5\u052f\7\u0280\2\2\u04d6\u052f"+
		"\7\u0281\2\2\u04d7\u052f\7\u0282\2\2\u04d8\u052f\7\u0285\2\2\u04d9\u052f"+
		"\7\u0286\2\2\u04da\u052f\7\u028a\2\2\u04db\u052f\7\u028b\2\2\u04dc\u052f"+
		"\7\u028c\2\2\u04dd\u052f\7\u0292\2\2\u04de\u052f\7\u0293\2\2\u04df\u052f"+
		"\7\u0294\2\2\u04e0\u052f\7\u0297\2\2\u04e1\u052f\7\u0298\2\2\u04e2\u052f"+
		"\7\u028f\2\2\u04e3\u052f\7\u0299\2\2\u04e4\u052f\7\u02a5\2\2\u04e5\u052f"+
		"\7\u029d\2\2\u04e6\u052f\7\u029e\2\2\u04e7\u052f\7\u02a2\2\2\u04e8\u04e9"+
		"\7\u02a4\2\2\u04e9\u052f\7k\2\2\u04ea\u052f\7\u02a8\2\2\u04eb\u052f\7"+
		"\u02a9\2\2\u04ec\u052f\7\u02ae\2\2\u04ed\u052f\7\u02ac\2\2\u04ee\u052f"+
		"\7\u02ad\2\2\u04ef\u052f\7\u02b2\2\2\u04f0\u052f\7\u02b9\2\2\u04f1\u052f"+
		"\7\u02ba\2\2\u04f2\u052f\7\u02bb\2\2\u04f3\u052f\7\u02be\2\2\u04f4\u052f"+
		"\7\u02bf\2\2\u04f5\u052f\7\u02c0\2\2\u04f6\u052f\7\u02c5\2\2\u04f7\u052f"+
		"\7\u02c6\2\2\u04f8\u052f\7\u02c9\2\2\u04f9\u052f\7\u02ca\2\2\u04fa\u052f"+
		"\7\u02ce\2\2\u04fb\u052f\7\u02d3\2\2\u04fc\u052f\7\u02d5\2\2\u04fd\u052f"+
		"\7\u02d7\2\2\u04fe\u052f\7\u02d8\2\2\u04ff\u052f\7\u02e2\2\2\u0500\u052f"+
		"\7\u02e3\2\2\u0501\u052f\7\u02e4\2\2\u0502\u052f\7\u02e6\2\2\u0503\u052f"+
		"\7\u02ed\2\2\u0504\u052f\7\u02ef\2\2\u0505\u052f\7\u02ee\2\2\u0506\u052f"+
		"\7\u02f0\2\2\u0507\u052f\7\u02f1\2\2\u0508\u050c\7\u02f2\2\2\u0509\u050b"+
		"\n\2\2\2\u050a\u0509\3\2\2\2\u050b\u050e\3\2\2\2\u050c\u050a\3\2\2\2\u050c"+
		"\u050d\3\2\2\2\u050d\u050f\3\2\2\2\u050e\u050c\3\2\2\2\u050f\u051a\7\u0336"+
		"\2\2\u0510\u0514\7\u016e\2\2\u0511\u0513\n\2\2\2\u0512\u0511\3\2\2\2\u0513"+
		"\u0516\3\2\2\2\u0514\u0512\3\2\2\2\u0514\u0515\3\2\2\2\u0515\u0517\3\2"+
		"\2\2\u0516\u0514\3\2\2\2\u0517\u0519\7\u0336\2\2\u0518\u0510\3\2\2\2\u0519"+
		"\u051c\3\2\2\2\u051a\u0518\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u052f\3\2"+
		"\2\2\u051c\u051a\3\2\2\2\u051d\u052f\7\u02f4\2\2\u051e\u051f\7\u02f8\2"+
		"\2\u051f\u052f\t\r\2\2\u0520\u052f\7\u02f9\2\2\u0521\u052f\7\u02fe\2\2"+
		"\u0522\u052f\7\u0300\2\2\u0523\u052f\7\u0308\2\2\u0524\u052f\7\u02fb\2"+
		"\2\u0525\u052f\7\u0309\2\2\u0526\u052f\7\u030d\2\2\u0527\u052f\7\u030f"+
		"\2\2\u0528\u052f\7\u0311\2\2\u0529\u052f\7\u0312\2\2\u052a\u052f\7\u0314"+
		"\2\2\u052b\u052c\7\u0315\2\2\u052c\u052f\7\u0276\2\2\u052d\u052f\7\u0316"+
		"\2\2\u052e\u03b2\3\2\2\2\u052e\u03b3\3\2\2\2\u052e\u03b4\3\2\2\2\u052e"+
		"\u03b5\3\2\2\2\u052e\u03b6\3\2\2\2\u052e\u03bc\3\2\2\2\u052e\u03bd\3\2"+
		"\2\2\u052e\u03be\3\2\2\2\u052e\u03bf\3\2\2\2\u052e\u03c0\3\2\2\2\u052e"+
		"\u03c1\3\2\2\2\u052e\u03c2\3\2\2\2\u052e\u03c3\3\2\2\2\u052e\u03c4\3\2"+
		"\2\2\u052e\u03c5\3\2\2\2\u052e\u03c6\3\2\2\2\u052e\u03c7\3\2\2\2\u052e"+
		"\u03c8\3\2\2\2\u052e\u03c9\3\2\2\2\u052e\u03ca\3\2\2\2\u052e\u03cb\3\2"+
		"\2\2\u052e\u03cc\3\2\2\2\u052e\u03cd\3\2\2\2\u052e\u03ce\3\2\2\2\u052e"+
		"\u03cf\3\2\2\2\u052e\u03d0\3\2\2\2\u052e\u03d1\3\2\2\2\u052e\u03d2\3\2"+
		"\2\2\u052e\u03d3\3\2\2\2\u052e\u03d4\3\2\2\2\u052e\u03d5\3\2\2\2\u052e"+
		"\u03d6\3\2\2\2\u052e\u03d7\3\2\2\2\u052e\u03d8\3\2\2\2\u052e\u03d9\3\2"+
		"\2\2\u052e\u03da\3\2\2\2\u052e\u03db\3\2\2\2\u052e\u03dc\3\2\2\2\u052e"+
		"\u03dd\3\2\2\2\u052e\u03de\3\2\2\2\u052e\u03df\3\2\2\2\u052e\u03e0\3\2"+
		"\2\2\u052e\u03e1\3\2\2\2\u052e\u03e2\3\2\2\2\u052e\u03e3\3\2\2\2\u052e"+
		"\u03e4\3\2\2\2\u052e\u03eb\3\2\2\2\u052e\u03ec\3\2\2\2\u052e\u03ed\3\2"+
		"\2\2\u052e\u03ee\3\2\2\2\u052e\u03ef\3\2\2\2\u052e\u03f0\3\2\2\2\u052e"+
		"\u03f1\3\2\2\2\u052e\u03f2\3\2\2\2\u052e\u03f3\3\2\2\2\u052e\u03f4\3\2"+
		"\2\2\u052e\u03f5\3\2\2\2\u052e\u03f6\3\2\2\2\u052e\u03f7\3\2\2\2\u052e"+
		"\u03f8\3\2\2\2\u052e\u03f9\3\2\2\2\u052e\u03fa\3\2\2\2\u052e\u03fb\3\2"+
		"\2\2\u052e\u03fc\3\2\2\2\u052e\u03fd\3\2\2\2\u052e\u03fe\3\2\2\2\u052e"+
		"\u03ff\3\2\2\2\u052e\u0400\3\2\2\2\u052e\u0401\3\2\2\2\u052e\u0402\3\2"+
		"\2\2\u052e\u0403\3\2\2\2\u052e\u0404\3\2\2\2\u052e\u0405\3\2\2\2\u052e"+
		"\u0406\3\2\2\2\u052e\u0407\3\2\2\2\u052e\u0408\3\2\2\2\u052e\u0409\3\2"+
		"\2\2\u052e\u040a\3\2\2\2\u052e\u040b\3\2\2\2\u052e\u040c\3\2\2\2\u052e"+
		"\u040d\3\2\2\2\u052e\u040e\3\2\2\2\u052e\u040f\3\2\2\2\u052e\u0410\3\2"+
		"\2\2\u052e\u0411\3\2\2\2\u052e\u0412\3\2\2\2\u052e\u0413\3\2\2\2\u052e"+
		"\u0414\3\2\2\2\u052e\u0415\3\2\2\2\u052e\u0416\3\2\2\2\u052e\u0417\3\2"+
		"\2\2\u052e\u0418\3\2\2\2\u052e\u0419\3\2\2\2\u052e\u041a\3\2\2\2\u052e"+
		"\u041b\3\2\2\2\u052e\u041c\3\2\2\2\u052e\u041d\3\2\2\2\u052e\u041e\3\2"+
		"\2\2\u052e\u041f\3\2\2\2\u052e\u0420\3\2\2\2\u052e\u0421\3\2\2\2\u052e"+
		"\u0422\3\2\2\2\u052e\u045f\3\2\2\2\u052e\u0460\3\2\2\2\u052e\u0472\3\2"+
		"\2\2\u052e\u0473\3\2\2\2\u052e\u0474\3\2\2\2\u052e\u0475\3\2\2\2\u052e"+
		"\u0476\3\2\2\2\u052e\u0477\3\2\2\2\u052e\u0478\3\2\2\2\u052e\u0479\3\2"+
		"\2\2\u052e\u047a\3\2\2\2\u052e\u047b\3\2\2\2\u052e\u047c\3\2\2\2\u052e"+
		"\u047d\3\2\2\2\u052e\u047e\3\2\2\2\u052e\u047f\3\2\2\2\u052e\u0480\3\2"+
		"\2\2\u052e\u0481\3\2\2\2\u052e\u0482\3\2\2\2\u052e\u0483\3\2\2\2\u052e"+
		"\u0484\3\2\2\2\u052e\u0485\3\2\2\2\u052e\u0486\3\2\2\2\u052e\u0487\3\2"+
		"\2\2\u052e\u0488\3\2\2\2\u052e\u0489\3\2\2\2\u052e\u048a\3\2\2\2\u052e"+
		"\u048b\3\2\2\2\u052e\u048c\3\2\2\2\u052e\u048d\3\2\2\2\u052e\u048e\3\2"+
		"\2\2\u052e\u048f\3\2\2\2\u052e\u0490\3\2\2\2\u052e\u0491\3\2\2\2\u052e"+
		"\u0492\3\2\2\2\u052e\u0493\3\2\2\2\u052e\u0494\3\2\2\2\u052e\u0495\3\2"+
		"\2\2\u052e\u0496\3\2\2\2\u052e\u0497\3\2\2\2\u052e\u0498\3\2\2\2\u052e"+
		"\u0499\3\2\2\2\u052e\u049a\3\2\2\2\u052e\u049b\3\2\2\2\u052e\u049c\3\2"+
		"\2\2\u052e\u049d\3\2\2\2\u052e\u049e\3\2\2\2\u052e\u049f\3\2\2\2\u052e"+
		"\u04a0\3\2\2\2\u052e\u04a1\3\2\2\2\u052e\u04a2\3\2\2\2\u052e\u04a3\3\2"+
		"\2\2\u052e\u04a4\3\2\2\2\u052e\u04a5\3\2\2\2\u052e\u04a6\3\2\2\2\u052e"+
		"\u04a7\3\2\2\2\u052e\u04a8\3\2\2\2\u052e\u04a9\3\2\2\2\u052e\u04aa\3\2"+
		"\2\2\u052e\u04ab\3\2\2\2\u052e\u04ac\3\2\2\2\u052e\u04ad\3\2\2\2\u052e"+
		"\u04ae\3\2\2\2\u052e\u04af\3\2\2\2\u052e\u04b0\3\2\2\2\u052e\u04b1\3\2"+
		"\2\2\u052e\u04b2\3\2\2\2\u052e\u04b3\3\2\2\2\u052e\u04b4\3\2\2\2\u052e"+
		"\u04b5\3\2\2\2\u052e\u04b6\3\2\2\2\u052e\u04b7\3\2\2\2\u052e\u04b8\3\2"+
		"\2\2\u052e\u04b9\3\2\2\2\u052e\u04ba\3\2\2\2\u052e\u04bb\3\2\2\2\u052e"+
		"\u04bc\3\2\2\2\u052e\u04bd\3\2\2\2\u052e\u04be\3\2\2\2\u052e\u04bf\3\2"+
		"\2\2\u052e\u04c0\3\2\2\2\u052e\u04c1\3\2\2\2\u052e\u04c2\3\2\2\2\u052e"+
		"\u04c3\3\2\2\2\u052e\u04c4\3\2\2\2\u052e\u04ca\3\2\2\2\u052e\u04cb\3\2"+
		"\2\2\u052e\u04cc\3\2\2\2\u052e\u04cd\3\2\2\2\u052e\u04ce\3\2\2\2\u052e"+
		"\u04cf\3\2\2\2\u052e\u04d0\3\2\2\2\u052e\u04d1\3\2\2\2\u052e\u04d2\3\2"+
		"\2\2\u052e\u04d3\3\2\2\2\u052e\u04d4\3\2\2\2\u052e\u04d5\3\2\2\2\u052e"+
		"\u04d6\3\2\2\2\u052e\u04d7\3\2\2\2\u052e\u04d8\3\2\2\2\u052e\u04d9\3\2"+
		"\2\2\u052e\u04da\3\2\2\2\u052e\u04db\3\2\2\2\u052e\u04dc\3\2\2\2\u052e"+
		"\u04dd\3\2\2\2\u052e\u04de\3\2\2\2\u052e\u04df\3\2\2\2\u052e\u04e0\3\2"+
		"\2\2\u052e\u04e1\3\2\2\2\u052e\u04e2\3\2\2\2\u052e\u04e3\3\2\2\2\u052e"+
		"\u04e4\3\2\2\2\u052e\u04e5\3\2\2\2\u052e\u04e6\3\2\2\2\u052e\u04e7\3\2"+
		"\2\2\u052e\u04e8\3\2\2\2\u052e\u04ea\3\2\2\2\u052e\u04eb\3\2\2\2\u052e"+
		"\u04ec\3\2\2\2\u052e\u04ed\3\2\2\2\u052e\u04ee\3\2\2\2\u052e\u04ef\3\2"+
		"\2\2\u052e\u04f0\3\2\2\2\u052e\u04f1\3\2\2\2\u052e\u04f2\3\2\2\2\u052e"+
		"\u04f3\3\2\2\2\u052e\u04f4\3\2\2\2\u052e\u04f5\3\2\2\2\u052e\u04f6\3\2"+
		"\2\2\u052e\u04f7\3\2\2\2\u052e\u04f8\3\2\2\2\u052e\u04f9\3\2\2\2\u052e"+
		"\u04fa\3\2\2\2\u052e\u04fb\3\2\2\2\u052e\u04fc\3\2\2\2\u052e\u04fd\3\2"+
		"\2\2\u052e\u04fe\3\2\2\2\u052e\u04ff\3\2\2\2\u052e\u0500\3\2\2\2\u052e"+
		"\u0501\3\2\2\2\u052e\u0502\3\2\2\2\u052e\u0503\3\2\2\2\u052e\u0504\3\2"+
		"\2\2\u052e\u0505\3\2\2\2\u052e\u0506\3\2\2\2\u052e\u0507\3\2\2\2\u052e"+
		"\u0508\3\2\2\2\u052e\u051d\3\2\2\2\u052e\u051e\3\2\2\2\u052e\u0520\3\2"+
		"\2\2\u052e\u0521\3\2\2\2\u052e\u0522\3\2\2\2\u052e\u0523\3\2\2\2\u052e"+
		"\u0524\3\2\2\2\u052e\u0525\3\2\2\2\u052e\u0526\3\2\2\2\u052e\u0527\3\2"+
		"\2\2\u052e\u0528\3\2\2\2\u052e\u0529\3\2\2\2\u052e\u052a\3\2\2\2\u052e"+
		"\u052b\3\2\2\2\u052e\u052d\3\2\2\2\u052f\u0533\3\2\2\2\u0530\u0532\n\2"+
		"\2\2\u0531\u0530\3\2\2\2\u0532\u0535\3\2\2\2\u0533\u0531\3\2\2\2\u0533"+
		"\u0534\3\2\2\2\u0534\u0536\3\2\2\2\u0535\u0533\3\2\2\2\u0536\u0537\7\u0336"+
		"\2\2\u0537\27\3\2\2\2\u0538\u0548\5@!\2\u0539\u0548\5\4\3\2\u053a\u0548"+
		"\5\6\4\2\u053b\u0548\5t;\2\u053c\u0548\5\20\t\2\u053d\u0548\5\22\n\2\u053e"+
		"\u0548\5\26\f\2\u053f\u0543\3\2\2\2\u0540\u0543\7\u0264\2\2\u0541\u0543"+
		"\7\u02a4\2\2\u0542\u053f\3\2\2\2\u0542\u0540\3\2\2\2\u0542\u0541\3\2\2"+
		"\2\u0543\u0544\3\2\2\2\u0544\u0548\7\u0336\2\2\u0545\u0548\5\36\20\2\u0546"+
		"\u0548\5 \21\2\u0547\u0538\3\2\2\2\u0547\u0539\3\2\2\2\u0547\u053a\3\2"+
		"\2\2\u0547\u053b\3\2\2\2\u0547\u053c\3\2\2\2\u0547\u053d\3\2\2\2\u0547"+
		"\u053e\3\2\2\2\u0547\u0542\3\2\2\2\u0547\u0545\3\2\2\2\u0547\u0546\3\2"+
		"\2\2\u0548\31\3\2\2\2\u0549\u055f\5> \2\u054a\u055f\5L\'\2\u054b\u055f"+
		"\5\n\6\2\u054c\u055f\5\u0164\u00b3\2\u054d\u055f\5P)\2\u054e\u055f\5V"+
		",\2\u054f\u055f\5^\60\2\u0550\u055f\5\f\7\2\u0551\u055f\5f\64\2\u0552"+
		"\u055f\5\16\b\2\u0553\u055f\5\u019e\u00d0\2\u0554\u055f\5r:\2\u0555\u055f"+
		"\5z>\2\u0556\u055f\5\30\r\2\u0557\u055f\5\u0084C\2\u0558\u055f\5\u01ea"+
		"\u00f6\2\u0559\u055f\5\u0146\u00a4\2\u055a\u055f\5\u01c2\u00e2\2\u055b"+
		"\u055f\5\u01d0\u00e9\2\u055c\u055f\5\u008cG\2\u055d\u055f\5\34\17\2\u055e"+
		"\u0549\3\2\2\2\u055e\u054a\3\2\2\2\u055e\u054b\3\2\2\2\u055e\u054c\3\2"+
		"\2\2\u055e\u054d\3\2\2\2\u055e\u054e\3\2\2\2\u055e\u054f\3\2\2\2\u055e"+
		"\u0550\3\2\2\2\u055e\u0551\3\2\2\2\u055e\u0552\3\2\2\2\u055e\u0553\3\2"+
		"\2\2\u055e\u0554\3\2\2\2\u055e\u0555\3\2\2\2\u055e\u0556\3\2\2\2\u055e"+
		"\u0557\3\2\2\2\u055e\u0558\3\2\2\2\u055e\u0559\3\2\2\2\u055e\u055a\3\2"+
		"\2\2\u055e\u055b\3\2\2\2\u055e\u055c\3\2\2\2\u055e\u055d\3\2\2\2\u055f"+
		"\33\3\2\2\2\u0560\u0564\7\u02b4\2\2\u0561\u0563\n\2\2\2\u0562\u0561\3"+
		"\2\2\2\u0563\u0566\3\2\2\2\u0564\u0562\3\2\2\2\u0564\u0565\3\2\2\2\u0565"+
		"\u0567\3\2\2\2\u0566\u0564\3\2\2\2\u0567\u0568\7\u0336\2\2\u0568\35\3"+
		"\2\2\2\u0569\u056a\7\u0306\2\2\u056a\u056b\7\u008e\2\2\u056b\u056c\n\2"+
		"\2\2\u056c\u0593\7\u0336\2\2\u056d\u056e\7\u014b\2\2\u056e\u0572\7\u0254"+
		"\2\2\u056f\u0571\n\2\2\2\u0570\u056f\3\2\2\2\u0571\u0574\3\2\2\2\u0572"+
		"\u0570\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0575\3\2\2\2\u0574\u0572\3\2"+
		"\2\2\u0575\u0592\7\u0336\2\2\u0576\u0577\7\u014b\2\2\u0577\u057b\7\u00c4"+
		"\2\2\u0578\u057a\n\2\2\2\u0579\u0578\3\2\2\2\u057a\u057d\3\2\2\2\u057b"+
		"\u0579\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057e\3\2\2\2\u057d\u057b\3\2"+
		"\2\2\u057e\u0592\7\u0336\2\2\u057f\u0580\7\u014b\2\2\u0580\u0584\7\u00c2"+
		"\2\2\u0581\u0583\n\2\2\2\u0582\u0581\3\2\2\2\u0583\u0586\3\2\2\2\u0584"+
		"\u0582\3\2\2\2\u0584\u0585\3\2\2\2\u0585\u0587\3\2\2\2\u0586\u0584\3\2"+
		"\2\2\u0587\u0592\7\u0336\2\2\u0588\u0589\7\u014b\2\2\u0589\u058d\7\u01bf"+
		"\2\2\u058a\u058c\n\2\2\2\u058b\u058a\3\2\2\2\u058c\u058f\3\2\2\2\u058d"+
		"\u058b\3\2\2\2\u058d\u058e\3\2\2\2\u058e\u0590\3\2\2\2\u058f\u058d\3\2"+
		"\2\2\u0590\u0592\7\u0336\2\2\u0591\u056d\3\2\2\2\u0591\u0576\3\2\2\2\u0591"+
		"\u057f\3\2\2\2\u0591\u0588\3\2\2\2\u0592\u0595\3\2\2\2\u0593\u0591\3\2"+
		"\2\2\u0593\u0594\3\2\2\2\u0594\37\3\2\2\2\u0595\u0593\3\2\2\2\u0596\u059a"+
		"\7\u0306\2\2\u0597\u0599\n\16\2\2\u0598\u0597\3\2\2\2\u0599\u059c\3\2"+
		"\2\2\u059a\u0598\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u059d\3\2\2\2\u059c"+
		"\u059a\3\2\2\2\u059d\u05a1\7\u0336\2\2\u059e\u05a0\5\24\13\2\u059f\u059e"+
		"\3\2\2\2\u05a0\u05a3\3\2\2\2\u05a1\u059f\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2"+
		"\u05a7\3\2\2\2\u05a3\u05a1\3\2\2\2\u05a4\u05a6\5\2\2\2\u05a5\u05a4\3\2"+
		"\2\2\u05a6\u05a9\3\2\2\2\u05a7\u05a5\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8"+
		"!\3\2\2\2\u05a9\u05a7\3\2\2\2\u05aa\u05ab\t\17\2\2\u05ab#\3\2\2\2\u05ac"+
		"\u05b3\7\u0317\2\2\u05ad\u05b3\7\u032b\2\2\u05ae\u05b3\7\u0149\2\2\u05af"+
		"\u05b3\7\u0176\2\2\u05b0\u05b3\7\u01db\2\2\u05b1\u05b3\7\u01dc\2\2\u05b2"+
		"\u05ac\3\2\2\2\u05b2\u05ad\3\2\2\2\u05b2\u05ae\3\2\2\2\u05b2\u05af\3\2"+
		"\2\2\u05b2\u05b0\3\2\2\2\u05b2\u05b1\3\2\2\2\u05b3%\3\2\2\2\u05b4\u05b6"+
		"\7\u00ad\2\2\u05b5\u05b7\7\u0347\2\2\u05b6\u05b5\3\2\2\2\u05b6\u05b7\3"+
		"\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\u05b9\7\u0336\2\2\u05b9\'\3\2\2\2\u05ba"+
		"\u05bb\6\25\2\3\u05bb\u05bc\t\20\2\2\u05bc)\3\2\2\2\u05bd\u05c0\7\u0318"+
		"\2\2\u05be\u05bf\7\u0330\2\2\u05bf\u05c1\7\u032b\2\2\u05c0\u05be\3\2\2"+
		"\2\u05c0\u05c1\3\2\2\2\u05c1+\3\2\2\2\u05c2\u05c4\7\u00e3\2\2\u05c3\u05c5"+
		"\5.\30\2\u05c4\u05c3\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c4\3\2\2\2\u05c6"+
		"\u05c7\3\2\2\2\u05c7\u05d3\3\2\2\2\u05c8\u05c9\7\u0122\2\2\u05c9\u05d3"+
		"\5.\30\2\u05ca\u05cb\7\u01cc\2\2\u05cb\u05d3\5.\30\2\u05cc\u05cd\7\u0183"+
		"\2\2\u05cd\u05d3\5.\30\2\u05ce\u05cf\7\u0233\2\2\u05cf\u05d0\5.\30\2\u05d0"+
		"\u05d1\5.\30\2\u05d1\u05d3\3\2\2\2\u05d2\u05c2\3\2\2\2\u05d2\u05c8\3\2"+
		"\2\2\u05d2\u05ca\3\2\2\2\u05d2\u05cc\3\2\2\2\u05d2\u05ce\3\2\2\2\u05d3"+
		"-\3\2\2\2\u05d4\u05d5\t\21\2\2\u05d5/\3\2\2\2\u05d6\u05d7\t\22\2\2\u05d7"+
		"\61\3\2\2\2\u05d8\u05dd\5\64\33\2\u05d9\u05da\7\u0326\2\2\u05da\u05dc"+
		"\5\64\33\2\u05db\u05d9\3\2\2\2\u05dc\u05df\3\2\2\2\u05dd\u05db\3\2\2\2"+
		"\u05dd\u05de\3\2\2\2\u05de\u05e2\3\2\2\2\u05df\u05dd\3\2\2\2\u05e0\u05e2"+
		"\7\u01e0\2\2\u05e1\u05d8\3\2\2\2\u05e1\u05e0\3\2\2\2\u05e2\63\3\2\2\2"+
		"\u05e3\u05e6\7\u032b\2\2\u05e4\u05e5\7\u0329\2\2\u05e5\u05e7\7\u032b\2"+
		"\2\u05e6\u05e4\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\65\3\2\2\2\u05e8\u05e9"+
		"\t\23\2\2\u05e9\67\3\2\2\2\u05ea\u05eb\7\u0332\2\2\u05eb\u05f2\7\u0332"+
		"\2\2\u05ec\u05f2\7\61\2\2\u05ed\u05ee\7\u012e\2\2\u05ee\u05f2\7\u0332"+
		"\2\2\u05ef\u05f2\7\u0333\2\2\u05f0\u05f2\7\u0335\2\2\u05f1\u05ea\3\2\2"+
		"\2\u05f1\u05ec\3\2\2\2\u05f1\u05ed\3\2\2\2\u05f1\u05ef\3\2\2\2\u05f1\u05f0"+
		"\3\2\2\2\u05f29\3\2\2\2\u05f3\u05f4\7\24\2\2\u05f4\u05f5\7\3\2\2\u05f5"+
		"\u05f6\5<\37\2\u05f6\u05fa\b\36\1\2\u05f7\u05f8\6\36\3\3\u05f8\u05fb\5"+
		":\36\2\u05f9\u05fb\6\36\4\3\u05fa\u05f7\3\2\2\2\u05fa\u05f9\3\2\2\2\u05fb"+
		";\3\2\2\2\u05fc\u0605\5\"\22\2\u05fd\u0601\7a\2\2\u05fe\u0600\n\2\2\2"+
		"\u05ff\u05fe\3\2\2\2\u0600\u0603\3\2\2\2\u0601\u05ff\3\2\2\2\u0601\u0602"+
		"\3\2\2\2\u0602\u0606\3\2\2\2\u0603\u0601\3\2\2\2\u0604\u0606\7\u01ec\2"+
		"\2\u0605\u05fd\3\2\2\2\u0605\u0604\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u0607"+
		"\3\2\2\2\u0607\u0608\7\u0336\2\2\u0608=\3\2\2\2\u0609\u060a\5:\36\2\u060a"+
		"?\3\2\2\2\u060b\u060f\78\2\2\u060c\u060e\n\2\2\2\u060d\u060c\3\2\2\2\u060e"+
		"\u0611\3\2\2\2\u060f\u060d\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u0612\3\2"+
		"\2\2\u0611\u060f\3\2\2\2\u0612\u0616\7\u0336\2\2\u0613\u0615\5B\"\2\u0614"+
		"\u0613\3\2\2\2\u0615\u0618\3\2\2\2\u0616\u0614\3\2\2\2\u0616\u0617\3\2"+
		"\2\2\u0617A\3\2\2\2\u0618\u0616\3\2\2\2\u0619\u061a\7\u032b\2\2\u061a"+
		"\u061e\t\24\2\2\u061b\u061d\n\2\2\2\u061c\u061b\3\2\2\2\u061d\u0620\3"+
		"\2\2\2\u061e\u061c\3\2\2\2\u061e\u061f\3\2\2\2\u061f\u0621\3\2\2\2\u0620"+
		"\u061e\3\2\2\2\u0621\u0622\7\u0336\2\2\u0622C\3\2\2\2\u0623\u0643\7\u00d5"+
		"\2\2\u0624\u0643\7\u00d6\2\2\u0625\u0643\7\u00d4\2\2\u0626\u0643\7\u00e7"+
		"\2\2\u0627\u0643\7\u010e\2\2\u0628\u0643\7\u0130\2\2\u0629\u0643\7\u0131"+
		"\2\2\u062a\u0643\7\u017b\2\2\u062b\u0643\7\u017d\2\2\u062c\u0643\7\u01a7"+
		"\2\2\u062d\u0643\7\u01a8\2\2\u062e\u0643\7\u01a9\2\2\u062f\u0643\7\u01c7"+
		"\2\2\u0630\u0643\7\u01c8\2\2\u0631\u0643\7\u01d6\2\2\u0632\u0643\7\u01cd"+
		"\2\2\u0633\u0643\7\u01f0\2\2\u0634\u0643\7\u01f2\2\2\u0635\u0643\7\u0213"+
		"\2\2\u0636\u0643\7\u023c\2\2\u0637\u0643\7\u025a\2\2\u0638\u0643\7\u025c"+
		"\2\2\u0639\u0643\7\u0260\2\2\u063a\u0643\7\u0296\2\2\u063b\u0643\7\u02cd"+
		"\2\2\u063c\u0643\7\u02d6\2\2\u063d\u0643\7\u02df\2\2\u063e\u063f\7\u02de"+
		"\2\2\u063f\u0640\7\u00e3\2\2\u0640\u0643\7\u032b\2\2\u0641\u0643\7\u02e9"+
		"\2\2\u0642\u0623\3\2\2\2\u0642\u0624\3\2\2\2\u0642\u0625\3\2\2\2\u0642"+
		"\u0626\3\2\2\2\u0642\u0627\3\2\2\2\u0642\u0628\3\2\2\2\u0642\u0629\3\2"+
		"\2\2\u0642\u062a\3\2\2\2\u0642\u062b\3\2\2\2\u0642\u062c\3\2\2\2\u0642"+
		"\u062d\3\2\2\2\u0642\u062e\3\2\2\2\u0642\u062f\3\2\2\2\u0642\u0630\3\2"+
		"\2\2\u0642\u0631\3\2\2\2\u0642\u0632\3\2\2\2\u0642\u0633\3\2\2\2\u0642"+
		"\u0634\3\2\2\2\u0642\u0635\3\2\2\2\u0642\u0636\3\2\2\2\u0642\u0637\3\2"+
		"\2\2\u0642\u0638\3\2\2\2\u0642\u0639\3\2\2\2\u0642\u063a\3\2\2\2\u0642"+
		"\u063b\3\2\2\2\u0642\u063c\3\2\2\2\u0642\u063d\3\2\2\2\u0642\u063e\3\2"+
		"\2\2\u0642\u0641\3\2\2\2\u0643E\3\2\2\2\u0644\u0645\7\u014b\2\2\u0645"+
		"\u0646\7\24\2\2\u0646\u0647\7\u00f7\2\2\u0647\u0648\n\2\2\2\u0648\u064d"+
		"\7\u0336\2\2\u0649\u064c\5N(\2\u064a\u064c\5H%\2\u064b\u0649\3\2\2\2\u064b"+
		"\u064a\3\2\2\2\u064c\u064f\3\2\2\2\u064d\u064b\3\2\2\2\u064d\u064e\3\2"+
		"\2\2\u064eG\3\2\2\2\u064f\u064d\3\2\2\2\u0650\u0651\5\"\22\2\u0651\u0652"+
		"\5\60\31\2\u0652\u0654\58\35\2\u0653\u0655\5,\27\2\u0654\u0653\3\2\2\2"+
		"\u0654\u0655\3\2\2\2\u0655\u0656\3\2\2\2\u0656\u0658\58\35\2\u0657\u0659"+
		"\5,\27\2\u0658\u0657\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065a\3\2\2\2\u065a"+
		"\u065b\7\u0241\2\2\u065b\u0660\3\2\2\2\u065c\u0660\7\u00d0\2\2\u065d\u0660"+
		"\7\u00e8\2\2\u065e\u0660\7\u0242\2\2\u065f\u0650\3\2\2\2\u065f\u065c\3"+
		"\2\2\2\u065f\u065d\3\2\2\2\u065f\u065e\3\2\2\2\u0660\u0664\3\2\2\2\u0661"+
		"\u0663\n\2\2\2\u0662\u0661\3\2\2\2\u0663\u0666\3\2\2\2\u0664\u0662\3\2"+
		"\2\2\u0664\u0665\3\2\2\2\u0665\u0667\3\2\2\2\u0666\u0664\3\2\2\2\u0667"+
		"\u0668\7\u0336\2\2\u0668I\3\2\2\2\u0669\u066a\7\24\2\2\u066a\u066d\7\4"+
		"\2\2\u066b\u066e\5N(\2\u066c\u066e\5H%\2\u066d\u066b\3\2\2\2\u066d\u066c"+
		"\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0673\b&\1\2\u0670\u0671\6&\5\3\u0671"+
		"\u0674\5J&\2\u0672\u0674\6&\6\3\u0673\u0670\3\2\2\2\u0673\u0672\3\2\2"+
		"\2\u0674K\3\2\2\2\u0675\u0678\5F$\2\u0676\u0678\5J&\2\u0677\u0675\3\2"+
		"\2\2\u0677\u0676\3\2\2\2\u0678M\3\2\2\2\u0679\u067a\5\"\22\2\u067a\u067b"+
		"\5\60\31\2\u067b\u067d\58\35\2\u067c\u067e\5,\27\2\u067d\u067c\3\2\2\2"+
		"\u067d\u067e\3\2\2\2\u067e\u067f\3\2\2\2\u067f\u0681\58\35\2\u0680\u0682"+
		"\5,\27\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0684\3\2\2\2\u0683"+
		"\u0685\5D#\2\u0684\u0683\3\2\2\2\u0684\u0685\3\2\2\2\u0685\u0686\3\2\2"+
		"\2\u0686\u0687\7\u0336\2\2\u0687O\3\2\2\2\u0688\u0689\5R*\2\u0689Q\3\2"+
		"\2\2\u068a\u068b\7\u014b\2\2\u068b\u068c\79\2\2\u068c\u068d\7\24\2\2\u068d"+
		"\u068e\13\2\2\2\u068e\u068f\5T+\2\u068f\u0693\b*\1\2\u0690\u0691\6*\7"+
		"\3\u0691\u0694\5R*\2\u0692\u0694\6*\b\3\u0693\u0690\3\2\2\2\u0693\u0692"+
		"\3\2\2\2\u0694S\3\2\2\2\u0695\u0697\5\"\22\2\u0696\u0698\n\2\2\2\u0697"+
		"\u0696\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u0697\3\2\2\2\u0699\u069a\3\2"+
		"\2\2\u069a\u069b\3\2\2\2\u069b\u069c\7\u0336\2\2\u069cU\3\2\2\2\u069d"+
		"\u06a0\5X-\2\u069e\u06a0\5Z.\2\u069f\u069d\3\2\2\2\u069f\u069e\3\2\2\2"+
		"\u06a0W\3\2\2\2\u06a1\u06a2\7\u014b\2\2\u06a2\u06a3\7\u0087\2\2\u06a3"+
		"\u06a4\7\u00f4\2\2\u06a4\u06a5\7\u0318\2\2\u06a5\u06a6\5\\/\2\u06a6\u06aa"+
		"\b-\1\2\u06a7\u06a8\6-\t\3\u06a8\u06ab\5X-\2\u06a9\u06ab\6-\n\3\u06aa"+
		"\u06a7\3\2\2\2\u06aa\u06a9\3\2\2\2\u06abY\3\2\2\2\u06ac\u06ad\7\u014b"+
		"\2\2\u06ad\u06ae\7\u0087\2\2\u06ae\u06af\7\13\2\2\u06af\u06b0\5\\/\2\u06b0"+
		"\u06b4\b.\1\2\u06b1\u06b2\6.\13\3\u06b2\u06b5\5Z.\2\u06b3\u06b5\6.\f\3"+
		"\u06b4\u06b1\3\2\2\2\u06b4\u06b3\3\2\2\2\u06b5[\3\2\2\2\u06b6\u06b8\5"+
		"\"\22\2\u06b7\u06b9\n\2\2\2\u06b8\u06b7\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba"+
		"\u06b8\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06bd\7\u0336"+
		"\2\2\u06bd]\3\2\2\2\u06be\u06c1\5`\61\2\u06bf\u06c1\5b\62\2\u06c0\u06be"+
		"\3\2\2\2\u06c0\u06bf\3\2\2\2\u06c1_\3\2\2\2\u06c2\u06c3\7\u014b\2\2\u06c3"+
		"\u06c4\7\u0087\2\2\u06c4\u06c5\7\u02a0\2\2\u06c5\u06c6\7\u0318\2\2\u06c6"+
		"\u06c7\5d\63\2\u06c7\u06cb\b\61\1\2\u06c8\u06c9\6\61\r\3\u06c9\u06cc\5"+
		"`\61\2\u06ca\u06cc\6\61\16\3\u06cb\u06c8\3\2\2\2\u06cb\u06ca\3\2\2\2\u06cc"+
		"a\3\2\2\2\u06cd\u06ce\7\u014b\2\2\u06ce\u06cf\7\u0087\2\2\u06cf\u06d0"+
		"\7\f\2\2\u06d0\u06d1\5d\63\2\u06d1\u06d5\b\62\1\2\u06d2\u06d3\6\62\17"+
		"\3\u06d3\u06d6\5b\62\2\u06d4\u06d6\6\62\20\3\u06d5\u06d2\3\2\2\2\u06d5"+
		"\u06d4\3\2\2\2\u06d6c\3\2\2\2\u06d7\u06d9\5\"\22\2\u06d8\u06da\5$\23\2"+
		"\u06d9\u06d8\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u06d9\3\2\2\2\u06db\u06dc"+
		"\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06de\7\u0336\2\2\u06dee\3\2\2\2\u06df"+
		"\u06e0\5h\65\2\u06e0g\3\2\2\2\u06e1\u06e2\t\n\2\2\u06e2\u06e3\7\u021f"+
		"\2\2\u06e3\u06e6\7\u0318\2\2\u06e4\u06e7\5l\67\2\u06e5\u06e7\5j\66\2\u06e6"+
		"\u06e4\3\2\2\2\u06e6\u06e5\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8\u06ec\b\65"+
		"\1\2\u06e9\u06ea\6\65\21\3\u06ea\u06ed\5h\65\2\u06eb\u06ed\6\65\22\3\u06ec"+
		"\u06e9\3\2\2\2\u06ec\u06eb\3\2\2\2\u06edi\3\2\2\2\u06ee\u06ef\5&\24\2"+
		"\u06efk\3\2\2\2\u06f0\u06f1\7\u0272\2\2\u06f1\u06f3\7\u032b\2\2\u06f2"+
		"\u06f0\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4\u06f7\5\""+
		"\22\2\u06f5\u06f8\7\u0333\2\2\u06f6\u06f8\7\u0335\2\2\u06f7\u06f5\3\2"+
		"\2\2\u06f7\u06f6\3\2\2\2\u06f8\u0701\3\2\2\2\u06f9\u06fa\7\u0118\2\2\u06fa"+
		"\u0700\7\u032b\2\2\u06fb\u06fc\7\u0163\2\2\u06fc\u0700\7\u032b\2\2\u06fd"+
		"\u06fe\7\u00e3\2\2\u06fe\u0700\7\u032b\2\2\u06ff\u06f9\3\2\2\2\u06ff\u06fb"+
		"\3\2\2\2\u06ff\u06fd\3\2\2\2\u0700\u0703\3\2\2\2\u0701\u06ff\3\2\2\2\u0701"+
		"\u0702\3\2\2\2\u0702\u0704\3\2\2\2\u0703\u0701\3\2\2\2\u0704\u0705\7\u0336"+
		"\2\2\u0705m\3\2\2\2\u0706\u0707\7\24\2\2\u0707\u0708\7\7\2\2\u0708\u0709"+
		"\5p9\2\u0709\u070d\b8\1\2\u070a\u070b\68\23\3\u070b\u070e\5n8\2\u070c"+
		"\u070e\68\24\3\u070d\u070a\3\2\2\2\u070d\u070c\3\2\2\2\u070eo\3\2\2\2"+
		"\u070f\u0713\5\"\22\2\u0710\u0712\n\2\2\2\u0711\u0710\3\2\2\2\u0712\u0715"+
		"\3\2\2\2\u0713\u0711\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u0716\3\2\2\2\u0715"+
		"\u0713\3\2\2\2\u0716\u0717\7\u0336\2\2\u0717q\3\2\2\2\u0718\u0719\5n8"+
		"\2\u0719s\3\2\2\2\u071a\u071e\7\u0184\2\2\u071b\u071d\n\2\2\2\u071c\u071b"+
		"\3\2\2\2\u071d\u0720\3\2\2\2\u071e\u071c\3\2\2\2\u071e\u071f\3\2\2\2\u071f"+
		"\u0721\3\2\2\2\u0720\u071e\3\2\2\2\u0721\u0725\7\u0336\2\2\u0722\u0724"+
		"\5v<\2\u0723\u0722\3\2\2\2\u0724\u0727\3\2\2\2\u0725\u0723\3\2\2\2\u0725"+
		"\u0726\3\2\2\2\u0726u\3\2\2\2\u0727\u0725\3\2\2\2\u0728\u0729\7\u032b"+
		"\2\2\u0729\u072d\t\24\2\2\u072a\u072c\n\2\2\2\u072b\u072a\3\2\2\2\u072c"+
		"\u072f\3\2\2\2\u072d\u072b\3\2\2\2\u072d\u072e\3\2\2\2\u072e\u0730\3\2"+
		"\2\2\u072f\u072d\3\2\2\2\u0730\u0731\7\u0336\2\2\u0731w\3\2\2\2\u0732"+
		"\u0733\7\u032b\2\2\u0733\u0737\7\u0242\2\2\u0734\u0736\n\2\2\2\u0735\u0734"+
		"\3\2\2\2\u0736\u0739\3\2\2\2\u0737\u0735\3\2\2\2\u0737\u0738\3\2\2\2\u0738"+
		"\u073a\3\2\2\2\u0739\u0737\3\2\2\2\u073a\u073b\7\u0336\2\2\u073by\3\2"+
		"\2\2\u073c\u073d\t\n\2\2\u073d\u073e\7\24\2\2\u073e\u073f\n\2\2\2\u073f"+
		"\u0745\7\u0336\2\2\u0740\u0744\5~@\2\u0741\u0744\5x=\2\u0742\u0744\5|"+
		"?\2\u0743\u0740\3\2\2\2\u0743\u0741\3\2\2\2\u0743\u0742\3\2\2\2\u0744"+
		"\u0747\3\2\2\2\u0745\u0743\3\2\2\2\u0745\u0746\3\2\2\2";
	private static final String _serializedATNSegment1 =
		"\u0746{\3\2\2\2\u0747\u0745\3\2\2\2\u0748\u074c\7\u02a3\2\2\u0749\u074b"+
		"\n\2\2\2\u074a\u0749\3\2\2\2\u074b\u074e\3\2\2\2\u074c\u074a\3\2\2\2\u074c"+
		"\u074d\3\2\2\2\u074d\u074f\3\2\2\2\u074e\u074c\3\2\2\2\u074f\u0750\7\u0336"+
		"\2\2\u0750}\3\2\2\2\u0751\u0752\7\u032b\2\2\u0752\u0753\5N(\2\u0753\177"+
		"\3\2\2\2\u0754\u0755\7\24\2\2\u0755\u0756\7\t\2\2\u0756\u0757\5\u0082"+
		"B\2\u0757\u075b\bA\1\2\u0758\u0759\6A\25\3\u0759\u075c\5\u0080A\2\u075a"+
		"\u075c\6A\26\3\u075b\u0758\3\2\2\2\u075b\u075a\3\2\2\2\u075c\u0081\3\2"+
		"\2\2\u075d\u0761\5\"\22\2\u075e\u0760\n\2\2\2\u075f\u075e\3\2\2\2\u0760"+
		"\u0763\3\2\2\2\u0761\u075f\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u0764\3\2"+
		"\2\2\u0763\u0761\3\2\2\2\u0764\u0765\7\u0336\2\2\u0765\u0083\3\2\2\2\u0766"+
		"\u0767\5\u0080A\2\u0767\u0085\3\2\2\2\u0768\u0769\7\u0242\2\2\u0769\u076a"+
		"\7\u034f\2\2\u076a\u0773\7\u0336\2\2\u076b\u076c\5\"\22\2\u076c\u076e"+
		"\7\u0332\2\2\u076d\u076f\7\u017b\2\2\u076e\u076d\3\2\2\2\u076e\u076f\3"+
		"\2\2\2\u076f\u0770\3\2\2\2\u0770\u0771\7\u0336\2\2\u0771\u0773\3\2\2\2"+
		"\u0772\u0768\3\2\2\2\u0772\u076b\3\2\2\2\u0773\u0087\3\2\2\2\u0774\u0775"+
		"\7\u014b\2\2\u0775\u0776\7\24\2\2\u0776\u0777\7\u02a0\2\2\u0777\u0778"+
		"\n\2\2\2\u0778\u077d\7\u0336\2\2\u0779\u077c\5\u008eH\2\u077a\u077c\5"+
		"\u0086D\2\u077b\u0779\3\2\2\2\u077b\u077a\3\2\2\2\u077c\u077f\3\2\2\2"+
		"\u077d\u077b\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u0089\3\2\2\2\u077f\u077d"+
		"\3\2\2\2\u0780\u0781\7\24\2\2\u0781\u0784\7\n\2\2\u0782\u0785\5\u008e"+
		"H\2\u0783\u0785\5\u0086D\2\u0784\u0782\3\2\2\2\u0784\u0783\3\2\2\2\u0785"+
		"\u0786\3\2\2\2\u0786\u078a\bF\1\2\u0787\u0788\6F\27\3\u0788\u078b\5\u008a"+
		"F\2\u0789\u078b\6F\30\3\u078a\u0787\3\2\2\2\u078a\u0789\3\2\2\2\u078b"+
		"\u008b\3\2\2\2\u078c\u078f\5\u0088E\2\u078d\u078f\5\u008aF\2\u078e\u078c"+
		"\3\2\2\2\u078e\u078d\3\2\2\2\u078f\u008d\3\2\2\2\u0790\u0791\5\"\22\2"+
		"\u0791\u0793\58\35\2\u0792\u0794\7\u017b\2\2\u0793\u0792\3\2\2\2\u0793"+
		"\u0794\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u0796\7\u0336\2\2\u0796\u008f"+
		"\3\2\2\2\u0797\u0798\7!\2\2\u0798\u079a\t\25\2\2\u0799\u079b\t\26\2\2"+
		"\u079a\u0799\3\2\2\2\u079a\u079b\3\2\2\2\u079b\u079e\3\2\2\2\u079c\u079d"+
		"\7\u0306\2\2\u079d\u079f\7\u0318\2\2\u079e\u079c\3\2\2\2\u079e\u079f\3"+
		"\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a1\7\u0336\2\2\u07a1\u07a4\5\u0092"+
		"J\2\u07a2\u07a3\7\u00f0\2\2\u07a3\u07a5\7\u0336\2\2\u07a4\u07a2\3\2\2"+
		"\2\u07a4\u07a5\3\2\2\2\u07a5\u0091\3\2\2\2\u07a6\u07a8\5\u0096L\2\u07a7"+
		"\u07a6\3\2\2\2\u07a8\u07ab\3\2\2\2\u07a9\u07a7\3\2\2\2\u07a9\u07aa\3\2"+
		"\2\2\u07aa\u0093\3\2\2\2\u07ab\u07a9\3\2\2\2\u07ac\u07ad\5\u0090I\2\u07ad"+
		"\u0095\3\2\2\2\u07ae\u07c6\5\u0098M\2\u07af\u07c6\5\u00a2R\2\u07b0\u07c6"+
		"\5\u00a8U\2\u07b1\u07c6\5\u00aaV\2\u07b2\u07c6\5\u00b0Y\2\u07b3\u07c6"+
		"\5\u00b6\\\2\u07b4\u07c6\5\u00bc_\2\u07b5\u07c6\5\u00c2b\2\u07b6\u07c6"+
		"\5\u00d6l\2\u07b7\u07c6\5\u00e2r\2\u07b8\u07c6\5\u00e8u\2\u07b9\u07c6"+
		"\5\u00eex\2\u07ba\u07c6\5\u00f4{\2\u07bb\u07c6\5\u00fa~\2\u07bc\u07c6"+
		"\5\u0102\u0082\2\u07bd\u07c6\5\u0104\u0083\2\u07be\u07c6\5\u010a\u0086"+
		"\2\u07bf\u07c6\5\u0112\u008a\2\u07c0\u07c6\5\u0118\u008d\2\u07c1\u07c6"+
		"\5\u0120\u0091\2\u07c2\u07c6\5\u012e\u0098\2\u07c3\u07c6\5\u0134\u009b"+
		"\2\u07c4\u07c6\5\u0140\u00a1\2\u07c5\u07ae\3\2\2\2\u07c5\u07af\3\2\2\2"+
		"\u07c5\u07b0\3\2\2\2\u07c5\u07b1\3\2\2\2\u07c5\u07b2\3\2\2\2\u07c5\u07b3"+
		"\3\2\2\2\u07c5\u07b4\3\2\2\2\u07c5\u07b5\3\2\2\2\u07c5\u07b6\3\2\2\2\u07c5"+
		"\u07b7\3\2\2\2\u07c5\u07b8\3\2\2\2\u07c5\u07b9\3\2\2\2\u07c5\u07ba\3\2"+
		"\2\2\u07c5\u07bb\3\2\2\2\u07c5\u07bc\3\2\2\2\u07c5\u07bd\3\2\2\2\u07c5"+
		"\u07be\3\2\2\2\u07c5\u07bf\3\2\2\2\u07c5\u07c0\3\2\2\2\u07c5\u07c1\3\2"+
		"\2\2\u07c5\u07c2\3\2\2\2\u07c5\u07c3\3\2\2\2\u07c5\u07c4\3\2\2\2\u07c6"+
		"\u0097\3\2\2\2\u07c7\u07c8\5\u009cO\2\u07c8\u0099\3\2\2\2\u07c9\u07ca"+
		"\5\u009cO\2\u07ca\u009b\3\2\2\2\u07cb\u07d0\7)\2\2\u07cc\u07cd\7\u0332"+
		"\2\2\u07cd\u07d1\7\u0332\2\2\u07ce\u07d1\7\u0333\2\2\u07cf\u07d1\7\u0335"+
		"\2\2\u07d0\u07cc\3\2\2\2\u07d0\u07ce\3\2\2\2\u07d0\u07cf\3\2\2\2\u07d1"+
		"\u07d3\3\2\2\2\u07d2\u07d4\7\u02af\2\2\u07d3\u07d2\3\2\2\2\u07d3\u07d4"+
		"\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5\u07d6\7\u0336\2\2\u07d6\u009d\3\2\2"+
		"\2\u07d7\u07d9\7\u01da\2\2\u07d8\u07d7\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9"+
		"\u07da\3\2\2\2\u07da\u07db\7L\2\2\u07db\u07dc\7\u0336\2\2\u07dc\u009f"+
		"\3\2\2\2\u07dd\u07de\7T\2\2\u07de\u07e1\7\177\2\2\u07df\u07e2\7\u032b"+
		"\2\2\u07e0\u07e2\7\u0332\2\2\u07e1\u07df\3\2\2\2\u07e1\u07e0\3\2\2\2\u07e2"+
		"\u07e3\3\2\2\2\u07e3\u07e4\7\u0336\2\2\u07e4\u00a1\3\2\2\2\u07e5\u07e6"+
		"\5\u00a6T\2\u07e6\u00a3\3\2\2\2\u07e7\u07e8\5\u00a6T\2\u07e8\u00a5\3\2"+
		"\2\2\u07e9\u07ea\7\u00a3\2\2\u07ea\u07eb\7\u032b\2\2\u07eb\u07ec\7\u0336"+
		"\2\2\u07ec\u00a7\3\2\2\2\u07ed\u07f1\7\u01cb\2\2\u07ee\u07f2\7\u0332\2"+
		"\2\u07ef\u07f2\7\u0334\2\2\u07f0\u07f2\n\27\2\2\u07f1\u07ee\3\2\2\2\u07f1"+
		"\u07ef\3\2\2\2\u07f1\u07f0\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4\7\33"+
		"\2\2\u07f4\u07f5\7\u0336\2\2\u07f5\u00a9\3\2\2\2\u07f6\u07f7\5\u00aeX"+
		"\2\u07f7\u00ab\3\2\2\2\u07f8\u07f9\5\u00aeX\2\u07f9\u00ad\3\2\2\2\u07fa"+
		"\u07fe\7\u01cb\2\2\u07fb\u07ff\7\u0332\2\2\u07fc\u07ff\7\u0334\2\2\u07fd"+
		"\u07ff\7\u0318\2\2\u07fe\u07fb\3\2\2\2\u07fe\u07fc\3\2\2\2\u07fe\u07fd"+
		"\3\2\2\2\u07ff\u0800\3\2\2\2\u0800\u0803\7\u00a5\2\2\u0801\u0802\7\u0256"+
		"\2\2\u0802\u0804\7\u0318\2\2\u0803\u0801\3\2\2\2\u0803\u0804\3\2\2\2\u0804"+
		"\u0805\3\2\2\2\u0805\u0806\7\u0336\2\2\u0806\u00af\3\2\2\2\u0807\u0808"+
		"\5\u00b4[\2\u0808\u00b1\3\2\2\2\u0809\u080a\5\u00b4[\2\u080a\u00b3\3\2"+
		"\2\2\u080b\u080c\7\u01cb\2\2\u080c\u080d\n\2\2\2\u080d\u080e\5&\24\2\u080e"+
		"\u00b5\3\2\2\2\u080f\u0810\5\u00ba^\2\u0810\u00b7\3\2\2\2\u0811\u0812"+
		"\5\u00ba^\2\u0812\u00b9\3\2\2\2\u0813\u0814\7\u01cb\2\2\u0814\u0815\n"+
		"\2\2\2\u0815\u0819\7\u00bd\2\2\u0816\u0818\n\2\2\2\u0817\u0816\3\2\2\2"+
		"\u0818\u081b\3\2\2\2\u0819\u0817\3\2\2\2\u0819\u081a\3\2\2\2\u081a\u081c"+
		"\3\2\2\2\u081b\u0819\3\2\2\2\u081c\u081d\7\u0336\2\2\u081d\u00bb\3\2\2"+
		"\2\u081e\u081f\5\u00c0a\2\u081f\u00bd\3\2\2\2\u0820\u0821\5\u00c0a\2\u0821"+
		"\u00bf\3\2\2\2\u0822\u0823\7\u01cb\2\2\u0823\u0824\n\2\2\2\u0824\u0825"+
		"\7\u00d3\2\2\u0825\u0826\7\u032b\2\2\u0826\u0827\7\u0336\2\2\u0827\u00c1"+
		"\3\2\2\2\u0828\u0829\5\u00c6d\2\u0829\u00c3\3\2\2\2\u082a\u082b\5\u00c6"+
		"d\2\u082b\u00c5\3\2\2\2\u082c\u082d\7\u01cb\2\2\u082d\u082e\13\2\2\2\u082e"+
		"\u082f\7\u0102\2\2\u082f\u0830\7\u032b\2\2\u0830\u0831\t\30\2\2\u0831"+
		"\u0832\7\u0336\2\2\u0832\u00c7\3\2\2\2\u0833\u0838\7\u01cb\2\2\u0834\u0839"+
		"\7\u0332\2\2\u0835\u0839\7\u0334\2\2\u0836\u0839\7\u0333\2\2\u0837\u0839"+
		"\7\u0335\2\2\u0838\u0834\3\2\2\2\u0838\u0835\3\2\2\2\u0838\u0836\3\2\2"+
		"\2\u0838\u0837\3\2\2\2\u0839\u083b\3\2\2\2\u083a\u083c\5\u00d8m\2\u083b"+
		"\u083a\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u083b\3\2\2\2\u083d\u083e\3\2"+
		"\2\2\u083e\u00c9\3\2\2\2\u083f\u0840\7\u0144\2\2\u0840\u0841\7\u01fb\2"+
		"\2\u0841\u0842\7\u0318\2\2\u0842\u0843\7\u0336\2\2\u0843\u00cb\3\2\2\2"+
		"\u0844\u0848\t\31\2\2\u0845\u0847\n\2\2\2\u0846\u0845\3\2\2\2\u0847\u084a"+
		"\3\2\2\2\u0848\u0846\3\2\2\2\u0848\u0849\3\2\2\2\u0849\u084b\3\2\2\2\u084a"+
		"\u0848\3\2\2\2\u084b\u084c\7\u0336\2\2\u084c\u00cd\3\2\2\2\u084d\u084f"+
		"\7\u01da\2\2\u084e\u084d\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0850\3\2\2"+
		"\2\u0850\u0851\7\u0286\2\2\u0851\u0852\7\u0336\2\2\u0852\u00cf\3\2\2\2"+
		"\u0853\u0854\7\u0243\2\2\u0854\u0856\7\u032b\2\2\u0855\u0853\3\2\2\2\u0855"+
		"\u0856\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0858\7\u0336\2\2\u0858\u00d1"+
		"\3\2\2\2\u0859\u085a\7\u02ec\2\2\u085a\u085b\7\u0318\2\2\u085b\u085c\7"+
		"\u0336\2\2\u085c\u00d3\3\2\2\2\u085d\u085e\5\u00c8e\2\u085e\u00d5\3\2"+
		"\2\2\u085f\u0860\5\u00e0q\2\u0860\u00d7\3\2\2\2\u0861\u0868\5\u00caf\2"+
		"\u0862\u0868\5\u00ccg\2\u0863\u0868\5\u00ceh\2\u0864\u0868\5\u00d0i\2"+
		"\u0865\u0868\5\u00d2j\2\u0866\u0868\5\u00dan\2\u0867\u0861\3\2\2\2\u0867"+
		"\u0862\3\2\2\2\u0867\u0863\3\2\2\2\u0867\u0864\3\2\2\2\u0867\u0865\3\2"+
		"\2\2\u0867\u0866\3\2\2\2\u0868\u00d9\3\2\2\2\u0869\u086a\7!\2\2\u086a"+
		"\u086c\t\25\2\2\u086b\u086d\t\26\2\2\u086c\u086b\3\2\2\2\u086c\u086d\3"+
		"\2\2\2\u086d\u086e\3\2\2\2\u086e\u086f\7\u0336\2\2\u086f\u0870\5\u00dc"+
		"o\2\u0870\u00db\3\2\2\2\u0871\u0872\7\u026f\2\2\u0872\u0873\7\u0336\2"+
		"\2\u0873\u00dd\3\2\2\2\u0874\u0875\5\u00e0q\2\u0875\u00df\3\2\2\2\u0876"+
		"\u0879\7\u01cb\2\2\u0877\u087a\7\u0332\2\2\u0878\u087a\7\u0318\2\2\u0879"+
		"\u0877\3\2\2\2\u0879\u0878\3\2\2\2\u087a\u087b\3\2\2\2\u087b\u087c\7\u01d8"+
		"\2\2\u087c\u087d\7\u0336\2\2\u087d\u00e1\3\2\2\2\u087e\u087f\5\u00e6t"+
		"\2\u087f\u00e3\3\2\2\2\u0880\u0881\5\u00e6t\2\u0881\u00e5\3\2\2\2\u0882"+
		"\u0885\7\u01cb\2\2\u0883\u0886\7\u0332\2\2\u0884\u0886\7\u0334\2\2\u0885"+
		"\u0883\3\2\2\2\u0885\u0884\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u0888\7\u01fc"+
		"\2\2\u0888\u0889\7\u0318\2\2\u0889\u088a\7\u0336\2\2\u088a\u00e7\3\2\2"+
		"\2\u088b\u088c\5\u00ecw\2\u088c\u00e9\3\2\2\2\u088d\u088e\5\u00ecw\2\u088e"+
		"\u00eb\3\2\2\2\u088f\u0890\7\u01cb\2\2\u0890\u0891\7\u0318\2\2\u0891\u0892"+
		"\7\u01fc\2\2\u0892\u0893\7\u0336\2\2\u0893\u00ed\3\2\2\2\u0894\u0895\5"+
		"\u00f2z\2\u0895\u00ef\3\2\2\2\u0896\u0897\5\u00f2z\2\u0897\u00f1\3\2\2"+
		"\2\u0898\u0899\7\u01cb\2\2\u0899\u089a\n\2\2\2\u089a\u089b\7\u021f\2\2"+
		"\u089b\u089c\7\u0318\2\2\u089c\u089d\t\30\2\2\u089d\u089e\7\u0336\2\2"+
		"\u089e\u00f3\3\2\2\2\u089f\u08a0\5\u00f8}\2\u08a0\u00f5\3\2\2\2\u08a1"+
		"\u08a2\5\u00f8}\2\u08a2\u00f7\3\2\2\2\u08a3\u08a4\7\u01cb\2\2\u08a4\u08a5"+
		"\n\2\2\2\u08a5\u08a6\7\u0243\2\2\u08a6\u08a7\7\u032b\2\2\u08a7\u08a8\7"+
		"\u0336\2\2\u08a8\u00f9\3\2\2\2\u08a9\u08aa\5\u00fe\u0080\2\u08aa\u00fb"+
		"\3\2\2\2\u08ab\u08ac\5\u00fe\u0080\2\u08ac\u00fd\3\2\2\2\u08ad\u08ae\7"+
		"\u01cb\2\2\u08ae\u08af\n\2\2\2\u08af\u08b0\7\u0256\2\2\u08b0\u08b1\7\u0318"+
		"\2\2\u08b1\u08b2\t\30\2\2\u08b2\u08b3\7\u0336\2\2\u08b3\u00ff\3\2\2\2"+
		"\u08b4\u08b5\7\u01cb\2\2\u08b5\u08b6\t\32\2\2\u08b6\u08b7\7\u0246\2\2"+
		"\u08b7\u08b8\7\u0336\2\2\u08b8\u0101\3\2\2\2\u08b9\u08bc\7\u01cb\2\2\u08ba"+
		"\u08bd\7\u0318\2\2\u08bb\u08bd\7\u0332\2\2\u08bc\u08ba\3\2\2\2\u08bc\u08bb"+
		"\3\2\2\2\u08bd\u08be\3\2\2\2\u08be\u08bf\7\u0257\2\2\u08bf\u08c0\7\u0336"+
		"\2\2\u08c0\u0103\3\2\2\2\u08c1\u08c2\5\u0108\u0085\2\u08c2\u0105\3\2\2"+
		"\2\u08c3\u08c4\5\u0108\u0085\2\u08c4\u0107\3\2\2\2\u08c5\u08c8\7\u01cb"+
		"\2\2\u08c6\u08c9\7\u0332\2\2\u08c7\u08c9\7\u0318\2\2\u08c8\u08c6\3\2\2"+
		"\2\u08c8\u08c7\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u08cc\7\u026f\2\2\u08cb"+
		"\u08cd\7\u00f7\2\2\u08cc\u08cb\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08cf"+
		"\3\2\2\2\u08ce\u08d0\7]\2\2\u08cf\u08ce\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0"+
		"\u08d1\3\2\2\2\u08d1\u08d2\7\u0336\2\2\u08d2\u0109\3\2\2\2\u08d3\u08d4"+
		"\5\u010e\u0088\2\u08d4\u010b\3\2\2\2\u08d5\u08d6\5\u010e\u0088\2\u08d6"+
		"\u010d\3\2\2\2\u08d7\u08db\7\u01cb\2\2\u08d8\u08dc\7\u0332\2\2\u08d9\u08dc"+
		"\7\u0334\2\2\u08da\u08dc\7\u0318\2\2\u08db\u08d8\3\2\2\2\u08db\u08d9\3"+
		"\2\2\2\u08db\u08da\3\2\2\2\u08dc\u08dd\3\2\2\2\u08dd\u08de\7\u0286\2\2"+
		"\u08de\u08df\7\u0336\2\2\u08df\u010f\3\2\2\2\u08e0\u08e1\7\u01cb\2\2\u08e1"+
		"\u08e2\n\2\2\2\u08e2\u08e3\7\u02ec\2\2\u08e3\u08e4\7\u0318\2\2\u08e4\u08e5"+
		"\7\u0336\2\2\u08e5\u0111\3\2\2\2\u08e6\u08e7\5\u0116\u008c\2\u08e7\u0113"+
		"\3\2\2\2\u08e8\u08e9\5\u0116\u008c\2\u08e9\u0115\3\2\2\2\u08ea\u08f1\7"+
		"\u01d2\2\2\u08eb\u08ee\7\u0332\2\2\u08ec\u08ed\7\u0190\2\2\u08ed\u08ef"+
		"\7\u0332\2\2\u08ee\u08ec\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u08f2\3\2\2"+
		"\2\u08f0\u08f2\7\u0333\2\2\u08f1\u08eb\3\2\2\2\u08f1\u08f0\3\2\2\2\u08f1"+
		"\u08f2\3\2\2\2\u08f2\u08f5\3\2\2\2\u08f3\u08f4\7\u0256\2\2\u08f4\u08f6"+
		"\7\u0318\2\2\u08f5\u08f3\3\2\2\2\u08f5\u08f6\3\2\2\2\u08f6\u08f7\3\2\2"+
		"\2\u08f7\u08f8\7\u0336\2\2\u08f8\u0117\3\2\2\2\u08f9\u08fa\5\u011c\u008f"+
		"\2\u08fa\u0119\3\2\2\2\u08fb\u08fc\5\u011c\u008f\2\u08fc\u011b\3\2\2\2"+
		"\u08fd\u0900\7\u01d2\2\2\u08fe\u0901\7\u0334\2\2\u08ff\u0901\7\u0335\2"+
		"\2\u0900\u08fe\3\2\2\2\u0900\u08ff\3\2\2\2\u0901\u0902\3\2\2\2\u0902\u0903"+
		"\7\u0336\2\2\u0903\u011d\3\2\2\2\u0904\u0905\7\u01da\2\2\u0905\u0906\7"+
		"\u01cb\2\2\u0906\u0907\n\2\2\2\u0907\u0908\7\33\2\2\u0908\u0909\7\u0336"+
		"\2\2\u0909\u011f\3\2\2\2\u090a\u090e\5\u0100\u0081\2\u090b\u090e\5\u011e"+
		"\u0090\2\u090c\u090e\5\u0124\u0093\2\u090d\u090a\3\2\2\2\u090d\u090b\3"+
		"\2\2\2\u090d\u090c\3\2\2\2\u090e\u0121\3\2\2\2\u090f\u0912\5\u0150\u00a9"+
		"\2\u0910\u0912\5\u0126\u0094\2\u0911\u090f\3\2\2\2\u0911\u0910\3\2\2\2"+
		"\u0912\u0123\3\2\2\2\u0913\u0915\7\u01da\2\2\u0914\u0913\3\2\2\2\u0914"+
		"\u0915\3\2\2\2\u0915\u0924\3\2\2\2\u0916\u0917\7)\2\2\u0917\u0925\7\u0334"+
		"\2\2\u0918\u0925\7.\2\2\u0919\u0925\7L\2\2\u091a\u0925\7T\2\2\u091b\u0925"+
		"\7\u0193\2\2\u091c\u0925\7\u026f\2\2\u091d\u0925\7\u0290\2\2\u091e\u0925"+
		"\7\u0256\2\2\u091f\u0925\7\u0195\2\2\u0920\u0921\7\u01cb\2\2\u0921\u0922"+
		"\n\2\2\2\u0922\u0925\t\33\2\2\u0923\u0925\7\u02b7\2\2\u0924\u0916\3\2"+
		"\2\2\u0924\u0918\3\2\2\2\u0924\u0919\3\2\2\2\u0924\u091a\3\2\2\2\u0924"+
		"\u091b\3\2\2\2\u0924\u091c\3\2\2\2\u0924\u091d\3\2\2\2\u0924\u091e\3\2"+
		"\2\2\u0924\u091f\3\2\2\2\u0924\u0920\3\2\2\2\u0924\u0923\3\2\2\2\u0925"+
		"\u0929\3\2\2\2\u0926\u0928\n\2\2\2\u0927\u0926\3\2\2\2\u0928\u092b\3\2"+
		"\2\2\u0929\u0927\3\2\2\2\u0929\u092a\3\2\2\2\u092a\u092c\3\2\2\2\u092b"+
		"\u0929\3\2\2\2\u092c\u092d\7\u0336\2\2\u092d\u0125\3\2\2\2\u092e\u0930"+
		"\7\u01da\2\2\u092f\u092e\3\2\2\2\u092f\u0930\3\2\2\2\u0930\u093b\3\2\2"+
		"\2\u0931\u093c\7L\2\2\u0932\u093c\7R\2\2\u0933\u0934\7T\2\2\u0934\u093c"+
		"\t\34\2\2\u0935\u093c\7\u017e\2\2\u0936\u093c\7\u0193\2\2\u0937\u0938"+
		"\7\u01cb\2\2\u0938\u0939\n\2\2\2\u0939\u093c\t\35\2\2\u093a\u093c\7\u02b7"+
		"\2\2\u093b\u0931\3\2\2\2\u093b\u0932\3\2\2\2\u093b\u0933\3\2\2\2\u093b"+
		"\u0935\3\2\2\2\u093b\u0936\3\2\2\2\u093b\u0937\3\2\2\2\u093b\u093a\3\2"+
		"\2\2\u093c\u0940\3\2\2\2\u093d\u093f\n\2\2\2\u093e\u093d\3\2\2\2\u093f"+
		"\u0942\3\2\2\2\u0940\u093e\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u0943\3\2"+
		"\2\2\u0942\u0940\3\2\2\2\u0943\u0944\7\u0336\2\2\u0944\u0127\3\2\2\2\u0945"+
		"\u0948\5\u0090I\2\u0946\u0948\5\u012a\u0096\2\u0947\u0945\3\2\2\2\u0947"+
		"\u0946\3\2\2\2\u0948\u0129\3\2\2\2\u0949\u094d\t\36\2\2\u094a\u094c\n"+
		"\2\2\2\u094b\u094a\3\2\2\2\u094c\u094f\3\2\2\2\u094d\u094b\3\2\2\2\u094d"+
		"\u094e\3\2\2\2\u094e\u0950\3\2\2\2\u094f\u094d\3\2\2\2\u0950\u0951\7\u0336"+
		"\2\2\u0951\u012b\3\2\2\2\u0952\u096e\5\u009aN\2\u0953\u096e\5\u00a0Q\2"+
		"\u0954\u096e\5\u00a4S\2\u0955\u096e\5\u00acW\2\u0956\u096e\5\u00b2Z\2"+
		"\u0957\u096e\5\u00b8]\2\u0958\u096e\5\u00be`\2\u0959\u096e\5\u00c4c\2"+
		"\u095a\u096e\5\u00dep\2\u095b\u096e\5\u00c8e\2\u095c\u096e\5\u00eav\2"+
		"\u095d\u096e\5\u00e4s\2\u095e\u096e\5\u00f0y\2\u095f\u096e\5\u00f6|\2"+
		"\u0960\u096e\5\u00fc\177\2\u0961\u096e\5\u0106\u0084\2\u0962\u096e\5\u010c"+
		"\u0087\2\u0963\u096e\5\u0110\u0089\2\u0964\u096e\5\u0114\u008b\2\u0965"+
		"\u096e\5\u011a\u008e\2\u0966\u096e\5\u0122\u0092\2\u0967\u096e\5\u0130"+
		"\u0099\2\u0968\u096e\5\u0136\u009c\2\u0969\u096e\5\u013a\u009e\2\u096a"+
		"\u096e\5\u0142\u00a2\2\u096b\u096e\5\u014a\u00a6\2\u096c\u096e\5\u0156"+
		"\u00ac\2\u096d\u0952\3\2\2\2\u096d\u0953\3\2\2\2\u096d\u0954\3\2\2\2\u096d"+
		"\u0955\3\2\2\2\u096d\u0956\3\2\2\2\u096d\u0957\3\2\2\2\u096d\u0958\3\2"+
		"\2\2\u096d\u0959\3\2\2\2\u096d\u095a\3\2\2\2\u096d\u095b\3\2\2\2\u096d"+
		"\u095c\3\2\2\2\u096d\u095d\3\2\2\2\u096d\u095e\3\2\2\2\u096d\u095f\3\2"+
		"\2\2\u096d\u0960\3\2\2\2\u096d\u0961\3\2\2\2\u096d\u0962\3\2\2\2\u096d"+
		"\u0963\3\2\2\2\u096d\u0964\3\2\2\2\u096d\u0965\3\2\2\2\u096d\u0966\3\2"+
		"\2\2\u096d\u0967\3\2\2\2\u096d\u0968\3\2\2\2\u096d\u0969\3\2\2\2\u096d"+
		"\u096a\3\2\2\2\u096d\u096b\3\2\2\2\u096d\u096c\3\2\2\2\u096e\u012d\3\2"+
		"\2\2\u096f\u0970\5\u0132\u009a\2\u0970\u012f\3\2\2\2\u0971\u0972\5\u0132"+
		"\u009a\2\u0972\u0131\3\2\2\2\u0973\u0974\7\u023f\2\2\u0974\u0975\7(\2"+
		"\2\u0975\u0976\7\u0336\2\2\u0976\u0133\3\2\2\2\u0977\u0978\5\u0138\u009d"+
		"\2\u0978\u0135\3\2\2\2\u0979\u097a\5\u0138\u009d\2\u097a\u0137\3\2\2\2"+
		"\u097b\u097c\7\u023f\2\2\u097c\u0983\7\u008b\2\2\u097d\u097e\7\u0256\2"+
		"\2\u097e\u0982\7\u0318\2\2\u097f\u0980\7\u019e\2\2\u0980\u0982\7\u032b"+
		"\2\2\u0981\u097d\3\2\2\2\u0981\u097f\3\2\2\2\u0982\u0985\3\2\2\2\u0983"+
		"\u0981\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u0986\3\2\2\2\u0985\u0983\3\2"+
		"\2\2\u0986\u0987\7\u0336\2\2\u0987\u0139\3\2\2\2\u0988\u0989\5\u013e\u00a0"+
		"\2\u0989\u013b\3\2\2\2\u098a\u098b\5\u013e\u00a0\2\u098b\u013d\3\2\2\2"+
		"\u098c\u098d\7\u023f\2\2\u098d\u098e\7\u01eb\2\2\u098e\u0995\7\u032b\2"+
		"\2\u098f\u0990\7\u0256\2\2\u0990\u0994\7\u0318\2\2\u0991\u0992\7\u019e"+
		"\2\2\u0992\u0994\7\u032b\2\2\u0993\u098f\3\2\2\2\u0993\u0991\3\2\2\2\u0994"+
		"\u0997\3\2\2\2\u0995\u0993\3\2\2\2\u0995\u0996\3\2\2\2\u0996\u0998\3\2"+
		"\2\2\u0997\u0995\3\2\2\2\u0998\u0999\7\u0336\2\2\u0999\u013f\3\2\2\2\u099a"+
		"\u099b\5\u0144\u00a3\2\u099b\u0141\3\2\2\2\u099c\u099d\5\u0144\u00a3\2"+
		"\u099d\u0143\3\2\2\2\u099e\u099f\7\u023f\2\2\u099f\u09a6\t\37\2\2\u09a0"+
		"\u09a1\7\u0256\2\2\u09a1\u09a5\7\u0318\2\2\u09a2\u09a3\7\u019e\2\2\u09a3"+
		"\u09a5\7\u032b\2\2\u09a4\u09a0\3\2\2\2\u09a4\u09a2\3\2\2\2\u09a5\u09a8"+
		"\3\2\2\2\u09a6\u09a4\3\2\2\2\u09a6\u09a7\3\2\2\2\u09a7\u09a9\3\2\2\2\u09a8"+
		"\u09a6\3\2\2\2\u09a9\u09aa\7\u0336\2\2\u09aa\u0145\3\2\2\2\u09ab\u09ac"+
		"\7\u0259\2\2\u09ac\u09ad\7T\2\2\u09ad\u09ae\7\u032b\2\2\u09ae\u09af\7"+
		"\u0336\2\2\u09af\u09b0\5\u0148\u00a5\2\u09b0\u0147\3\2\2\2\u09b1\u09b4"+
		"\5\u012c\u0097\2\u09b2\u09b4\5\u0090I\2\u09b3\u09b1\3\2\2\2\u09b3\u09b2"+
		"\3\2\2\2\u09b4\u09b7\3\2\2\2\u09b5\u09b3\3\2\2\2\u09b5\u09b6\3\2\2\2\u09b6"+
		"\u0149\3\2\2\2\u09b7\u09b5\3\2\2\2\u09b8\u09b9\7T\2\2\u09b9\u09ba\7\u025b"+
		"\2\2\u09ba\u09bb\7\u0332\2\2\u09bb\u09bc\7\u0336\2\2\u09bc\u014b\3\2\2"+
		"\2\u09bd\u09be\7\u0243\2\2\u09be\u09bf\7\u032b\2\2\u09bf\u09c0\7\u0336"+
		"\2\2\u09c0\u014d\3\2\2\2\u09c1\u09c2\7\u0144\2\2\u09c2\u09c3\7\u01fd\2"+
		"\2\u09c3\u09c4\7\u0318\2\2\u09c4\u09c5\7\u0336\2\2\u09c5\u014f\3\2\2\2"+
		"\u09c6\u09c7\7\u02c6\2\2\u09c7\u09c8\7\u01fb\2\2\u09c8\u09c9\7\u0318\2"+
		"\2\u09c9\u09ca\7\u0336\2\2\u09ca\u09cb\5\u0152\u00aa\2\u09cb\u0151\3\2"+
		"\2\2\u09cc\u09d1\5\u014e\u00a8\2\u09cd\u09d1\5\u014c\u00a7\2\u09ce\u09d1"+
		"\5\u0154\u00ab\2\u09cf\u09d1\5\u0128\u0095\2\u09d0\u09cc\3\2\2\2\u09d0"+
		"\u09cd\3\2\2\2\u09d0\u09ce\3\2\2\2\u09d0\u09cf\3\2\2\2\u09d1\u09d2\3\2"+
		"\2\2\u09d2\u09d0\3\2\2\2\u09d2\u09d3\3\2\2\2\u09d3\u0153\3\2\2\2\u09d4"+
		"\u09d5\7\u02ec\2\2\u09d5\u09d6\7\u0318\2\2\u09d6\u09d7\7\u0336\2\2\u09d7"+
		"\u0155\3\2\2\2\u09d8\u09d9\7\u0306\2\2\u09d9\u09da\7\u0318\2\2\u09da\u09dc"+
		"\7\u0336\2\2\u09db\u09dd\5\u0158\u00ad\2\u09dc\u09db\3\2\2\2\u09dd\u09de"+
		"\3\2\2\2\u09de\u09dc\3\2\2\2\u09de\u09df\3\2\2\2\u09df\u0157\3\2\2\2\u09e0"+
		"\u09e3\5\u0094K\2\u09e1\u09e3\5\u00d4k\2\u09e2\u09e0\3\2\2\2\u09e2\u09e1"+
		"\3\2\2\2\u09e3\u0159\3\2\2\2\u09e4\u09e5\5&\24\2\u09e5\u015b\3\2\2\2\u09e6"+
		"\u09e7\7\u0133\2\2\u09e7\u09e8\7\u032b\2\2\u09e8\u09e9\7\u0336\2\2\u09e9"+
		"\u09ea\5\u015e\u00b0\2\u09ea\u015d\3\2\2\2\u09eb\u09ed\5\u0160\u00b1\2"+
		"\u09ec\u09eb\3\2\2\2\u09ed\u09f0\3\2\2\2\u09ee\u09ec\3\2\2\2\u09ee\u09ef"+
		"\3\2\2\2\u09ef\u015f\3\2\2\2\u09f0\u09ee\3\2\2\2\u09f1\u09f5\5\u017e\u00c0"+
		"\2\u09f2\u09f5\5\u0180\u00c1\2\u09f3\u09f5\5\u016a\u00b6\2\u09f4\u09f1"+
		"\3\2\2\2\u09f4\u09f2\3\2\2\2\u09f4\u09f3\3\2\2\2\u09f5\u0161\3\2\2\2\u09f6"+
		"\u0a0a\5\u015a\u00ae\2\u09f7\u0a0a\5\u0168\u00b5\2\u09f8\u0a0a\5\u016c"+
		"\u00b7\2\u09f9\u0a0a\5\u016e\u00b8\2\u09fa\u0a0a\5\u0170\u00b9\2\u09fb"+
		"\u0a0a\5\u0172\u00ba\2\u09fc\u0a0a\5\u0174\u00bb\2\u09fd\u0a0a\5\u0176"+
		"\u00bc\2\u09fe\u0a0a\5\u0178\u00bd\2\u09ff\u0a0a\5\u017a\u00be\2\u0a00"+
		"\u0a0a\5\u0182\u00c2\2\u0a01\u0a0a\5\u0184\u00c3\2\u0a02\u0a0a\5\u0192"+
		"\u00ca\2\u0a03\u0a0a\5\u0190\u00c9\2\u0a04\u0a0a\5\u018e\u00c8\2\u0a05"+
		"\u0a0a\5\u0186\u00c4\2\u0a06\u0a0a\5\u0188\u00c5\2\u0a07\u0a0a\5\u018a"+
		"\u00c6\2\u0a08\u0a0a\5\u018c\u00c7\2\u0a09\u09f6\3\2\2\2\u0a09\u09f7\3"+
		"\2\2\2\u0a09\u09f8\3\2\2\2\u0a09\u09f9\3\2\2\2\u0a09\u09fa\3\2\2\2\u0a09"+
		"\u09fb\3\2\2\2\u0a09\u09fc\3\2\2\2\u0a09\u09fd\3\2\2\2\u0a09\u09fe\3\2"+
		"\2\2\u0a09\u09ff\3\2\2\2\u0a09\u0a00\3\2\2\2\u0a09\u0a01\3\2\2\2\u0a09"+
		"\u0a02\3\2\2\2\u0a09\u0a03\3\2\2\2\u0a09\u0a04\3\2\2\2\u0a09\u0a05\3\2"+
		"\2\2\u0a09\u0a06\3\2\2\2\u0a09\u0a07\3\2\2\2\u0a09\u0a08\3\2\2\2\u0a0a"+
		"\u0163\3\2\2\2\u0a0b\u0a0c\7\u0147\2\2\u0a0c\u0a0e\5*\26\2\u0a0d\u0a0f"+
		"\7\u01bc\2\2\u0a0e\u0a0d\3\2\2\2\u0a0e\u0a0f\3\2\2\2\u0a0f\u0a12\3\2\2"+
		"\2\u0a10\u0a11\7\u01ae\2\2\u0a11\u0a13\7\u032b\2\2\u0a12\u0a10\3\2\2\2"+
		"\u0a12\u0a13\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14\u0a15\7\u0336\2\2\u0a15"+
		"\u0a16\5\u0166\u00b4\2\u0a16\u0165\3\2\2\2\u0a17\u0a19\5\u0162\u00b2\2"+
		"\u0a18\u0a17\3\2\2\2\u0a19\u0a1c\3\2\2\2\u0a1a\u0a18\3\2\2\2\u0a1a\u0a1b"+
		"\3\2\2\2\u0a1b\u0167\3\2\2\2\u0a1c\u0a1a\3\2\2\2\u0a1d\u0a1f\7\u014b\2"+
		"\2\u0a1e\u0a20\7\u020f\2\2\u0a1f\u0a1e\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20"+
		"\u0a21\3\2\2\2\u0a21\u0a22\7\23\2\2\u0a22\u0a23\13\2\2\2\u0a23\u0a24\t"+
		"\30\2\2\u0a24\u0a25\7\u0336\2\2\u0a25\u0169\3\2\2\2\u0a26\u0a27\7\u014b"+
		"\2\2\u0a27\u0a28\7\u0332\2\2\u0a28\u0a29\7\u0336\2\2\u0a29\u016b\3\2\2"+
		"\2\u0a2a\u0a2b\7\u014b\2\2\u0a2b\u0a2f\7 \2\2\u0a2c\u0a2d\7\u0332\2\2"+
		"\u0a2d\u0a30\7\u0332\2\2\u0a2e\u0a30\7\u0333\2\2\u0a2f\u0a2c\3\2\2\2\u0a2f"+
		"\u0a2e\3\2\2\2\u0a30\u0a33\3\2\2\2\u0a31\u0a32\7\u02a1\2\2\u0a32\u0a34"+
		"\7\u0332\2\2\u0a33\u0a31\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a35\3\2\2"+
		"\2\u0a35\u0a36\7\u0336\2\2\u0a36\u016d\3\2\2\2\u0a37\u0a38\7\u014b\2\2"+
		"\u0a38\u0a39\7 \2\2\u0a39\u0a3a\7\u0332\2\2\u0a3a\u0a3b\7\u0332\2\2\u0a3b"+
		"\u0a3c\7\u026c\2\2\u0a3c\u0a3d\7\u0336\2\2\u0a3d\u016f\3\2\2\2\u0a3e\u0a3f"+
		"\7\u014b\2\2\u0a3f\u0a40\7\u01eb\2\2\u0a40\u0a41\7\u0091\2\2\u0a41\u0a42"+
		"\7\u032b\2\2\u0a42\u0a43\7\u0336\2\2\u0a43\u0171\3\2\2\2\u0a44\u0a45\7"+
		"\u014b\2\2\u0a45\u0a46\7\u01eb\2\2\u0a46\u0a47\7\u009b\2\2\u0a47\u0a48"+
		"\7\u032b\2\2\u0a48\u0a49\7\u0336\2\2\u0a49\u0173\3\2\2\2\u0a4a\u0a4b\7"+
		"\u014b\2\2\u0a4b\u0a4c\7\u01eb\2\2\u0a4c\u0a4d\7\u009b\2\2\u0a4d\u0a4e"+
		"\7\u01a4\2\2\u0a4e\u0a4f\7\u0126\2\2\u0a4f\u0a50\7\u032b\2\2\u0a50\u0a51"+
		"\7\u0336\2\2\u0a51\u0175\3\2\2\2\u0a52\u0a53\7\u014b\2\2\u0a53\u0a54\7"+
		"\u020b\2\2\u0a54\u0a55\7\u0256\2\2\u0a55\u0a56\n\2\2\2\u0a56\u0a57\7\u0336"+
		"\2\2\u0a57\u0177\3\2\2\2\u0a58\u0a59\7\u01da\2\2\u0a59\u0a5a\7\u014b\2"+
		"\2\u0a5a\u0a5b\7 \2\2\u0a5b\u0a5c\7\u0336\2\2\u0a5c\u0179\3\2\2\2\u0a5d"+
		"\u0a65\5\u015c\u00af\2\u0a5e\u0a60\7\u01da\2\2\u0a5f\u0a5e\3\2\2\2\u0a5f"+
		"\u0a60\3\2\2\2\u0a60\u0a61\3\2\2\2\u0a61\u0a62\7\u02b5\2\2\u0a62\u0a65"+
		"\7\u0336\2\2\u0a63\u0a65\5\u017c\u00bf\2\u0a64\u0a5d\3\2\2\2\u0a64\u0a5f"+
		"\3\2\2\2\u0a64\u0a63\3\2\2\2\u0a65\u017b\3\2\2\2\u0a66\u0a68\7\u01da\2"+
		"\2\u0a67\u0a66\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68\u0aea\3\2\2\2\u0a69\u0aeb"+
		"\78\2\2\u0a6a\u0aeb\7>\2\2\u0a6b\u0aeb\7@\2\2\u0a6c\u0aeb\7I\2\2\u0a6d"+
		"\u0aeb\7P\2\2\u0a6e\u0aeb\7b\2\2\u0a6f\u0aeb\7m\2\2\u0a70\u0aeb\7r\2\2"+
		"\u0a71\u0aeb\7s\2\2\u0a72\u0aeb\7t\2\2\u0a73\u0aeb\7|\2\2\u0a74\u0aeb"+
		"\7}\2\2\u0a75\u0aeb\7\u0092\2\2\u0a76\u0aeb\7\u0094\2\2\u0a77\u0a78\7"+
		"\u00cd\2\2\u0a78\u0aeb\7P\2\2\u0a79\u0aeb\7\u00ce\2\2\u0a7a\u0aeb\7\u00db"+
		"\2\2\u0a7b\u0aeb\7\u00fb\2\2\u0a7c\u0aeb\7\u010a\2\2\u0a7d\u0aeb\7\u0110"+
		"\2\2\u0a7e\u0aeb\7\u0115\2\2\u0a7f\u0aeb\7\u0120\2\2\u0a80\u0aeb\7\u0123"+
		"\2\2\u0a81\u0aeb\7\u012d\2\2\u0a82\u0aa0\7\u014b\2\2\u0a83\u0aa1\7\26"+
		"\2\2\u0a84\u0aa1\78\2\2\u0a85\u0aa1\7q\2\2\u0a86\u0aa1\7\u00b4\2\2\u0a87"+
		"\u0aa1\7\u00cf\2\2\u0a88\u0aa1\7\u00ba\2\2\u0a89\u0aa1\7\u0106\2\2\u0a8a"+
		"\u0aa1\7\u0127\2\2\u0a8b\u0aa1\7\u013c\2\2\u0a8c\u0aa1\7\u0155\2\2\u0a8d"+
		"\u0aa1\7\u0174\2\2\u0a8e\u0aa1\7\u01b5\2\2\u0a8f\u0aa1\7\u01b8\2\2\u0a90"+
		"\u0aa1\7\u01b9\2\2\u0a91\u0a92\7\u01eb\2\2\u0a92\u0aa1\t \2\2\u0a93\u0aa1"+
		"\7\u01c3\2\2\u0a94\u0aa1\7\u0206\2\2\u0a95\u0aa1\7\u0228\2\2\u0a96\u0aa1"+
		"\7\u023e\2\2\u0a97\u0aa1\7\u0250\2\2\u0a98\u0aa1\7\u0255\2\2\u0a99\u0aa1"+
		"\7\u0259\2\2\u0a9a\u0aa1\7\u02c4\2\2\u0a9b\u0aa1\7\u02e8\2\2\u0a9c\u0aa1"+
		"\7\u02ea\2\2\u0a9d\u0aa1\7\u02f3\2\2\u0a9e\u0aa1\7\u02f6\2\2\u0a9f\u0aa1"+
		"\7\u0306\2\2\u0aa0\u0a83\3\2\2\2\u0aa0\u0a84\3\2\2\2\u0aa0\u0a85\3\2\2"+
		"\2\u0aa0\u0a86\3\2\2\2\u0aa0\u0a87\3\2\2\2\u0aa0\u0a88\3\2\2\2\u0aa0\u0a89"+
		"\3\2\2\2\u0aa0\u0a8a\3\2\2\2\u0aa0\u0a8b\3\2\2\2\u0aa0\u0a8c\3\2\2\2\u0aa0"+
		"\u0a8d\3\2\2\2\u0aa0\u0a8e\3\2\2\2\u0aa0\u0a8f\3\2\2\2\u0aa0\u0a90\3\2"+
		"\2\2\u0aa0\u0a91\3\2\2\2\u0aa0\u0a93\3\2\2\2\u0aa0\u0a94\3\2\2\2\u0aa0"+
		"\u0a95\3\2\2\2\u0aa0\u0a96\3\2\2\2\u0aa0\u0a97\3\2\2\2\u0aa0\u0a98\3\2"+
		"\2\2\u0aa0\u0a99\3\2\2\2\u0aa0\u0a9a\3\2\2\2\u0aa0\u0a9b\3\2\2\2\u0aa0"+
		"\u0a9c\3\2\2\2\u0aa0\u0a9d\3\2\2\2\u0aa0\u0a9e\3\2\2\2\u0aa0\u0a9f\3\2"+
		"\2\2\u0aa1\u0aeb\3\2\2\2\u0aa2\u0aeb\7\u0152\2\2\u0aa3\u0aeb\7\u0157\2"+
		"\2\u0aa4\u0aeb\7\u0159\2\2\u0aa5\u0aeb\7\u0160\2\2\u0aa6\u0aeb\7\u0161"+
		"\2\2\u0aa7\u0aeb\7\u015f\2\2\u0aa8\u0aeb\7\u0172\2\2\u0aa9\u0aeb\7\u0173"+
		"\2\2\u0aaa\u0aeb\7\u017f\2\2\u0aab\u0aeb\7\u0182\2\2\u0aac\u0aeb\7\u0184"+
		"\2\2\u0aad\u0aeb\7\u0185\2\2\u0aae\u0aeb\7\u0187\2\2\u0aaf\u0aeb\7\u018b"+
		"\2\2\u0ab0\u0aeb\7\u018e\2\2\u0ab1\u0aeb\7\u0197\2\2\u0ab2\u0aeb\7\u0199"+
		"\2\2\u0ab3\u0aeb\7\u019a\2\2\u0ab4\u0aeb\7\u01aa\2\2\u0ab5\u0aeb\7\u01ab"+
		"\2\2\u0ab6\u0aeb\7\u01b0\2\2\u0ab7\u0aeb\7\u01b2\2\2\u0ab8\u0aeb\7\u01b8"+
		"\2\2\u0ab9\u0aeb\7\u01c0\2\2\u0aba\u0aeb\7\u01c9\2\2\u0abb\u0aeb\7\u01ca"+
		"\2\2\u0abc\u0abd\7\u01e5\2\2\u0abd\u0aeb\7_\2\2\u0abe\u0aeb\7\u01fb\2"+
		"\2\u0abf\u0aeb\7\u0204\2\2\u0ac0\u0aeb\7\u0210\2\2\u0ac1\u0aeb\7\u0214"+
		"\2\2\u0ac2\u0aeb\7\u0216\2\2\u0ac3\u0aeb\7\u021c\2\2\u0ac4\u0aeb\7\u022a"+
		"\2\2\u0ac5\u0aeb\7\u022d\2\2\u0ac6\u0aeb\7\u0235\2\2\u0ac7\u0aeb\7\u0238"+
		"\2\2\u0ac8\u0aeb\7\u0255\2\2\u0ac9\u0aeb\7\u026e\2\2\u0aca\u0aeb\7\u0274"+
		"\2\2\u0acb\u0aeb\7\u027a\2\2\u0acc\u0aeb\7\u027b\2\2\u0acd\u0aeb\7\u0291"+
		"\2\2\u0ace\u0aeb\7\u0297\2\2\u0acf\u0aeb\7\u0299\2\2\u0ad0\u0aeb\7\u028b"+
		"\2\2\u0ad1\u0aeb\7\u029c\2\2\u0ad2\u0aeb\7\u029f\2\2\u0ad3\u0aeb\7\u02a1"+
		"\2\2\u0ad4\u0aeb\7\u02a6\2\2\u0ad5\u0add\7\u02b5\2\2\u0ad6\u0ade\7\u00d9"+
		"\2\2\u0ad7\u0ad8\7\u01ac\2\2\u0ad8\u0ade\7\u021d\2\2\u0ad9\u0ade\7\u01e1"+
		"\2\2\u0ada\u0ade\7\u0212\2\2\u0adb\u0ade\7\u02fa\2\2\u0adc\u0ade\7\u02f8"+
		"\2\2\u0add\u0ad6\3\2\2\2\u0add\u0ad7\3\2\2\2\u0add\u0ad9\3\2\2\2\u0add"+
		"\u0ada\3\2\2\2\u0add\u0adb\3\2\2\2\u0add\u0adc\3\2\2\2\u0ade\u0aeb\3\2"+
		"\2\2\u0adf\u0aeb\7\u02c0\2\2\u0ae0\u0aeb\7\u02c3\2\2\u0ae1\u0aeb\7\u02db"+
		"\2\2\u0ae2\u0aeb\7\u02e0\2\2\u0ae3\u0aeb\7\u02e4\2\2\u0ae4\u0aeb\7\u02fd"+
		"\2\2\u0ae5\u0aeb\7\u0306\2\2\u0ae6\u0aeb\7\u0307\2\2\u0ae7\u0aeb\7\u030e"+
		"\2\2\u0ae8\u0aeb\7\u0311\2\2\u0ae9\u0aeb\7\u0313\2\2\u0aea\u0a69\3\2\2"+
		"\2\u0aea\u0a6a\3\2\2\2\u0aea\u0a6b\3\2\2\2\u0aea\u0a6c\3\2\2\2\u0aea\u0a6d"+
		"\3\2\2\2\u0aea\u0a6e\3\2\2\2\u0aea\u0a6f\3\2\2\2\u0aea\u0a70\3\2\2\2\u0aea"+
		"\u0a71\3\2\2\2\u0aea\u0a72\3\2\2\2\u0aea\u0a73\3\2\2\2\u0aea\u0a74\3\2"+
		"\2\2\u0aea\u0a75\3\2\2\2\u0aea\u0a76\3\2\2\2\u0aea\u0a77\3\2\2\2\u0aea"+
		"\u0a79\3\2\2\2\u0aea\u0a7a\3\2\2\2\u0aea\u0a7b\3\2\2\2\u0aea\u0a7c\3\2"+
		"\2\2\u0aea\u0a7d\3\2\2\2\u0aea\u0a7e\3\2\2\2\u0aea\u0a7f\3\2\2\2\u0aea"+
		"\u0a80\3\2\2\2\u0aea\u0a81\3\2\2\2\u0aea\u0a82\3\2\2\2\u0aea\u0aa2\3\2"+
		"\2\2\u0aea\u0aa3\3\2\2\2\u0aea\u0aa4\3\2\2\2\u0aea\u0aa5\3\2\2\2\u0aea"+
		"\u0aa6\3\2\2\2\u0aea\u0aa7\3\2\2\2\u0aea\u0aa8\3\2\2\2\u0aea\u0aa9\3\2"+
		"\2\2\u0aea\u0aaa\3\2\2\2\u0aea\u0aab\3\2\2\2\u0aea\u0aac\3\2\2\2\u0aea"+
		"\u0aad\3\2\2\2\u0aea\u0aae\3\2\2\2\u0aea\u0aaf\3\2\2\2\u0aea\u0ab0\3\2"+
		"\2\2\u0aea\u0ab1\3\2\2\2\u0aea\u0ab2\3\2\2\2\u0aea\u0ab3\3\2\2\2\u0aea"+
		"\u0ab4\3\2\2\2\u0aea\u0ab5\3\2\2\2\u0aea\u0ab6\3\2\2\2\u0aea\u0ab7\3\2"+
		"\2\2\u0aea\u0ab8\3\2\2\2\u0aea\u0ab9\3\2\2\2\u0aea\u0aba\3\2\2\2\u0aea"+
		"\u0abb\3\2\2\2\u0aea\u0abc\3\2\2\2\u0aea\u0abe\3\2\2\2\u0aea\u0abf\3\2"+
		"\2\2\u0aea\u0ac0\3\2\2\2\u0aea\u0ac1\3\2\2\2\u0aea\u0ac2\3\2\2\2\u0aea"+
		"\u0ac3\3\2\2\2\u0aea\u0ac4\3\2\2\2\u0aea\u0ac5\3\2\2\2\u0aea\u0ac6\3\2"+
		"\2\2\u0aea\u0ac7\3\2\2\2\u0aea\u0ac8\3\2\2\2\u0aea\u0ac9\3\2\2\2\u0aea"+
		"\u0aca\3\2\2\2\u0aea\u0acb\3\2\2\2\u0aea\u0acc\3\2\2\2\u0aea\u0acd\3\2"+
		"\2\2\u0aea\u0ace\3\2\2\2\u0aea\u0acf\3\2\2\2\u0aea\u0ad0\3\2\2\2\u0aea"+
		"\u0ad1\3\2\2\2\u0aea\u0ad2\3\2\2\2\u0aea\u0ad3\3\2\2\2\u0aea\u0ad4\3\2"+
		"\2\2\u0aea\u0ad5\3\2\2\2\u0aea\u0adf\3\2\2\2\u0aea\u0ae0\3\2\2\2\u0aea"+
		"\u0ae1\3\2\2\2\u0aea\u0ae2\3\2\2\2\u0aea\u0ae3\3\2\2\2\u0aea\u0ae4\3\2"+
		"\2\2\u0aea\u0ae5\3\2\2\2\u0aea\u0ae6\3\2\2\2\u0aea\u0ae7\3\2\2\2\u0aea"+
		"\u0ae8\3\2\2\2\u0aea\u0ae9\3\2\2\2\u0aeb\u0aef\3\2\2\2\u0aec\u0aee\n\2"+
		"\2\2\u0aed\u0aec\3\2\2\2\u0aee\u0af1\3\2\2\2\u0aef\u0aed\3\2\2\2\u0aef"+
		"\u0af0\3\2\2\2\u0af0\u0af2\3\2\2\2\u0af1\u0aef\3\2\2\2\u0af2\u0af3\7\u0336"+
		"\2\2\u0af3\u017d\3\2\2\2\u0af4\u0af5\7\u0217\2\2\u0af5\u0af6\7\u0336\2"+
		"\2\u0af6\u017f\3\2\2\2\u0af7\u0af8\7\u021b\2\2\u0af8\u0af9\7\u032b\2\2"+
		"\u0af9\u0afa\7\u0336\2\2\u0afa\u0181\3\2\2\2\u0afb\u0afd\7\u01da\2\2\u0afc"+
		"\u0afb\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd\u0afe\3\2\2\2\u0afe\u0aff\7\u0286"+
		"\2\2\u0aff\u0b00\7\u0336\2\2\u0b00\u0183\3\2\2\2\u0b01\u0b02\7\u02b5\2"+
		"\2\u0b02\u0b03\7\21\2\2\u0b03\u0b04\7\u02f8\2\2\u0b04\u0b05\7\u032b\2"+
		"\2\u0b05\u0b06\7\u0336\2\2\u0b06\u0185\3\2\2\2\u0b07\u0b08\7\u02b5\2\2"+
		"\u0b08\u0b09\7\u01ac\2\2\u0b09\u0b0a\7\21\2\2\u0b0a\u0b0b\7\u0336\2\2"+
		"\u0b0b\u0187\3\2\2\2\u0b0c\u0b0d\7\u02b5\2\2\u0b0d\u0b0e\7\u01ac\2\2\u0b0e"+
		"\u0b0f\7\u00d0\2\2\u0b0f\u0b10\7I\2\2\u0b10\u0b11\7\u0336\2\2\u0b11\u0189"+
		"\3\2\2\2\u0b12\u0b13\7\u02b5\2\2\u0b13\u0b14\7\u01ac\2\2\u0b14\u0b15\7"+
		"\u00d0\2\2\u0b15\u0b16\7\u00ae\2\2\u0b16\u0b17\7\u0336\2\2\u0b17\u018b"+
		"\3\2\2\2\u0b18\u0b19\7\u02b5\2\2\u0b19\u0b1a\7\u01ac\2\2\u0b1a\u0b1b\7"+
		"\u02da\2\2\u0b1b\u0b1c\7\u0336\2\2\u0b1c\u018d\3\2\2\2\u0b1d\u0b1e\7\u02b5"+
		"\2\2\u0b1e\u0b1f\7\u02da\2\2\u0b1f\u0b20\7-\2\2\u0b20\u0b22\7\u02f8\2"+
		"\2\u0b21\u0b23\7\36\2\2\u0b22\u0b21\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23"+
		"\u0b24\3\2\2\2\u0b24\u0b25\5\62\32\2\u0b25\u0b26\7\u0336\2\2\u0b26\u018f"+
		"\3\2\2\2\u0b27\u0b28\7\u02b5\2\2\u0b28\u0b29\7\u02da\2\2\u0b29\u0b2a\7"+
		"\u00db\2\2\u0b2a\u0b2b\5\66\34\2\u0b2b\u0b2c\7\u0336\2\2\u0b2c\u0191\3"+
		"\2\2\2\u0b2d\u0b2e\7\u02b5\2\2\u0b2e\u0b2f\7\u02da\2\2\u0b2f\u0b30\7\u01c5"+
		"\2\2\u0b30\u0b31\7\u02f8\2\2\u0b31\u0b32\7\u032b\2\2\u0b32\u0b33\7\u0336"+
		"\2\2\u0b33\u0193\3\2\2\2\u0b34\u0b38\7\67\2\2\u0b35\u0b37\n\2\2\2\u0b36"+
		"\u0b35\3\2\2\2\u0b37\u0b3a\3\2\2\2\u0b38\u0b36\3\2\2\2\u0b38\u0b39\3\2"+
		"\2\2\u0b39\u0b3b\3\2\2\2\u0b3a\u0b38\3\2\2\2\u0b3b\u0b3c\7\u0336\2\2\u0b3c"+
		"\u0195\3\2\2\2\u0b3d\u0b40\7\67\2\2\u0b3e\u0b41\7\u032b\2\2\u0b3f\u0b41"+
		"\7\u0332\2\2\u0b40\u0b3e\3\2\2\2\u0b40\u0b3f\3\2\2\2\u0b41\u0b42\3\2\2"+
		"\2\u0b42\u0b46\7\u01e4\2\2\u0b43\u0b45\t!\2\2\u0b44\u0b43\3\2\2\2\u0b45"+
		"\u0b48\3\2\2\2\u0b46\u0b44\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47\u0b49\3\2"+
		"\2\2\u0b48\u0b46\3\2\2\2\u0b49\u0b4a\7\u0336\2\2\u0b4a\u0197\3\2\2\2\u0b4b"+
		"\u0b4f\7\u00a1\2\2\u0b4c\u0b4e\n\2\2\2\u0b4d\u0b4c\3\2\2\2\u0b4e\u0b51"+
		"\3\2\2\2\u0b4f\u0b4d\3\2\2\2\u0b4f\u0b50\3\2\2\2\u0b50\u0b52\3\2\2\2\u0b51"+
		"\u0b4f\3\2\2\2\u0b52\u0b53\7\u0336\2\2\u0b53\u0199\3\2\2\2\u0b54\u0b55"+
		"\7\u00a1\2\2\u0b55\u0b5f\7\u01ea\2\2\u0b56\u0b57\7\u019e\2\2\u0b57\u0b5e"+
		"\7\u032b\2\2\u0b58\u0b59\7\u019f\2\2\u0b59\u0b5e\7\u032b\2\2\u0b5a\u0b5e"+
		"\7/\2\2\u0b5b\u0b5c\7\u0256\2\2\u0b5c\u0b5e\7\u0318\2\2\u0b5d\u0b56\3"+
		"\2\2\2\u0b5d\u0b58\3\2\2\2\u0b5d\u0b5a\3\2\2\2\u0b5d\u0b5b\3\2\2\2\u0b5e"+
		"\u0b61\3\2\2\2\u0b5f\u0b5d\3\2\2\2\u0b5f\u0b60\3\2\2\2\u0b60\u0b62\3\2"+
		"\2\2\u0b61\u0b5f\3\2\2\2\u0b62\u0b63\7\u0336\2\2\u0b63\u019b\3\2\2\2\u0b64"+
		"\u0b68\5\u01a6\u00d4\2\u0b65\u0b68\5\u01ac\u00d7\2\u0b66\u0b68\5\u01b4"+
		"\u00db\2\u0b67\u0b64\3\2\2\2\u0b67\u0b65\3\2\2\2\u0b67\u0b66\3\2\2\2\u0b68"+
		"\u019d\3\2\2\2\u0b69\u0b6a\7\u0152\2\2\u0b6a\u0b6b\7\u0259\2\2\u0b6b\u0b6c"+
		"\7\u01eb\2\2\u0b6c\u0b6d\7\u032b\2\2\u0b6d\u0b6f\7\u0336\2\2\u0b6e\u0b70"+
		"\5\u019c\u00cf\2\u0b6f\u0b6e\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71\u0b6f\3"+
		"\2\2\2\u0b71\u0b72\3\2\2\2\u0b72\u019f\3\2\2\2\u0b73\u0b74\7\u017c\2\2"+
		"\u0b74\u0b75\7\u0336\2\2\u0b75\u01a1\3\2\2\2\u0b76\u0b7a\7\u0193\2\2\u0b77"+
		"\u0b79\n\2\2\2\u0b78\u0b77\3\2\2\2\u0b79\u0b7c\3\2\2\2\u0b7a\u0b78\3\2"+
		"\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b7d\3\2\2\2\u0b7c\u0b7a\3\2\2\2\u0b7d"+
		"\u0b7e\7\u0336\2\2\u0b7e\u01a3\3\2\2\2\u0b7f\u0b80\7\u01d2\2\2\u0b80\u0b81"+
		"\7\u0332\2\2\u0b81\u0b82\7\u0332\2\2\u0b82\u0b85\7\67\2\2\u0b83\u0b86"+
		"\7\u032b\2\2\u0b84\u0b86\7\u0332\2\2\u0b85\u0b83\3\2\2\2\u0b85\u0b84\3"+
		"\2\2\2\u0b86\u0b87\3\2\2\2\u0b87\u0b88\7\u0336\2\2\u0b88\u01a5\3\2\2\2"+
		"\u0b89\u0b8e\5\u0194\u00cb\2\u0b8a\u0b8e\5\u0198\u00cd\2\u0b8b\u0b8e\5"+
		"\u01a0\u00d1\2\u0b8c\u0b8e\5\u01be\u00e0\2\u0b8d\u0b89\3\2\2\2\u0b8d\u0b8a"+
		"\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8d\u0b8c\3\2\2\2\u0b8e\u01a7\3\2\2\2\u0b8f"+
		"\u0b90\5\u01aa\u00d6\2\u0b90\u01a9\3\2\2\2\u0b91\u0b93\7\u01da\2\2\u0b92"+
		"\u0b91\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93\u0b9c\3\2\2\2\u0b94\u0b95\7\67"+
		"\2\2\u0b95\u0b96\t\"\2\2\u0b96\u0b9d\7C\2\2\u0b97\u0b9d\7J\2\2\u0b98\u0b9d"+
		"\7S\2\2\u0b99\u0b9d\7\u00bd\2\2\u0b9a\u0b9d\7\u017c\2\2\u0b9b\u0b9d\7"+
		"\u01e3\2\2\u0b9c\u0b94\3\2\2\2\u0b9c\u0b97\3\2\2\2\u0b9c\u0b98\3\2\2\2"+
		"\u0b9c\u0b99\3\2\2\2\u0b9c\u0b9a\3\2\2\2\u0b9c\u0b9b\3\2\2\2\u0b9d\u0ba1"+
		"\3\2\2\2\u0b9e\u0ba0\n\2\2\2\u0b9f\u0b9e\3\2\2\2\u0ba0\u0ba3\3\2\2\2\u0ba1"+
		"\u0b9f\3\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2\u0ba4\3\2\2\2\u0ba3\u0ba1\3\2"+
		"\2\2\u0ba4\u0ba5\7\u0336\2\2\u0ba5\u01ab\3\2\2\2\u0ba6\u0ba8\7\u01da\2"+
		"\2\u0ba7\u0ba6\3\2\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8\u0ba9\3\2\2\2\u0ba9\u0bad"+
		"\7\u01f7\2\2\u0baa\u0bac\n\2\2\2\u0bab\u0baa\3\2\2\2\u0bac\u0baf\3\2\2"+
		"\2\u0bad\u0bab\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0bb0\3\2\2\2\u0baf\u0bad"+
		"\3\2\2\2\u0bb0\u0bb1\7\u0336\2\2\u0bb1\u01ad\3\2\2\2\u0bb2\u0bb3\7\u01f7"+
		"\2\2\u0bb3\u0bb4\7\u009c\2\2\u0bb4\u0bb5\7\u0336\2\2\u0bb5\u01af\3\2\2"+
		"\2\u0bb6\u0bb8\7\u01da\2\2\u0bb7\u0bb6\3\2\2\2\u0bb7\u0bb8\3\2\2\2\u0bb8"+
		"\u0bb9\3\2\2\2\u0bb9\u0bba\7\u01f7\2\2\u0bba\u0bbb\7\u0318\2\2\u0bbb\u0bbc"+
		"\7\u0336\2\2\u0bbc\u01b1\3\2\2\2\u0bbd\u0bbe\7\u023f\2\2\u0bbe\u0bbf\7"+
		"T\2\2\u0bbf\u0bcb\7\u032b\2\2\u0bc0\u0bc1\7\u019e\2\2\u0bc1\u0bca\7\u032b"+
		"\2\2\u0bc2\u0bc3\7\u019f\2\2\u0bc3\u0bca\7\u032b\2\2\u0bc4\u0bc5\7\u0256"+
		"\2\2\u0bc5\u0bca\7\u0318\2\2\u0bc6\u0bca\7\u02aa\2\2\u0bc7\u0bc8\7\u02bf"+
		"\2\2\u0bc8\u0bca\7\u032b\2\2\u0bc9\u0bc0\3\2\2\2\u0bc9\u0bc2\3\2\2\2\u0bc9"+
		"\u0bc4\3\2\2\2\u0bc9\u0bc6\3\2\2\2\u0bc9\u0bc7\3\2\2\2\u0bca\u0bcd\3\2"+
		"\2\2\u0bcb\u0bc9\3\2\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bce\3\2\2\2\u0bcd"+
		"\u0bcb\3\2\2\2\u0bce\u0bcf\7\u0336\2\2\u0bcf\u01b3\3\2\2\2\u0bd0\u0bd4"+
		"\7\u023f\2\2\u0bd1\u0bd3\n\2\2\2\u0bd2\u0bd1\3\2\2\2\u0bd3\u0bd6\3\2\2"+
		"\2\u0bd4\u0bd2\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0bd7\3\2\2\2\u0bd6\u0bd4"+
		"\3\2\2\2\u0bd7\u0bd8\7\u0336\2\2\u0bd8\u01b5\3\2\2\2\u0bd9\u0bda\7\u023f"+
		"\2\2\u0bda\u0be6\7\u008b\2\2\u0bdb\u0bdc\7\u019e\2\2\u0bdc\u0be5\7\u032b"+
		"\2\2\u0bdd\u0bde\7\u019f\2\2\u0bde\u0be5\7\u032b\2\2\u0bdf\u0be0\7\u0256"+
		"\2\2\u0be0\u0be5\7\u0318\2\2\u0be1\u0be5\7\u02aa\2\2\u0be2\u0be3\7\u02bf"+
		"\2\2\u0be3\u0be5\7\u032b\2\2\u0be4\u0bdb\3\2\2\2\u0be4\u0bdd\3\2\2\2\u0be4"+
		"\u0bdf\3\2\2\2\u0be4\u0be1\3\2\2\2\u0be4\u0be2\3\2\2\2\u0be5\u0be8\3\2"+
		"\2\2\u0be6\u0be4\3\2\2\2\u0be6\u0be7\3\2\2\2\u0be7\u0be9\3\2\2\2\u0be8"+
		"\u0be6\3\2\2\2\u0be9\u0bea\7\u0336\2\2\u0bea\u01b7\3\2\2\2\u0beb\u0bec"+
		"\7\u023f\2\2\u0bec\u0bf0\7\u0250\2\2\u0bed\u0bef\n\2\2\2\u0bee\u0bed\3"+
		"\2\2\2\u0bef\u0bf2\3\2\2\2\u0bf0\u0bee\3\2\2\2\u0bf0\u0bf1\3\2\2\2\u0bf1"+
		"\u0bf3\3\2\2\2\u0bf2\u0bf0\3\2\2\2\u0bf3\u0bf4\7\u0336\2\2\u0bf4\u01b9"+
		"\3\2\2\2\u0bf5\u0bf6\7\u023f\2\2\u0bf6\u0c02\7\u02a2\2\2\u0bf7\u0bf8\7"+
		"\u019e\2\2\u0bf8\u0c01\7\u032b\2\2\u0bf9\u0bfa\7\u019f\2\2\u0bfa\u0c01"+
		"\7\u032b\2\2\u0bfb\u0bfc\7\u0256\2\2\u0bfc\u0c01\7\u0318\2\2\u0bfd\u0c01"+
		"\7\u02aa\2\2\u0bfe\u0bff\7\u02bf\2\2\u0bff\u0c01\7\u032b\2\2\u0c00\u0bf7"+
		"\3\2\2\2\u0c00\u0bf9\3\2\2\2\u0c00\u0bfb\3\2\2\2\u0c00\u0bfd\3\2\2\2\u0c00"+
		"\u0bfe\3\2\2\2\u0c01\u0c04\3\2\2\2\u0c02\u0c00\3\2\2\2\u0c02\u0c03\3\2"+
		"\2\2\u0c03\u0c05\3\2\2\2\u0c04\u0c02\3\2\2\2\u0c05\u0c06\7\u0336\2\2\u0c06"+
		"\u01bb\3\2\2\2\u0c07\u0c14\5\u0196\u00cc\2\u0c08\u0c14\5\u019a\u00ce\2"+
		"\u0c09\u0c14\5\u01a2\u00d2\2\u0c0a\u0c14\5\u01a4\u00d3\2\u0c0b\u0c14\5"+
		"\u01a8\u00d5\2\u0c0c\u0c14\5\u01ae\u00d8\2\u0c0d\u0c14\5\u01b0\u00d9\2"+
		"\u0c0e\u0c14\5\u01b2\u00da\2\u0c0f\u0c14\5\u01b6\u00dc\2\u0c10\u0c14\5"+
		"\u01b8\u00dd\2\u0c11\u0c14\5\u01ba\u00de\2\u0c12\u0c14\5\u01c0\u00e1\2"+
		"\u0c13\u0c07\3\2\2\2\u0c13\u0c08\3\2\2\2\u0c13\u0c09\3\2\2\2\u0c13\u0c0a"+
		"\3\2\2\2\u0c13\u0c0b\3\2\2\2\u0c13\u0c0c\3\2\2\2\u0c13\u0c0d\3\2\2\2\u0c13"+
		"\u0c0e\3\2\2\2\u0c13\u0c0f\3\2\2\2\u0c13\u0c10\3\2\2\2\u0c13\u0c11\3\2"+
		"\2\2\u0c13\u0c12\3\2\2\2\u0c14\u01bd\3\2\2\2\u0c15\u0c19\7\u025b\2\2\u0c16"+
		"\u0c18\n\2\2\2\u0c17\u0c16\3\2\2\2\u0c18\u0c1b\3\2\2\2\u0c19\u0c17\3\2"+
		"\2\2\u0c19\u0c1a\3\2\2\2\u0c1a\u0c1c\3\2\2\2\u0c1b\u0c19\3\2\2\2\u0c1c"+
		"\u0c1d\7\u0336\2\2\u0c1d\u01bf\3\2\2\2\u0c1e\u0c1f\7\u025b\2\2\u0c1f\u0c20"+
		"\7\u0332\2\2\u0c20\u0c21\7\u0336\2\2\u0c21\u01c1\3\2\2\2\u0c22\u0c23\7"+
		"\u0259\2\2\u0c23\u0c24\7\u01eb\2\2\u0c24\u0c25\7\u032b\2\2\u0c25\u0c26"+
		"\7\u0336\2\2\u0c26\u0c27\5\u01c4\u00e3\2\u0c27\u01c3\3\2\2\2\u0c28\u0c2a"+
		"\5\u01bc\u00df\2\u0c29\u0c28\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c29\3"+
		"\2\2\2\u0c2b\u0c2c\3\2\2\2\u0c2c\u01c5\3\2\2\2\u0c2d\u0c2e\7\u00bc\2\2"+
		"\u0c2e\u0c2f\7\u032b\2\2\u0c2f\u0c30\7\u0336\2\2\u0c30\u01c7\3\2\2\2\u0c31"+
		"\u0c35\7\u00bd\2\2\u0c32\u0c34\n\2\2\2\u0c33\u0c32\3\2\2\2\u0c34\u0c37"+
		"\3\2\2\2\u0c35\u0c33\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c38\3\2\2\2\u0c37"+
		"\u0c35\3\2\2\2\u0c38\u0c39\7\u0336\2\2\u0c39\u01c9\3\2\2\2\u0c3a\u0c3b"+
		"\7\u01d2\2\2\u0c3b\u0c3c\7\u0332\2\2\u0c3c\u0c3d\7\u0336\2\2\u0c3d\u01cb"+
		"\3\2\2\2\u0c3e\u0c40\7\u01da\2\2\u0c3f\u0c3e\3\2\2\2\u0c3f\u0c40\3\2\2"+
		"\2\u0c40\u0c41\3\2\2\2\u0c41\u0c45\7\u01f7\2\2\u0c42\u0c44\n\2\2\2\u0c43"+
		"\u0c42\3\2\2\2\u0c44\u0c47\3\2\2\2\u0c45\u0c43\3\2\2\2\u0c45\u0c46\3\2"+
		"\2\2\u0c46\u0c48\3\2\2\2\u0c47\u0c45\3\2\2\2\u0c48\u0c49\7\u0336\2\2\u0c49"+
		"\u01cd\3\2\2\2\u0c4a\u0c4e\7\u023f\2\2\u0c4b\u0c4d\n\2\2\2\u0c4c\u0c4b"+
		"\3\2\2\2\u0c4d\u0c50\3\2\2\2\u0c4e\u0c4c\3\2\2\2\u0c4e\u0c4f\3\2\2\2\u0c4f"+
		"\u0c51\3\2\2\2\u0c50\u0c4e\3\2\2\2\u0c51\u0c52\7\u0336\2\2\u0c52\u01cf"+
		"\3\2\2\2\u0c53\u0c54\7\u0259\2\2\u0c54\u0c55\7\u0250\2\2\u0c55\u0c59\7"+
		"\u0336\2\2\u0c56\u0c58\5\u01d2\u00ea\2\u0c57\u0c56\3\2\2\2\u0c58\u0c5b"+
		"\3\2\2\2\u0c59\u0c57\3\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u01d1\3\2\2\2\u0c5b"+
		"\u0c59\3\2\2\2\u0c5c\u0c62\5\u01c6\u00e4\2\u0c5d\u0c62\5\u01c8\u00e5\2"+
		"\u0c5e\u0c62\5\u01ca\u00e6\2\u0c5f\u0c62\5\u01cc\u00e7\2\u0c60\u0c62\5"+
		"\u01ce\u00e8\2\u0c61\u0c5c\3\2\2\2\u0c61\u0c5d\3\2\2\2\u0c61\u0c5e\3\2"+
		"\2\2\u0c61\u0c5f\3\2\2\2\u0c61\u0c60\3\2\2\2\u0c62\u01d3\3\2\2\2\u0c63"+
		"\u0c64\7\u0191\2\2\u0c64\u0c66\79\2\2\u0c65\u0c67\7\u032b\2\2\u0c66\u0c65"+
		"\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u0c66\3\2\2\2\u0c68\u0c69\3\2\2\2\u0c69"+
		"\u0c6a\3\2\2\2\u0c6a\u0c6b\7\u0336\2\2\u0c6b\u01d5\3\2\2\2\u0c6c\u0c6d"+
		"\7\u0191\2\2\u0c6d\u0c6f\7\u0086\2\2\u0c6e\u0c70\t#\2\2\u0c6f\u0c6e\3"+
		"\2\2\2\u0c70\u0c71\3\2\2\2\u0c71\u0c6f\3\2\2\2\u0c71\u0c72\3\2\2\2\u0c72"+
		"\u0c73\3\2\2\2\u0c73\u0c74\7\u0336\2\2\u0c74\u01d7\3\2\2\2\u0c75\u0c76"+
		"\7\u0191\2\2\u0c76\u0c77\7\u014b\2\2\u0c77\u0c79\7 \2\2\u0c78\u0c7a\t"+
		"#\2\2\u0c79\u0c78\3\2\2\2\u0c7a\u0c7b\3\2\2\2\u0c7b\u0c79\3\2\2\2\u0c7b"+
		"\u0c7c\3\2\2\2\u0c7c\u0c7d\3\2\2\2\u0c7d\u0c7e\7\u0336\2\2\u0c7e\u01d9"+
		"\3\2\2\2\u0c7f\u0c80\7\u0191\2\2\u0c80\u0c81\7\u014b\2\2\u0c81\u0c82\7"+
		" \2\2\u0c82\u0c84\7\u021f\2\2\u0c83\u0c85\t#\2\2\u0c84\u0c83\3\2\2\2\u0c85"+
		"\u0c86\3\2\2\2\u0c86\u0c84\3\2\2\2\u0c86\u0c87\3\2\2\2\u0c87\u0c88\3\2"+
		"\2\2\u0c88\u0c89\7\u0336\2\2\u0c89\u01db\3\2\2\2\u0c8a\u0c8b\7\u0191\2"+
		"\2\u0c8b\u0c8f\7\u0152\2\2\u0c8c\u0c8e\n\2\2\2\u0c8d\u0c8c\3\2\2\2\u0c8e"+
		"\u0c91\3\2\2\2\u0c8f\u0c8d\3\2\2\2\u0c8f\u0c90\3\2\2\2\u0c90\u0c92\3\2"+
		"\2\2\u0c91\u0c8f\3\2\2\2\u0c92\u0c93\7\u0336\2\2\u0c93\u01dd\3\2\2\2\u0c94"+
		"\u0c95\7\u0191\2\2\u0c95\u0c99\7\u016b\2\2\u0c96\u0c98\n\2\2\2\u0c97\u0c96"+
		"\3\2\2\2\u0c98\u0c9b\3\2\2\2\u0c99\u0c97\3\2\2\2\u0c99\u0c9a\3\2\2\2\u0c9a"+
		"\u0c9c\3\2\2\2\u0c9b\u0c99\3\2\2\2\u0c9c\u0c9d\7\u0336\2\2\u0c9d\u01df"+
		"\3\2\2\2\u0c9e\u0ca6\5\u01d4\u00eb\2\u0c9f\u0ca6\5\u01d6\u00ec\2\u0ca0"+
		"\u0ca6\5\u01d8\u00ed\2\u0ca1\u0ca6\5\u01da\u00ee\2\u0ca2\u0ca6\5\u01dc"+
		"\u00ef\2\u0ca3\u0ca6\5\u01de\u00f0\2\u0ca4\u0ca6\5\u01e2\u00f2\2\u0ca5"+
		"\u0c9e\3\2\2\2\u0ca5\u0c9f\3\2\2\2\u0ca5\u0ca0\3\2\2\2\u0ca5\u0ca1\3\2"+
		"\2\2\u0ca5\u0ca2\3\2\2\2\u0ca5\u0ca3\3\2\2\2\u0ca5\u0ca4\3\2\2\2\u0ca6"+
		"\u01e1\3\2\2\2\u0ca7\u0ca8\7\u0191\2\2\u0ca8\u0caa\7\u02bf\2\2\u0ca9\u0cab"+
		"\7\u032b\2\2\u0caa\u0ca9\3\2\2\2\u0cab\u0cac\3\2\2\2\u0cac\u0caa\3\2\2"+
		"\2\u0cac\u0cad\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae\u0caf\7\u0336\2\2\u0caf"+
		"\u01e3\3\2\2\2\u0cb0\u0cb2\7\u01da\2\2\u0cb1\u0cb0\3\2\2\2\u0cb1\u0cb2"+
		"\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cb7\7\u00ad\2\2\u0cb4\u0cb6\n\2\2"+
		"\2\u0cb5\u0cb4\3\2\2\2\u0cb6\u0cb9\3\2\2\2\u0cb7\u0cb5\3\2\2\2\u0cb7\u0cb8"+
		"\3\2\2\2\u0cb8\u0cba\3\2\2\2\u0cb9\u0cb7\3\2\2\2\u0cba\u0cbb\7\u0336\2"+
		"\2\u0cbb\u01e5\3\2\2\2\u0cbc\u0cc0\5\u01e0\u00f1\2\u0cbd\u0cc0\5\u01e4"+
		"\u00f3\2\u0cbe\u0cc0\5\u0210\u0109\2\u0cbf\u0cbc\3\2\2\2\u0cbf\u0cbd\3"+
		"\2\2\2\u0cbf\u0cbe\3\2\2\2\u0cc0\u01e7\3\2\2\2\u0cc1\u0cc2\7\u0256\2\2"+
		"\u0cc2\u0cc3\7\u0318\2\2\u0cc3\u0cc4\5\u01ec\u00f7\2\u0cc4\u0cc8\b\u00f5"+
		"\1\2\u0cc5\u0cc6\6\u00f5\31\3\u0cc6\u0cc9\5\u01e8\u00f5\2\u0cc7\u0cc9"+
		"\6\u00f5\32\3\u0cc8\u0cc5\3\2\2\2\u0cc8\u0cc7\3\2\2\2\u0cc9\u01e9\3\2"+
		"\2\2\u0cca\u0ccb\5\u01e8\u00f5\2\u0ccb\u01eb\3\2\2\2\u0ccc\u0ccd\5\"\22"+
		"\2\u0ccd\u0cce\7\u032b\2\2\u0cce\u0ccf\7\u0336\2\2\u0ccf\u0cd0\5\u01ee"+
		"\u00f8\2\u0cd0\u01ed\3\2\2\2\u0cd1\u0cd3\5\u01e6\u00f4\2\u0cd2\u0cd1\3"+
		"\2\2\2\u0cd3\u0cd6\3\2\2\2\u0cd4\u0cd2\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5"+
		"\u01ef\3\2\2\2\u0cd6\u0cd4\3\2\2\2\u0cd7\u0cd8\7\u0280\2\2\u0cd8\u0cd9"+
		"\79\2\2\u0cd9\u0cdb\7\u0218\2\2\u0cda\u0cdc\7\u0162\2\2\u0cdb\u0cda\3"+
		"\2\2\2\u0cdb\u0cdc\3\2\2\2\u0cdc\u0cde\3\2\2\2\u0cdd\u0cdf\7\u032b\2\2"+
		"\u0cde\u0cdd\3\2\2\2\u0cdf\u0ce0\3\2\2\2\u0ce0\u0cde\3\2\2\2\u0ce0\u0ce1"+
		"\3\2\2\2\u0ce1\u0ce2\3\2\2\2\u0ce2\u0ce3\7\u0336\2\2\u0ce3\u01f1\3\2\2"+
		"\2\u0ce4\u0ce5\7\u0280\2\2\u0ce5\u0ce8\7\u0084\2\2\u0ce6\u0ce9\7\u032b"+
		"\2\2\u0ce7\u0ce9\7\u0318\2\2\u0ce8\u0ce6\3\2\2\2\u0ce8\u0ce7\3\2\2\2\u0ce9"+
		"\u0cea\3\2\2\2\u0cea\u0ceb\7\u00a9\2\2\u0ceb\u0cec\7\u0336\2\2\u0cec\u01f3"+
		"\3\2\2\2\u0ced\u0cee\7\u0280\2\2\u0cee\u0cf0\7\u0086\2\2\u0cef\u0cf1\5"+
		"$\23\2\u0cf0\u0cef\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf0\3\2\2\2\u0cf2"+
		"\u0cf3\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0cf5\7\37\2\2\u0cf5\u0cf6\7"+
		"\u0336\2\2\u0cf6\u01f5\3\2\2\2\u0cf7\u0cf8\7\u0280\2\2\u0cf8\u0cf9\7\u0086"+
		"\2\2\u0cf9\u0cfa\7\u01e0\2\2\u0cfa\u0cfb\7\u0336\2\2\u0cfb\u01f7\3\2\2"+
		"\2\u0cfc\u0cfd\7\u0280\2\2\u0cfd\u0cff\7\u0086\2\2\u0cfe\u0d00\5$\23\2"+
		"\u0cff\u0cfe\3\2\2\2\u0d00\u0d01\3\2\2\2\u0d01\u0cff\3\2\2\2\u0d01\u0d02"+
		"\3\2\2\2\u0d02\u0d03\3\2\2\2\u0d03\u0d04\7\u0336\2\2\u0d04\u01f9\3\2\2"+
		"\2\u0d05\u0d06\7\u0280\2\2\u0d06\u0d08\7\u00f5\2\2\u0d07\u0d09\5$\23\2"+
		"\u0d08\u0d07\3\2\2\2\u0d09\u0d0a\3\2\2\2\u0d0a\u0d08\3\2\2\2\u0d0a\u0d0b"+
		"\3\2\2\2\u0d0b\u0d0c\3\2\2\2\u0d0c\u0d0d\7\u00a9\2\2\u0d0d\u0d0e\7\u0336"+
		"\2\2\u0d0e\u01fb\3\2\2\2\u0d0f\u0d10\7\u0280\2\2\u0d10\u0d14\7\u0147\2"+
		"\2\u0d11\u0d13\n\2\2\2\u0d12\u0d11\3\2\2\2\u0d13\u0d16\3\2\2\2\u0d14\u0d12"+
		"\3\2\2\2\u0d14\u0d15\3\2\2\2\u0d15\u0d17\3\2\2\2\u0d16\u0d14\3\2\2\2\u0d17"+
		"\u0d18\7\u0336\2\2\u0d18\u01fd\3\2\2\2\u0d19\u0d1a\7\u0280\2\2\u0d1a\u0d1b"+
		"\7\u014b\2\2\u0d1b\u0d1f\7\u00b3\2\2\u0d1c\u0d1e\n\2\2\2\u0d1d\u0d1c\3"+
		"\2\2\2\u0d1e\u0d21\3\2\2\2\u0d1f\u0d1d\3\2\2\2\u0d1f\u0d20\3\2\2\2\u0d20"+
		"\u0d22\3\2\2\2\u0d21\u0d1f\3\2\2\2\u0d22\u0d23\7\u0336\2\2\u0d23\u01ff"+
		"\3\2\2\2\u0d24\u0d25\7\u0280\2\2\u0d25\u0d29\7\u0152\2\2\u0d26\u0d28\n"+
		"\2\2\2\u0d27\u0d26\3\2\2\2\u0d28\u0d2b\3\2\2\2\u0d29\u0d27\3\2\2\2\u0d29"+
		"\u0d2a\3\2\2\2\u0d2a\u0d2c\3\2\2\2\u0d2b\u0d29\3\2\2\2\u0d2c\u0d2d\7\u0336"+
		"\2\2\u0d2d\u0201\3\2\2\2\u0d2e\u0d2f\7\u0280\2\2\u0d2f\u0d30\7\u0179\2"+
		"\2\u0d30\u0d31\7\u032b\2\2\u0d31\u0d32\7\u0336\2\2\u0d32\u0203\3\2\2\2"+
		"\u0d33\u0d34\7\u0280\2\2\u0d34\u0d35\7\u019e\2\2\u0d35\u0d36\7\u032b\2"+
		"\2\u0d36\u0d37\7\u0336\2\2\u0d37\u0205\3\2\2\2\u0d38\u0d39\7\u0280\2\2"+
		"\u0d39\u0d3a\7\u019f\2\2\u0d3a\u0d3b\7\u0318\2\2\u0d3b\u0d3c\7\u0336\2"+
		"\2\u0d3c\u0207\3\2\2\2\u0d3d\u0d3e\7\u0280\2\2\u0d3e\u0d3f\7\u01b3\2\2"+
		"\u0d3f\u0d40\7\u0336\2\2\u0d40\u0209\3\2\2\2\u0d41\u0d42\7\u0280\2\2\u0d42"+
		"\u0d43\7\u014b\2\2\u0d43\u0d45\7\u01d7\2\2\u0d44\u0d46\7\u0332\2\2\u0d45"+
		"\u0d44\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d45\3\2\2\2\u0d47\u0d48\3\2"+
		"\2\2\u0d48\u0d49\3\2\2\2\u0d49\u0d4a\7\u0336\2\2\u0d4a\u020b\3\2\2\2\u0d4b"+
		"\u0d4c\7\u0280\2\2\u0d4c\u0d51\7\u01e9\2\2\u0d4d\u0d4e\7\u00d7\2\2\u0d4e"+
		"\u0d52\7\u032b\2\2\u0d4f\u0d52\7\u013d\2\2\u0d50\u0d52\7\u0143\2\2\u0d51"+
		"\u0d4d\3\2\2\2\u0d51\u0d4f\3\2\2\2\u0d51\u0d50\3\2\2\2\u0d52\u0d53\3\2"+
		"\2\2\u0d53\u0d54\7\u0336\2\2\u0d54\u020d\3\2\2\2\u0d55\u0d56\7\u0280\2"+
		"\2\u0d56\u0d57\7\u030a\2\2\u0d57\u0d58\7\u032b\2\2\u0d58\u0d59\7\u0336"+
		"\2\2\u0d59\u020f\3\2\2\2\u0d5a\u0d6a\5\u01f0\u00f9\2\u0d5b\u0d6a\5\u01f2"+
		"\u00fa\2\u0d5c\u0d6a\5\u01f8\u00fd\2\u0d5d\u0d6a\5\u01f4\u00fb\2\u0d5e"+
		"\u0d6a\5\u01fa\u00fe\2\u0d5f\u0d6a\5\u01fc\u00ff\2\u0d60\u0d6a\5\u01fe"+
		"\u0100\2\u0d61\u0d6a\5\u0200\u0101\2\u0d62\u0d6a\5\u0202\u0102\2\u0d63"+
		"\u0d6a\5\u0204\u0103\2\u0d64\u0d6a\5\u0206\u0104\2\u0d65\u0d6a\5\u0208"+
		"\u0105\2\u0d66\u0d6a\5\u020a\u0106\2\u0d67\u0d6a\5\u020c\u0107\2\u0d68"+
		"\u0d6a\5\u020e\u0108\2\u0d69\u0d5a\3\2\2\2\u0d69\u0d5b\3\2\2\2\u0d69\u0d5c"+
		"\3\2\2\2\u0d69\u0d5d\3\2\2\2\u0d69\u0d5e\3\2\2\2\u0d69\u0d5f\3\2\2\2\u0d69"+
		"\u0d60\3\2\2\2\u0d69\u0d61\3\2\2\2\u0d69\u0d62\3\2\2\2\u0d69\u0d63\3\2"+
		"\2\2\u0d69\u0d64\3\2\2\2\u0d69\u0d65\3\2\2\2\u0d69\u0d66\3\2\2\2\u0d69"+
		"\u0d67\3\2\2\2\u0d69\u0d68\3\2\2\2\u0d6a\u0211\3\2\2\2\u00f8\u0216\u021d"+
		"\u0228\u0230\u0238\u023c\u0244\u024d\u0250\u0253\u0258\u0261\u026f\u027a"+
		"\u027c\u0283\u0286\u028e\u0294\u02a1\u02b2\u02cd\u02d2\u02d8\u02da\u02de"+
		"\u03a5\u03aa\u03b0\u03ba\u03e9\u045d\u0470\u04c8\u050c\u0514\u051a\u052e"+
		"\u0533\u0542\u0547\u055e\u0564\u0572\u057b\u0584\u058d\u0591\u0593\u059a"+
		"\u05a1\u05a7\u05b2\u05b6\u05c0\u05c6\u05d2\u05dd\u05e1\u05e6\u05f1\u05fa"+
		"\u0601\u0605\u060f\u0616\u061e\u0642\u064b\u064d\u0654\u0658\u065f\u0664"+
		"\u066d\u0673\u0677\u067d\u0681\u0684\u0693\u0699\u069f\u06aa\u06b4\u06ba"+
		"\u06c0\u06cb\u06d5\u06db\u06e6\u06ec\u06f2\u06f7\u06ff\u0701\u070d\u0713"+
		"\u071e\u0725\u072d\u0737\u0743\u0745\u074c\u075b\u0761\u076e\u0772\u077b"+
		"\u077d\u0784\u078a\u078e\u0793\u079a\u079e\u07a4\u07a9\u07c5\u07d0\u07d3"+
		"\u07d8\u07e1\u07f1\u07fe\u0803\u0819\u0838\u083d\u0848\u084e\u0855\u0867"+
		"\u086c\u0879\u0885\u08bc\u08c8\u08cc\u08cf\u08db\u08ee\u08f1\u08f5\u0900"+
		"\u090d\u0911\u0914\u0924\u0929\u092f\u093b\u0940\u0947\u094d\u096d\u0981"+
		"\u0983\u0993\u0995\u09a4\u09a6\u09b3\u09b5\u09d0\u09d2\u09de\u09e2\u09ee"+
		"\u09f4\u0a09\u0a0e\u0a12\u0a1a\u0a1f\u0a2f\u0a33\u0a5f\u0a64\u0a67\u0aa0"+
		"\u0add\u0aea\u0aef\u0afc\u0b22\u0b38\u0b40\u0b46\u0b4f\u0b5d\u0b5f\u0b67"+
		"\u0b71\u0b7a\u0b85\u0b8d\u0b92\u0b9c\u0ba1\u0ba7\u0bad\u0bb7\u0bc9\u0bcb"+
		"\u0bd4\u0be4\u0be6\u0bf0\u0c00\u0c02\u0c13\u0c19\u0c2b\u0c35\u0c3f\u0c45"+
		"\u0c4e\u0c59\u0c61\u0c68\u0c71\u0c7b\u0c86\u0c8f\u0c99\u0ca5\u0cac\u0cb1"+
		"\u0cb7\u0cbf\u0cc8\u0cd4\u0cdb\u0ce0\u0ce8\u0cf2\u0d01\u0d0a\u0d14\u0d1f"+
		"\u0d29\u0d47\u0d51\u0d69";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}